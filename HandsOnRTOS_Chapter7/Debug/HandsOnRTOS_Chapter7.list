
HandsOnRTOS_Chapter7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000635c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800670c  0800670c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006714  08006714  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800671c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b44  20000010  0800672c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b54  0800672c  00025b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b29b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003286  00000000  00000000  0003b2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  0003e568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  0003fa38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002309f  00000000  00000000  00040d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011869  00000000  00000000  00063e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5f96  00000000  00000000  00075688  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b61e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005738  00000000  00000000  0014b69c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064d4 	.word	0x080064d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080064d4 	.word	0x080064d4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <MX_FREERTOS_Init+0x48>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <MX_FREERTOS_Init+0x4c>)
 80004da:	f003 f96f 	bl	80037bc <osThreadNew>
 80004de:	4602      	mov	r2, r0
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_FREERTOS_Init+0x50>)
 80004e2:	601a      	str	r2, [r3, #0]

  /* creation of Green_Task */
  Green_TaskHandle = osThreadNew(GreenTask, NULL, &Green_Task_attributes);
 80004e4:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <MX_FREERTOS_Init+0x54>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <MX_FREERTOS_Init+0x58>)
 80004ea:	f003 f967 	bl	80037bc <osThreadNew>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_FREERTOS_Init+0x5c>)
 80004f2:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <MX_FREERTOS_Init+0x60>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480e      	ldr	r0, [pc, #56]	; (8000534 <MX_FREERTOS_Init+0x64>)
 80004fa:	f003 f95f 	bl	80037bc <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_FREERTOS_Init+0x68>)
 8000502:	601a      	str	r2, [r3, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <MX_FREERTOS_Init+0x6c>)
 8000506:	2100      	movs	r1, #0
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <MX_FREERTOS_Init+0x70>)
 800050a:	f003 f957 	bl	80037bc <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_FREERTOS_Init+0x74>)
 8000512:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08006650 	.word	0x08006650
 800051c:	08000549 	.word	0x08000549
 8000520:	20005360 	.word	0x20005360
 8000524:	08006674 	.word	0x08006674
 8000528:	08000565 	.word	0x08000565
 800052c:	20005364 	.word	0x20005364
 8000530:	08006698 	.word	0x08006698
 8000534:	0800058d 	.word	0x0800058d
 8000538:	200055c8 	.word	0x200055c8
 800053c:	080066bc 	.word	0x080066bc
 8000540:	080005b5 	.word	0x080005b5
 8000544:	200055c4 	.word	0x200055c4

08000548 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  SEGGER_SYSVIEW_PrintfHost("Default Task");
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <StartDefaultTask+0x18>)
 8000552:	f002 ff0d 	bl	8003370 <SEGGER_SYSVIEW_PrintfHost>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f003 f9d6 	bl	8003908 <osDelay>
 800055c:	e7fb      	b.n	8000556 <StartDefaultTask+0xe>
 800055e:	bf00      	nop
 8000560:	0800651c 	.word	0x0800651c

08000564 <GreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenTask */
void GreenTask(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenTask */
  /* Infinite loop */
  for(;;)
  {
	  SEGGER_SYSVIEW_PrintfHost("GreenLed Task - Low Priority");
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <GreenTask+0x20>)
 800056e:	f002 feff 	bl	8003370 <SEGGER_SYSVIEW_PrintfHost>
      HAL_GPIO_TogglePin(GREENLED_GPIO_Port,GREENLED_Pin);
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <GreenTask+0x24>)
 8000578:	f000 fcab 	bl	8000ed2 <HAL_GPIO_TogglePin>
	  osDelay(3);
 800057c:	2003      	movs	r0, #3
 800057e:	f003 f9c3 	bl	8003908 <osDelay>
	  SEGGER_SYSVIEW_PrintfHost("GreenLed Task - Low Priority");
 8000582:	e7f3      	b.n	800056c <GreenTask+0x8>
 8000584:	0800652c 	.word	0x0800652c
 8000588:	40020c00 	.word	0x40020c00

0800058c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  SEGGER_SYSVIEW_PrintfHost("Task3 - Normal Priority");
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <StartTask03+0x20>)
 8000596:	f002 feeb 	bl	8003370 <SEGGER_SYSVIEW_PrintfHost>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <StartTask03+0x24>)
 80005a0:	f000 fc97 	bl	8000ed2 <HAL_GPIO_TogglePin>
	  osDelay(5);
 80005a4:	2005      	movs	r0, #5
 80005a6:	f003 f9af 	bl	8003908 <osDelay>
	  SEGGER_SYSVIEW_PrintfHost("Task3 - Normal Priority");
 80005aa:	e7f3      	b.n	8000594 <StartTask03+0x8>
 80005ac:	0800654c 	.word	0x0800654c
 80005b0:	40020c00 	.word	0x40020c00

080005b4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  SEGGER_SYSVIEW_PrintfHost("Task 3 - High Priority");
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <StartTask04+0x20>)
 80005be:	f002 fed7 	bl	8003370 <SEGGER_SYSVIEW_PrintfHost>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 80005c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <StartTask04+0x24>)
 80005c8:	f000 fc83 	bl	8000ed2 <HAL_GPIO_TogglePin>
	  osDelay(10);
 80005cc:	200a      	movs	r0, #10
 80005ce:	f003 f99b 	bl	8003908 <osDelay>
	  SEGGER_SYSVIEW_PrintfHost("Task 3 - High Priority");
 80005d2:	e7f3      	b.n	80005bc <StartTask04+0x8>
 80005d4:	08006564 	.word	0x08006564
 80005d8:	40020c00 	.word	0x40020c00

080005dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_GPIO_Init+0x60>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <MX_GPIO_Init+0x60>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_GPIO_Init+0x60>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREENLED_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <MX_GPIO_Init+0x64>)
 8000614:	f000 fc44 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GREENLED_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000618:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800061c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0x64>)
 8000630:	f000 fa9c 	bl	8000b6c <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020c00 	.word	0x40020c00

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 f96c 	bl	8000924 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 800064c:	f002 ff0e 	bl	800346c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000650:	f002 f9ee 	bl	8002a30 <SEGGER_SYSVIEW_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f80a 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f7ff ffc0 	bl	80005dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800065c:	f003 f844 	bl	80036e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000660:	f7ff ff36 	bl	80004d0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000664:	f003 f874 	bl	8003750 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x24>
	...

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 ff22 	bl	80064c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xb4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xb4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <SystemClock_Config+0xb8>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemClock_Config+0xb8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fc13 	bl	8000f08 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e8:	f000 f830 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fe6e 	bl	80013e8 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000712:	f000 f81b 	bl	800074c <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d101      	bne.n	800073e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073a:	f000 f915 	bl	8000968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40001400 	.word	0x40001400

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <HAL_MspInit+0x4c>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x4c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6413      	str	r3, [r2, #64]	; 0x40
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	2037      	movs	r0, #55	; 0x37
 80007c2:	f000 f9a9 	bl	8000b18 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80007c6:	2037      	movs	r0, #55	; 0x37
 80007c8:	f000 f9c2 	bl	8000b50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <HAL_InitTick+0xa0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a1d      	ldr	r2, [pc, #116]	; (800084c <HAL_InitTick+0xa0>)
 80007d6:	f043 0320 	orr.w	r3, r3, #32
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_InitTick+0xa0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 0320 	and.w	r3, r3, #32
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e8:	f107 0210 	add.w	r2, r7, #16
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 ffb0 	bl	8001758 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007f8:	f000 ff9a 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 80007fc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <HAL_InitTick+0xa4>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	0c9b      	lsrs	r3, r3, #18
 8000808:	3b01      	subs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_InitTick+0xa8>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_InitTick+0xac>)
 8000810:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_InitTick+0xa8>)
 8000814:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000818:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_InitTick+0xa8>)
 800081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_InitTick+0xa8>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_InitTick+0xa8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800082c:	4809      	ldr	r0, [pc, #36]	; (8000854 <HAL_InitTick+0xa8>)
 800082e:	f000 ffc5 	bl	80017bc <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <HAL_InitTick+0xa8>)
 800083a:	f000 fff4 	bl	8001826 <HAL_TIM_Base_Start_IT>
 800083e:	4603      	mov	r3, r0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	431bde83 	.word	0x431bde83
 8000854:	20005a28 	.word	0x20005a28
 8000858:	40001400 	.word	0x40001400

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <TIM7_IRQHandler+0x10>)
 8000896:	f000 ffea 	bl	800186e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20005a28 	.word	0x20005a28

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SystemInit+0x28>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a07      	ldr	r2, [pc, #28]	; (80008cc <SystemInit+0x28>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SystemInit+0x28>)
 80008ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008be:	609a      	str	r2, [r3, #8]
#endif
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008d6:	e003      	b.n	80008e0 <LoopCopyDataInit>

080008d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008de:	3104      	adds	r1, #4

080008e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008e8:	d3f6      	bcc.n	80008d8 <CopyDataInit>
  ldr  r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008ec:	e002      	b.n	80008f4 <LoopFillZerobss>

080008ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008f0:	f842 3b04 	str.w	r3, [r2], #4

080008f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008f8:	d3f9      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd3 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f005 fda3 	bl	8006448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fe9f 	bl	8000644 <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800090c:	0800671c 	.word	0x0800671c
  ldr  r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000914:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000918:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800091c:	20005b54 	.word	0x20005b54

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f8d8 	bl	8000b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ff2a 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff ff00 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	20005a68 	.word	0x20005a68

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20005a68 	.word	0x20005a68

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff4c 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2a:	f7ff ff61 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	6978      	ldr	r0, [r7, #20]
 8000b36:	f7ff ffb1 	bl	8000a9c <NVIC_EncodePriority>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff80 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff54 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	e16b      	b.n	8000e60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f040 815a 	bne.w	8000e5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d00b      	beq.n	8000bc6 <HAL_GPIO_Init+0x5a>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d007      	beq.n	8000bc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bba:	2b11      	cmp	r3, #17
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d130      	bne.n	8000c28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	f003 0201 	and.w	r2, r3, #1
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0xfc>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b12      	cmp	r3, #18
 8000c66:	d123      	bne.n	8000cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	69b9      	ldr	r1, [r7, #24]
 8000cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0203 	and.w	r2, r3, #3
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 80b4 	beq.w	8000e5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b5f      	ldr	r3, [pc, #380]	; (8000e74 <HAL_GPIO_Init+0x308>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a5e      	ldr	r2, [pc, #376]	; (8000e74 <HAL_GPIO_Init+0x308>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b5c      	ldr	r3, [pc, #368]	; (8000e74 <HAL_GPIO_Init+0x308>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0e:	4a5a      	ldr	r2, [pc, #360]	; (8000e78 <HAL_GPIO_Init+0x30c>)
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	220f      	movs	r2, #15
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a51      	ldr	r2, [pc, #324]	; (8000e7c <HAL_GPIO_Init+0x310>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d02b      	beq.n	8000d92 <HAL_GPIO_Init+0x226>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a50      	ldr	r2, [pc, #320]	; (8000e80 <HAL_GPIO_Init+0x314>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d025      	beq.n	8000d8e <HAL_GPIO_Init+0x222>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4f      	ldr	r2, [pc, #316]	; (8000e84 <HAL_GPIO_Init+0x318>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d01f      	beq.n	8000d8a <HAL_GPIO_Init+0x21e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4e      	ldr	r2, [pc, #312]	; (8000e88 <HAL_GPIO_Init+0x31c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d019      	beq.n	8000d86 <HAL_GPIO_Init+0x21a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4d      	ldr	r2, [pc, #308]	; (8000e8c <HAL_GPIO_Init+0x320>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0x216>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	; (8000e90 <HAL_GPIO_Init+0x324>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d00d      	beq.n	8000d7e <HAL_GPIO_Init+0x212>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <HAL_GPIO_Init+0x328>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x20e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4a      	ldr	r2, [pc, #296]	; (8000e98 <HAL_GPIO_Init+0x32c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_Init+0x20a>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e00e      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d76:	2308      	movs	r3, #8
 8000d78:	e00c      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	e00a      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d7e:	2305      	movs	r3, #5
 8000d80:	e008      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d82:	2304      	movs	r3, #4
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d86:	2303      	movs	r3, #3
 8000d88:	e004      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <HAL_GPIO_Init+0x228>
 8000d92:	2300      	movs	r3, #0
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	f002 0203 	and.w	r2, r2, #3
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	4093      	lsls	r3, r2
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da4:	4934      	ldr	r1, [pc, #208]	; (8000e78 <HAL_GPIO_Init+0x30c>)
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db2:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd6:	4a31      	ldr	r2, [pc, #196]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <HAL_GPIO_Init+0x330>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	f67f ae90 	bls.w	8000b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3724      	adds	r7, #36	; 0x24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40013c00 	.word	0x40013c00

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ebc:	e003      	b.n	8000ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d104      	bne.n	8000ef6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	041a      	lsls	r2, r3, #16
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ef4:	e002      	b.n	8000efc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e25b      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d075      	beq.n	8001012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f26:	4ba3      	ldr	r3, [pc, #652]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d00c      	beq.n	8000f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f32:	4ba0      	ldr	r3, [pc, #640]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d112      	bne.n	8000f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f3e:	4b9d      	ldr	r3, [pc, #628]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f4a:	d10b      	bne.n	8000f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	4b99      	ldr	r3, [pc, #612]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d05b      	beq.n	8001010 <HAL_RCC_OscConfig+0x108>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d157      	bne.n	8001010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e236      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d106      	bne.n	8000f7c <HAL_RCC_OscConfig+0x74>
 8000f6e:	4b91      	ldr	r3, [pc, #580]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a90      	ldr	r2, [pc, #576]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e01d      	b.n	8000fb8 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x98>
 8000f86:	4b8b      	ldr	r3, [pc, #556]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a8a      	ldr	r2, [pc, #552]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b88      	ldr	r3, [pc, #544]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a87      	ldr	r2, [pc, #540]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0xb0>
 8000fa0:	4b84      	ldr	r3, [pc, #528]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a83      	ldr	r2, [pc, #524]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b81      	ldr	r3, [pc, #516]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a80      	ldr	r2, [pc, #512]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fce6 	bl	8000990 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fce2 	bl	8000990 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1fb      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4b76      	ldr	r3, [pc, #472]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xc0>
 8000fe6:	e014      	b.n	8001012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcd2 	bl	8000990 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fcce 	bl	8000990 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e1e7      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	4b6c      	ldr	r3, [pc, #432]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xe8>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d063      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800101e:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800102a:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001032:	2b08      	cmp	r3, #8
 8001034:	d11c      	bne.n	8001070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001036:	4b5f      	ldr	r3, [pc, #380]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	4b5c      	ldr	r3, [pc, #368]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x152>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d001      	beq.n	800105a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e1bb      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4952      	ldr	r1, [pc, #328]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	e03a      	b.n	80010e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001078:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <HAL_RCC_OscConfig+0x2b0>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107e:	f7ff fc87 	bl	8000990 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc83 	bl	8000990 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e19c      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4940      	ldr	r1, [pc, #256]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
 80010b8:	e015      	b.n	80010e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_RCC_OscConfig+0x2b0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc66 	bl	8000990 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc62 	bl	8000990 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e17b      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d030      	beq.n	8001154 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d016      	beq.n	8001128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_RCC_OscConfig+0x2b4>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001100:	f7ff fc46 	bl	8000990 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fc42 	bl	8000990 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e15b      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x200>
 8001126:	e015      	b.n	8001154 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_RCC_OscConfig+0x2b4>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fc2f 	bl	8000990 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001136:	f7ff fc2b 	bl	8000990 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e144      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 800114a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80a0 	beq.w	80012a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10f      	bne.n	8001192 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800118e:	2301      	movs	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_RCC_OscConfig+0x2b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	2b00      	cmp	r3, #0
 800119c:	d121      	bne.n	80011e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_RCC_OscConfig+0x2b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_RCC_OscConfig+0x2b8>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fbf1 	bl	8000990 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b0:	e011      	b.n	80011d6 <HAL_RCC_OscConfig+0x2ce>
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	42470000 	.word	0x42470000
 80011bc:	42470e80 	.word	0x42470e80
 80011c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c4:	f7ff fbe4 	bl	8000990 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e0fd      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	4b81      	ldr	r3, [pc, #516]	; (80013dc <HAL_RCC_OscConfig+0x4d4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d106      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2f0>
 80011ea:	4b7d      	ldr	r3, [pc, #500]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 80011ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ee:	4a7c      	ldr	r2, [pc, #496]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6713      	str	r3, [r2, #112]	; 0x70
 80011f6:	e01c      	b.n	8001232 <HAL_RCC_OscConfig+0x32a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d10c      	bne.n	800121a <HAL_RCC_OscConfig+0x312>
 8001200:	4b77      	ldr	r3, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001204:	4a76      	ldr	r2, [pc, #472]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6713      	str	r3, [r2, #112]	; 0x70
 800120c:	4b74      	ldr	r3, [pc, #464]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 800120e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001210:	4a73      	ldr	r2, [pc, #460]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6713      	str	r3, [r2, #112]	; 0x70
 8001218:	e00b      	b.n	8001232 <HAL_RCC_OscConfig+0x32a>
 800121a:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 800121c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121e:	4a70      	ldr	r2, [pc, #448]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	6713      	str	r3, [r2, #112]	; 0x70
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122a:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 800122c:	f023 0304 	bic.w	r3, r3, #4
 8001230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d015      	beq.n	8001266 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123a:	f7ff fba9 	bl	8000990 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fba5 	bl	8000990 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0bc      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001258:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ee      	beq.n	8001242 <HAL_RCC_OscConfig+0x33a>
 8001264:	e014      	b.n	8001290 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff fb93 	bl	8000990 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff fb8f 	bl	8000990 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f241 3288 	movw	r2, #5000	; 0x1388
 800127c:	4293      	cmp	r3, r2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e0a6      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001284:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1ee      	bne.n	800126e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d105      	bne.n	80012a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001296:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 800129c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8092 	beq.w	80013d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d05c      	beq.n	8001372 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d141      	bne.n	8001344 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <HAL_RCC_OscConfig+0x4dc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fb63 	bl	8000990 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff fb5f 	bl	8000990 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e078      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f0      	bne.n	80012ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69da      	ldr	r2, [r3, #28]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	019b      	lsls	r3, r3, #6
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	085b      	lsrs	r3, r3, #1
 8001304:	3b01      	subs	r3, #1
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	061b      	lsls	r3, r3, #24
 8001310:	4933      	ldr	r1, [pc, #204]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <HAL_RCC_OscConfig+0x4dc>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fb38 	bl	8000990 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fb34 	bl	8000990 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e04d      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x41c>
 8001342:	e045      	b.n	80013d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_RCC_OscConfig+0x4dc>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fb21 	bl	8000990 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff fb1d 	bl	8000990 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e036      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x44a>
 8001370:	e02e      	b.n	80013d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e029      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_RCC_OscConfig+0x4d8>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	429a      	cmp	r2, r3
 8001390:	d11c      	bne.n	80013cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d115      	bne.n	80013cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013a6:	4013      	ands	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d10d      	bne.n	80013cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40007000 	.word	0x40007000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	42470060 	.word	0x42470060

080013e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0cc      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013fc:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d90c      	bls.n	8001424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800145e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	494d      	ldr	r1, [pc, #308]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d044      	beq.n	8001508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d119      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e06f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e067      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 0203 	bic.w	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4934      	ldr	r1, [pc, #208]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff fa5a 	bl	8000990 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7ff fa56 	bl	8000990 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e04f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 020c 	and.w	r2, r3, #12
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	429a      	cmp	r2, r3
 8001506:	d1eb      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d20c      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e032      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4916      	ldr	r1, [pc, #88]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800156e:	f000 f821 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8001572:	4601      	mov	r1, r0
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
 8001582:	fa21 f303 	lsr.w	r3, r1, r3
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x1c8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f90c 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00
 80015a4:	40023800 	.word	0x40023800
 80015a8:	080066e0 	.word	0x080066e0
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_GetSysClockFreq+0x158>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d007      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x32>
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d008      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x38>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 808d 	bne.w	80016fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_RCC_GetSysClockFreq+0x15c>)
 80015e2:	60bb      	str	r3, [r7, #8]
       break;
 80015e4:	e08c      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_RCC_GetSysClockFreq+0x160>)
 80015e8:	60bb      	str	r3, [r7, #8]
      break;
 80015ea:	e089      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_GetSysClockFreq+0x158>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f6:	4b45      	ldr	r3, [pc, #276]	; (800170c <HAL_RCC_GetSysClockFreq+0x158>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d023      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <HAL_RCC_GetSysClockFreq+0x158>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	f04f 0400 	mov.w	r4, #0
 800160c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	ea03 0501 	and.w	r5, r3, r1
 8001618:	ea04 0602 	and.w	r6, r4, r2
 800161c:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <HAL_RCC_GetSysClockFreq+0x160>)
 800161e:	fb02 f106 	mul.w	r1, r2, r6
 8001622:	2200      	movs	r2, #0
 8001624:	fb02 f205 	mul.w	r2, r2, r5
 8001628:	440a      	add	r2, r1
 800162a:	493a      	ldr	r1, [pc, #232]	; (8001714 <HAL_RCC_GetSysClockFreq+0x160>)
 800162c:	fba5 0101 	umull	r0, r1, r5, r1
 8001630:	1853      	adds	r3, r2, r1
 8001632:	4619      	mov	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f04f 0400 	mov.w	r4, #0
 800163a:	461a      	mov	r2, r3
 800163c:	4623      	mov	r3, r4
 800163e:	f7fe fdc7 	bl	80001d0 <__aeabi_uldivmod>
 8001642:	4603      	mov	r3, r0
 8001644:	460c      	mov	r4, r1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e049      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_RCC_GetSysClockFreq+0x158>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	099b      	lsrs	r3, r3, #6
 8001650:	f04f 0400 	mov.w	r4, #0
 8001654:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	ea03 0501 	and.w	r5, r3, r1
 8001660:	ea04 0602 	and.w	r6, r4, r2
 8001664:	4629      	mov	r1, r5
 8001666:	4632      	mov	r2, r6
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	f04f 0400 	mov.w	r4, #0
 8001670:	0154      	lsls	r4, r2, #5
 8001672:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001676:	014b      	lsls	r3, r1, #5
 8001678:	4619      	mov	r1, r3
 800167a:	4622      	mov	r2, r4
 800167c:	1b49      	subs	r1, r1, r5
 800167e:	eb62 0206 	sbc.w	r2, r2, r6
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f04f 0400 	mov.w	r4, #0
 800168a:	0194      	lsls	r4, r2, #6
 800168c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001690:	018b      	lsls	r3, r1, #6
 8001692:	1a5b      	subs	r3, r3, r1
 8001694:	eb64 0402 	sbc.w	r4, r4, r2
 8001698:	f04f 0100 	mov.w	r1, #0
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	00e2      	lsls	r2, r4, #3
 80016a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016a6:	00d9      	lsls	r1, r3, #3
 80016a8:	460b      	mov	r3, r1
 80016aa:	4614      	mov	r4, r2
 80016ac:	195b      	adds	r3, r3, r5
 80016ae:	eb44 0406 	adc.w	r4, r4, r6
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	02a2      	lsls	r2, r4, #10
 80016bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016c0:	0299      	lsls	r1, r3, #10
 80016c2:	460b      	mov	r3, r1
 80016c4:	4614      	mov	r4, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	4621      	mov	r1, r4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f04f 0400 	mov.w	r4, #0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	f7fe fd7c 	bl	80001d0 <__aeabi_uldivmod>
 80016d8:	4603      	mov	r3, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_GetSysClockFreq+0x158>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	3301      	adds	r3, #1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	60bb      	str	r3, [r7, #8]
      break;
 80016f8:	e002      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016fc:	60bb      	str	r3, [r7, #8]
      break;
 80016fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001700:	68bb      	ldr	r3, [r7, #8]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	00f42400 	.word	0x00f42400
 8001714:	017d7840 	.word	0x017d7840

08001718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_RCC_GetHCLKFreq+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000

08001730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001734:	f7ff fff0 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001738:	4601      	mov	r1, r0
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	0a9b      	lsrs	r3, r3, #10
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	080066f0 	.word	0x080066f0

08001758 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	220f      	movs	r2, #15
 8001766:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0203 	and.w	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_RCC_GetClockConfig+0x60>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 020f 	and.w	r2, r3, #15
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40023c00 	.word	0x40023c00

080017bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e01d      	b.n	800180a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f815 	bl	8001812 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 f968 	bl	8001ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b06      	cmp	r3, #6
 800184e:	d007      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b02      	cmp	r3, #2
 8001882:	d122      	bne.n	80018ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d11b      	bne.n	80018ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f06f 0202 	mvn.w	r2, #2
 800189a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f8ee 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80018b6:	e005      	b.n	80018c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f8e0 	bl	8001a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f8f1 	bl	8001aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d122      	bne.n	800191e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d11b      	bne.n	800191e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f06f 0204 	mvn.w	r2, #4
 80018ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f8c4 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 800190a:	e005      	b.n	8001918 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f8b6 	bl	8001a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8c7 	bl	8001aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b08      	cmp	r3, #8
 800192a:	d122      	bne.n	8001972 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b08      	cmp	r3, #8
 8001938:	d11b      	bne.n	8001972 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f06f 0208 	mvn.w	r2, #8
 8001942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2204      	movs	r2, #4
 8001948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f89a 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 800195e:	e005      	b.n	800196c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f88c 	bl	8001a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f89d 	bl	8001aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b10      	cmp	r3, #16
 800197e:	d122      	bne.n	80019c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b10      	cmp	r3, #16
 800198c:	d11b      	bne.n	80019c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f06f 0210 	mvn.w	r2, #16
 8001996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2208      	movs	r2, #8
 800199c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f870 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80019b2:	e005      	b.n	80019c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f862 	bl	8001a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f873 	bl	8001aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10e      	bne.n	80019f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f06f 0201 	mvn.w	r2, #1
 80019ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe fe9b 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fc:	2b80      	cmp	r3, #128	; 0x80
 80019fe:	d10e      	bne.n	8001a1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	2b80      	cmp	r3, #128	; 0x80
 8001a0c:	d107      	bne.n	8001a1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f903 	bl	8001c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	2b40      	cmp	r3, #64	; 0x40
 8001a2a:	d10e      	bne.n	8001a4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a36:	2b40      	cmp	r3, #64	; 0x40
 8001a38:	d107      	bne.n	8001a4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f838 	bl	8001aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d10e      	bne.n	8001a76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d107      	bne.n	8001a76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f06f 0220 	mvn.w	r2, #32
 8001a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8cd 	bl	8001c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a40      	ldr	r2, [pc, #256]	; (8001be4 <TIM_Base_SetConfig+0x114>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <TIM_Base_SetConfig+0x40>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aee:	d00f      	beq.n	8001b10 <TIM_Base_SetConfig+0x40>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a3d      	ldr	r2, [pc, #244]	; (8001be8 <TIM_Base_SetConfig+0x118>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00b      	beq.n	8001b10 <TIM_Base_SetConfig+0x40>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3c      	ldr	r2, [pc, #240]	; (8001bec <TIM_Base_SetConfig+0x11c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <TIM_Base_SetConfig+0x40>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <TIM_Base_SetConfig+0x120>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d003      	beq.n	8001b10 <TIM_Base_SetConfig+0x40>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <TIM_Base_SetConfig+0x124>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d108      	bne.n	8001b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <TIM_Base_SetConfig+0x114>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02b      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d027      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a2c      	ldr	r2, [pc, #176]	; (8001be8 <TIM_Base_SetConfig+0x118>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d023      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a2b      	ldr	r2, [pc, #172]	; (8001bec <TIM_Base_SetConfig+0x11c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a2a      	ldr	r2, [pc, #168]	; (8001bf0 <TIM_Base_SetConfig+0x120>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01b      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <TIM_Base_SetConfig+0x124>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d017      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <TIM_Base_SetConfig+0x128>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <TIM_Base_SetConfig+0x12c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00f      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <TIM_Base_SetConfig+0x130>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00b      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <TIM_Base_SetConfig+0x134>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <TIM_Base_SetConfig+0x138>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d003      	beq.n	8001b82 <TIM_Base_SetConfig+0xb2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <TIM_Base_SetConfig+0x13c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d108      	bne.n	8001b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <TIM_Base_SetConfig+0x114>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <TIM_Base_SetConfig+0xf8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <TIM_Base_SetConfig+0x124>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d103      	bne.n	8001bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40000800 	.word	0x40000800
 8001bf0:	40000c00 	.word	0x40000c00
 8001bf4:	40010400 	.word	0x40010400
 8001bf8:	40014000 	.word	0x40014000
 8001bfc:	40014400 	.word	0x40014400
 8001c00:	40014800 	.word	0x40014800
 8001c04:	40001800 	.word	0x40001800
 8001c08:	40001c00 	.word	0x40001c00
 8001c0c:	40002000 	.word	0x40002000

08001c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <_DoInit+0x8c>)
 8001c40:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2203      	movs	r2, #3
 8001c46:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <_DoInit+0x90>)
 8001c52:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <_DoInit+0x94>)
 8001c58:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c60:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <_DoInit+0x90>)
 8001c78:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_DoInit+0x98>)
 8001c7e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2210      	movs	r2, #16
 8001c84:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <_DoInit+0x9c>)
 8001c9e:	6810      	ldr	r0, [r2, #0]
 8001ca0:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <_DoInit+0xa0>)
 8001ca6:	6810      	ldr	r0, [r2, #0]
 8001ca8:	6018      	str	r0, [r3, #0]
 8001caa:	8891      	ldrh	r1, [r2, #4]
 8001cac:	7992      	ldrb	r2, [r2, #6]
 8001cae:	8099      	strh	r1, [r3, #4]
 8001cb0:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	719a      	strb	r2, [r3, #6]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20005a6c 	.word	0x20005a6c
 8001cc8:	0800657c 	.word	0x0800657c
 8001ccc:	2000002c 	.word	0x2000002c
 8001cd0:	2000042c 	.word	0x2000042c
 8001cd4:	08006588 	.word	0x08006588
 8001cd8:	0800658c 	.word	0x0800658c

08001cdc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001ce8:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <SEGGER_RTT_ReadNoLock+0x100>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <SEGGER_RTT_ReadNoLock+0x18>
 8001cf0:	f7ff ffa2 	bl	8001c38 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	3360      	adds	r3, #96	; 0x60
 8001d00:	4a36      	ldr	r2, [pc, #216]	; (8001ddc <SEGGER_RTT_ReadNoLock+0x100>)
 8001d02:	4413      	add	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001d1a:	6a3a      	ldr	r2, [r7, #32]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d92a      	bls.n	8001d78 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4293      	cmp	r3, r2
 8001d32:	bf28      	it	cs
 8001d34:	4613      	movcs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	4413      	add	r3, r2
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4619      	mov	r1, r3
 8001d44:	69f8      	ldr	r0, [r7, #28]
 8001d46:	f004 fbb2 	bl	80064ae <memcpy>
    NumBytesRead += NumBytesRem;
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001d62:	6a3a      	ldr	r2, [r7, #32]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	6a3a      	ldr	r2, [r7, #32]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d101      	bne.n	8001d78 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4293      	cmp	r3, r2
 8001d86:	bf28      	it	cs
 8001d88:	4613      	movcs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d018      	beq.n	8001dc4 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	69f8      	ldr	r0, [r7, #28]
 8001da0:	f004 fb85 	bl	80064ae <memcpy>
    NumBytesRead += NumBytesRem;
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20005a6c 	.word	0x20005a6c

08001de0 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4a3f      	ldr	r2, [pc, #252]	; (8001efc <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d854      	bhi.n	8001ec0 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d30f      	bcc.n	8001e4a <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4413      	add	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fb39 	bl	80064ae <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	441a      	add	r2, r3
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e054      	b.n	8001ef4 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d34b      	bcc.n	8001ef2 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d90e      	bls.n	8001e8a <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4413      	add	r3, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fb18 	bl	80064ae <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	441a      	add	r2, r3
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	e018      	b.n	8001ebc <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 fb09 	bl	80064ae <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	6858      	ldr	r0, [r3, #4]
 8001ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	18d1      	adds	r1, r2, r3
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	f004 fafe 	bl	80064ae <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad2      	subs	r2, r2, r3
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e019      	b.n	8001ef4 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d30f      	bcc.n	8001ef2 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4413      	add	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fae5 	bl	80064ae <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	441a      	add	r2, r3
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20005a6c 	.word	0x20005a6c

08001f00 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8001f16:	f7ff fe8f 	bl	8001c38 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d24c      	bcs.n	8001fc0 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8001f26:	f3ef 8311 	mrs	r3, BASEPRI
 8001f2a:	f04f 0120 	mov.w	r1, #32
 8001f2e:	f381 8811 	msr	BASEPRI, r1
 8001f32:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d032      	beq.n	8001fa0 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001f3a:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001f4e:	4920      	ldr	r1, [pc, #128]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3304      	adds	r3, #4
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001f64:	491a      	ldr	r1, [pc, #104]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3320      	adds	r3, #32
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8001f78:	4915      	ldr	r1, [pc, #84]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	3328      	adds	r3, #40	; 0x28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8001f8c:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	3324      	adds	r3, #36	; 0x24
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8001fa0:	490b      	ldr	r1, [pc, #44]	; (8001fd0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	332c      	adds	r3, #44	; 0x2c
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e002      	b.n	8001fc6 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc4:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001fc6:	697b      	ldr	r3, [r7, #20]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20005a6c 	.word	0x20005a6c

08001fd4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8001fea:	f7ff fe25 	bl	8001c38 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d24b      	bcs.n	8002092 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8001ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8001ffe:	f04f 0120 	mov.w	r1, #32
 8002002:	f381 8811 	msr	BASEPRI, r1
 8002006:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d031      	beq.n	8002072 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800200e:	4925      	ldr	r1, [pc, #148]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	3360      	adds	r3, #96	; 0x60
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002022:	4920      	ldr	r1, [pc, #128]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	3364      	adds	r3, #100	; 0x64
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	3368      	adds	r3, #104	; 0x68
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800204a:	4916      	ldr	r1, [pc, #88]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	3370      	adds	r3, #112	; 0x70
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800205e:	4911      	ldr	r1, [pc, #68]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	336c      	adds	r3, #108	; 0x6c
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002072:	490c      	ldr	r1, [pc, #48]	; (80020a4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	3374      	adds	r3, #116	; 0x74
 8002082:	6a3a      	ldr	r2, [r7, #32]
 8002084:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e002      	b.n	8002098 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002098:	697b      	ldr	r3, [r7, #20]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20005a6c 	.word	0x20005a6c

080020a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80020b8:	e002      	b.n	80020c0 <_EncodeStr+0x18>
    Len++;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	3301      	adds	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f6      	bne.n	80020ba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d901      	bls.n	80020d8 <_EncodeStr+0x30>
    Len = Limit;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2bfe      	cmp	r3, #254	; 0xfe
 80020dc:	d806      	bhi.n	80020ec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	60fa      	str	r2, [r7, #12]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e011      	b.n	8002110 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60fa      	str	r2, [r7, #12]
 80020f2:	22ff      	movs	r2, #255	; 0xff
 80020f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	60fa      	str	r2, [r7, #12]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	0a19      	lsrs	r1, r3, #8
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	60fa      	str	r2, [r7, #12]
 800210c:	b2ca      	uxtb	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002114:	e00a      	b.n	800212c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	1c53      	adds	r3, r2, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	60f9      	str	r1, [r7, #12]
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]
    n++;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3f0      	bcc.n	8002116 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002160:	1cfb      	adds	r3, r7, #3
 8002162:	2201      	movs	r2, #1
 8002164:	4619      	mov	r1, r3
 8002166:	2001      	movs	r0, #1
 8002168:	f7ff fdb8 	bl	8001cdc <SEGGER_RTT_ReadNoLock>
 800216c:	4603      	mov	r3, r0
 800216e:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	dd44      	ble.n	8002200 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d01a      	beq.n	80021b2 <_HandleIncomingPacket+0x58>
 800217c:	2b04      	cmp	r3, #4
 800217e:	dc06      	bgt.n	800218e <_HandleIncomingPacket+0x34>
 8002180:	2b02      	cmp	r3, #2
 8002182:	d010      	beq.n	80021a6 <_HandleIncomingPacket+0x4c>
 8002184:	2b02      	cmp	r3, #2
 8002186:	dc11      	bgt.n	80021ac <_HandleIncomingPacket+0x52>
 8002188:	2b01      	cmp	r3, #1
 800218a:	d009      	beq.n	80021a0 <_HandleIncomingPacket+0x46>
 800218c:	e02d      	b.n	80021ea <_HandleIncomingPacket+0x90>
 800218e:	2b06      	cmp	r3, #6
 8002190:	d015      	beq.n	80021be <_HandleIncomingPacket+0x64>
 8002192:	2b06      	cmp	r3, #6
 8002194:	db10      	blt.n	80021b8 <_HandleIncomingPacket+0x5e>
 8002196:	2b07      	cmp	r3, #7
 8002198:	d014      	beq.n	80021c4 <_HandleIncomingPacket+0x6a>
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d015      	beq.n	80021ca <_HandleIncomingPacket+0x70>
 800219e:	e024      	b.n	80021ea <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80021a0:	f000 fc46 	bl	8002a30 <SEGGER_SYSVIEW_Start>
      break;
 80021a4:	e031      	b.n	800220a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80021a6:	f000 fcff 	bl	8002ba8 <SEGGER_SYSVIEW_Stop>
      break;
 80021aa:	e02e      	b.n	800220a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80021ac:	f000 feda 	bl	8002f64 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80021b0:	e02b      	b.n	800220a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80021b2:	f000 fe9f 	bl	8002ef4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80021b6:	e028      	b.n	800220a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80021b8:	f000 fd1c 	bl	8002bf4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80021bc:	e025      	b.n	800220a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80021be:	f001 f899 	bl	80032f4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80021c2:	e022      	b.n	800220a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80021c4:	f001 f878 	bl	80032b8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80021c8:	e01f      	b.n	800220a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80021ca:	1cfb      	adds	r3, r7, #3
 80021cc:	2201      	movs	r2, #1
 80021ce:	4619      	mov	r1, r3
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7ff fd83 	bl	8001cdc <SEGGER_RTT_ReadNoLock>
 80021d6:	4603      	mov	r3, r0
 80021d8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	dd11      	ble.n	8002204 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 ffe8 	bl	80031b8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80021e8:	e00c      	b.n	8002204 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da0a      	bge.n	8002208 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80021f2:	1cfb      	adds	r3, r7, #3
 80021f4:	2201      	movs	r2, #1
 80021f6:	4619      	mov	r1, r3
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7ff fd6f 	bl	8001cdc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80021fe:	e003      	b.n	8002208 <_HandleIncomingPacket+0xae>
    }
  }
 8002200:	bf00      	nop
 8002202:	e002      	b.n	800220a <_HandleIncomingPacket+0xb0>
      break;
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <_HandleIncomingPacket+0xb0>
      break;
 8002208:	bf00      	nop
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800221a:	2301      	movs	r3, #1
 800221c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <_TrySendOverflowPacket+0xd8>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	e00b      	b.n	8002248 <_TrySendOverflowPacket+0x34>
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	b2da      	uxtb	r2, r3
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	1c59      	adds	r1, r3, #1
 8002238:	62f9      	str	r1, [r7, #44]	; 0x2c
 800223a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	09db      	lsrs	r3, r3, #7
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	2b7f      	cmp	r3, #127	; 0x7f
 800224c:	d8f0      	bhi.n	8002230 <_TrySendOverflowPacket+0x1c>
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <_TrySendOverflowPacket+0xdc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <_TrySendOverflowPacket+0xd8>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	e00b      	b.n	8002290 <_TrySendOverflowPacket+0x7c>
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	6279      	str	r1, [r7, #36]	; 0x24
 8002282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	09db      	lsrs	r3, r3, #7
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	2b7f      	cmp	r3, #127	; 0x7f
 8002294:	d8f0      	bhi.n	8002278 <_TrySendOverflowPacket+0x64>
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	627a      	str	r2, [r7, #36]	; 0x24
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff fd94 	bl	8001de0 <SEGGER_RTT_WriteSkipNoLock>
 80022b8:	4603      	mov	r3, r0
 80022ba:	613b      	str	r3, [r7, #16]
  if (Status) {
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <_TrySendOverflowPacket+0xd8>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <_TrySendOverflowPacket+0xd8>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <_TrySendOverflowPacket+0xd8>)
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e004      	b.n	80022e0 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <_TrySendOverflowPacket+0xd8>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a03      	ldr	r2, [pc, #12]	; (80022ec <_TrySendOverflowPacket+0xd8>)
 80022de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80022e0:	693b      	ldr	r3, [r7, #16]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3730      	adds	r7, #48	; 0x30
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000844 	.word	0x20000844
 80022f0:	e0001004 	.word	0xe0001004

080022f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002300:	4b63      	ldr	r3, [pc, #396]	; (8002490 <_SendPacket+0x19c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d010      	beq.n	800232a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <_SendPacket+0x19c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a1 	beq.w	8002454 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <_SendPacket+0x19c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d109      	bne.n	800232e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800231a:	f7ff ff7b 	bl	8002214 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <_SendPacket+0x19c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	f040 8098 	bne.w	8002458 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002328:	e001      	b.n	800232e <_SendPacket+0x3a>
    goto Send;
 800232a:	bf00      	nop
 800232c:	e000      	b.n	8002330 <_SendPacket+0x3c>
Send:
 800232e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b1f      	cmp	r3, #31
 8002334:	d809      	bhi.n	800234a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002336:	4b56      	ldr	r3, [pc, #344]	; (8002490 <_SendPacket+0x19c>)
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 8089 	bne.w	800245c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b17      	cmp	r3, #23
 800234e:	d807      	bhi.n	8002360 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3b01      	subs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e03d      	b.n	80023dc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b7f      	cmp	r3, #127	; 0x7f
 800236c:	d912      	bls.n	8002394 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	09da      	lsrs	r2, r3, #7
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3b01      	subs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	3a01      	subs	r2, #1
 8002386:	60fa      	str	r2, [r7, #12]
 8002388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e006      	b.n	80023a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3b01      	subs	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b7f      	cmp	r3, #127	; 0x7f
 80023a6:	d912      	bls.n	80023ce <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	09da      	lsrs	r2, r3, #7
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	3a01      	subs	r2, #1
 80023c0:	60fa      	str	r2, [r7, #12]
 80023c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e006      	b.n	80023dc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <_SendPacket+0x1a0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <_SendPacket+0x19c>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	e00b      	b.n	800240e <_SendPacket+0x11a>
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1c59      	adds	r1, r3, #1
 80023fe:	6279      	str	r1, [r7, #36]	; 0x24
 8002400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	09db      	lsrs	r3, r3, #7
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	2b7f      	cmp	r3, #127	; 0x7f
 8002412:	d8f0      	bhi.n	80023f6 <_SendPacket+0x102>
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	627a      	str	r2, [r7, #36]	; 0x24
 800241a:	6a3a      	ldr	r2, [r7, #32]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	461a      	mov	r2, r3
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff fcd6 	bl	8001de0 <SEGGER_RTT_WriteSkipNoLock>
 8002434:	4603      	mov	r3, r0
 8002436:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <_SendPacket+0x19c>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	60d3      	str	r3, [r2, #12]
 8002444:	e00b      	b.n	800245e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <_SendPacket+0x19c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <_SendPacket+0x19c>)
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e004      	b.n	800245e <_SendPacket+0x16a>
    goto SendDone;
 8002454:	bf00      	nop
 8002456:	e002      	b.n	800245e <_SendPacket+0x16a>
      goto SendDone;
 8002458:	bf00      	nop
 800245a:	e000      	b.n	800245e <_SendPacket+0x16a>
      goto SendDone;
 800245c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <_SendPacket+0x1a4>)
 8002460:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <_SendPacket+0x1a4>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	429a      	cmp	r2, r3
 800246c:	d00b      	beq.n	8002486 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <_SendPacket+0x19c>)
 8002470:	789b      	ldrb	r3, [r3, #2]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <_SendPacket+0x19c>)
 8002478:	2201      	movs	r2, #1
 800247a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800247c:	f7ff fe6d 	bl	800215a <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <_SendPacket+0x19c>)
 8002482:	2200      	movs	r2, #0
 8002484:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000844 	.word	0x20000844
 8002494:	e0001004 	.word	0xe0001004
 8002498:	20005a6c 	.word	0x20005a6c

0800249c <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b0a2      	sub	sp, #136	; 0x88
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 80024b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 80024be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01e      	beq.n	8002504 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 80024c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80024ca:	2b25      	cmp	r3, #37	; 0x25
 80024cc:	d1f1      	bne.n	80024b2 <_VPrintHost+0x16>
      c = *p;
 80024ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1d19      	adds	r1, r3, #4
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6011      	str	r1, [r2, #0]
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ec:	460a      	mov	r2, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80024f4:	440b      	add	r3, r1
 80024f6:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 80024fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d002      	beq.n	8002508 <_VPrintHost+0x6c>
    c = *p++;
 8002502:	e7d6      	b.n	80024b2 <_VPrintHost+0x16>
      break;
 8002504:	bf00      	nop
 8002506:	e000      	b.n	800250a <_VPrintHost+0x6e>
        break;
 8002508:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800250a:	f3ef 8311 	mrs	r3, BASEPRI
 800250e:	f04f 0120 	mov.w	r1, #32
 8002512:	f381 8811 	msr	BASEPRI, r1
 8002516:	65bb      	str	r3, [r7, #88]	; 0x58
 8002518:	483f      	ldr	r0, [pc, #252]	; (8002618 <_VPrintHost+0x17c>)
 800251a:	f7ff fe12 	bl	8002142 <_PreparePacket>
 800251e:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002526:	f7ff fdbf 	bl	80020a8 <_EncodeStr>
 800252a:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800252c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800252e:	677b      	str	r3, [r7, #116]	; 0x74
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	673b      	str	r3, [r7, #112]	; 0x70
 8002534:	e00b      	b.n	800254e <_VPrintHost+0xb2>
 8002536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002538:	b2da      	uxtb	r2, r3
 800253a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253c:	1c59      	adds	r1, r3, #1
 800253e:	6779      	str	r1, [r7, #116]	; 0x74
 8002540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800254a:	09db      	lsrs	r3, r3, #7
 800254c:	673b      	str	r3, [r7, #112]	; 0x70
 800254e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002550:	2b7f      	cmp	r3, #127	; 0x7f
 8002552:	d8f0      	bhi.n	8002536 <_VPrintHost+0x9a>
 8002554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	677a      	str	r2, [r7, #116]	; 0x74
 800255a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002562:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8002564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800256c:	66bb      	str	r3, [r7, #104]	; 0x68
 800256e:	e00b      	b.n	8002588 <_VPrintHost+0xec>
 8002570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002572:	b2da      	uxtb	r2, r3
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	66f9      	str	r1, [r7, #108]	; 0x6c
 800257a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002584:	09db      	lsrs	r3, r3, #7
 8002586:	66bb      	str	r3, [r7, #104]	; 0x68
 8002588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800258a:	2b7f      	cmp	r3, #127	; 0x7f
 800258c:	d8f0      	bhi.n	8002570 <_VPrintHost+0xd4>
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002594:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259c:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80025a6:	e022      	b.n	80025ee <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 80025a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025aa:	667b      	str	r3, [r7, #100]	; 0x64
 80025ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	663b      	str	r3, [r7, #96]	; 0x60
 80025b4:	e00b      	b.n	80025ce <_VPrintHost+0x132>
 80025b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025bc:	1c59      	adds	r1, r3, #1
 80025be:	6679      	str	r1, [r7, #100]	; 0x64
 80025c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ca:	09db      	lsrs	r3, r3, #7
 80025cc:	663b      	str	r3, [r7, #96]	; 0x60
 80025ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d0:	2b7f      	cmp	r3, #127	; 0x7f
 80025d2:	d8f0      	bhi.n	80025b6 <_VPrintHost+0x11a>
 80025d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	667a      	str	r2, [r7, #100]	; 0x64
 80025da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e2:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 80025e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e8:	3304      	adds	r3, #4
 80025ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80025ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1d5      	bne.n	80025a8 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80025fc:	221a      	movs	r2, #26
 80025fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002600:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002602:	f7ff fe77 	bl	80022f4 <_SendPacket>
    RECORD_END();
 8002606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002608:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3788      	adds	r7, #136	; 0x88
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000874 	.word	0x20000874

0800261c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800262a:	2300      	movs	r3, #0
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002632:	4a14      	ldr	r2, [pc, #80]	; (8002684 <SEGGER_SYSVIEW_Init+0x68>)
 8002634:	4914      	ldr	r1, [pc, #80]	; (8002688 <SEGGER_SYSVIEW_Init+0x6c>)
 8002636:	2001      	movs	r0, #1
 8002638:	f7ff fc62 	bl	8001f00 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2308      	movs	r3, #8
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <SEGGER_SYSVIEW_Init+0x70>)
 8002644:	4910      	ldr	r1, [pc, #64]	; (8002688 <SEGGER_SYSVIEW_Init+0x6c>)
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff fcc4 	bl	8001fd4 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <SEGGER_SYSVIEW_Init+0x74>)
 800264e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002652:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <SEGGER_SYSVIEW_Init+0x78>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <SEGGER_SYSVIEW_Init+0x74>)
 800265a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <SEGGER_SYSVIEW_Init+0x74>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <SEGGER_SYSVIEW_Init+0x74>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002668:	4a09      	ldr	r2, [pc, #36]	; (8002690 <SEGGER_SYSVIEW_Init+0x74>)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <SEGGER_SYSVIEW_Init+0x74>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <SEGGER_SYSVIEW_Init+0x74>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000043c 	.word	0x2000043c
 8002688:	08006594 	.word	0x08006594
 800268c:	2000083c 	.word	0x2000083c
 8002690:	20000844 	.word	0x20000844
 8002694:	e0001004 	.word	0xe0001004

08002698 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6113      	str	r3, [r2, #16]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000844 	.word	0x20000844

080026b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80026c0:	f3ef 8311 	mrs	r3, BASEPRI
 80026c4:	f04f 0120 	mov.w	r1, #32
 80026c8:	f381 8811 	msr	BASEPRI, r1
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4808      	ldr	r0, [pc, #32]	; (80026f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80026d0:	f7ff fd37 	bl	8002142 <_PreparePacket>
 80026d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68b8      	ldr	r0, [r7, #8]
 80026dc:	f7ff fe0a 	bl	80022f4 <_SendPacket>
  RECORD_END();
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f383 8811 	msr	BASEPRI, r3
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000874 	.word	0x20000874

080026f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80026fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002702:	f04f 0120 	mov.w	r1, #32
 8002706:	f381 8811 	msr	BASEPRI, r1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800270e:	f7ff fd18 	bl	8002142 <_PreparePacket>
 8002712:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	e00b      	b.n	800273a <SEGGER_SYSVIEW_RecordU32+0x46>
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	1c59      	adds	r1, r3, #1
 800272a:	61f9      	str	r1, [r7, #28]
 800272c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	09db      	lsrs	r3, r3, #7
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b7f      	cmp	r3, #127	; 0x7f
 800273e:	d8f0      	bhi.n	8002722 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	61fa      	str	r2, [r7, #28]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	6938      	ldr	r0, [r7, #16]
 8002756:	f7ff fdcd 	bl	80022f4 <_SendPacket>
  RECORD_END();
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f383 8811 	msr	BASEPRI, r3
}
 8002760:	bf00      	nop
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000874 	.word	0x20000874

0800276c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002778:	f3ef 8311 	mrs	r3, BASEPRI
 800277c:	f04f 0120 	mov.w	r1, #32
 8002780:	f381 8811 	msr	BASEPRI, r1
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	4825      	ldr	r0, [pc, #148]	; (800281c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002788:	f7ff fcdb 	bl	8002142 <_PreparePacket>
 800278c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	e00b      	b.n	80027b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	1c59      	adds	r1, r3, #1
 80027a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	09db      	lsrs	r3, r3, #7
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2b7f      	cmp	r3, #127	; 0x7f
 80027b8:	d8f0      	bhi.n	800279c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	e00b      	b.n	80027ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	1c59      	adds	r1, r3, #1
 80027dc:	6279      	str	r1, [r7, #36]	; 0x24
 80027de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	09db      	lsrs	r3, r3, #7
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2b7f      	cmp	r3, #127	; 0x7f
 80027f0:	d8f0      	bhi.n	80027d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	627a      	str	r2, [r7, #36]	; 0x24
 80027f8:	6a3a      	ldr	r2, [r7, #32]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6979      	ldr	r1, [r7, #20]
 8002806:	69b8      	ldr	r0, [r7, #24]
 8002808:	f7ff fd74 	bl	80022f4 <_SendPacket>
  RECORD_END();
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f383 8811 	msr	BASEPRI, r3
}
 8002812:	bf00      	nop
 8002814:	3730      	adds	r7, #48	; 0x30
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000874 	.word	0x20000874

08002820 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	; 0x38
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800282e:	f3ef 8311 	mrs	r3, BASEPRI
 8002832:	f04f 0120 	mov.w	r1, #32
 8002836:	f381 8811 	msr	BASEPRI, r1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	4832      	ldr	r0, [pc, #200]	; (8002908 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800283e:	f7ff fc80 	bl	8002142 <_PreparePacket>
 8002842:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
 8002850:	e00b      	b.n	800286a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	b2da      	uxtb	r2, r3
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	1c59      	adds	r1, r3, #1
 800285a:	6379      	str	r1, [r7, #52]	; 0x34
 800285c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	09db      	lsrs	r3, r3, #7
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	2b7f      	cmp	r3, #127	; 0x7f
 800286e:	d8f0      	bhi.n	8002852 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	637a      	str	r2, [r7, #52]	; 0x34
 8002876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
 8002888:	e00b      	b.n	80028a2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	b2da      	uxtb	r2, r3
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	1c59      	adds	r1, r3, #1
 8002892:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	09db      	lsrs	r3, r3, #7
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2b7f      	cmp	r3, #127	; 0x7f
 80028a6:	d8f0      	bhi.n	800288a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	e00b      	b.n	80028da <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1c59      	adds	r1, r3, #1
 80028ca:	6279      	str	r1, [r7, #36]	; 0x24
 80028cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	09db      	lsrs	r3, r3, #7
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	2b7f      	cmp	r3, #127	; 0x7f
 80028de:	d8f0      	bhi.n	80028c2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	627a      	str	r2, [r7, #36]	; 0x24
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	69b8      	ldr	r0, [r7, #24]
 80028f6:	f7ff fcfd 	bl	80022f4 <_SendPacket>
  RECORD_END();
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f383 8811 	msr	BASEPRI, r3
}
 8002900:	bf00      	nop
 8002902:	3738      	adds	r7, #56	; 0x38
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000874 	.word	0x20000874

0800290c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b090      	sub	sp, #64	; 0x40
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800291a:	f3ef 8311 	mrs	r3, BASEPRI
 800291e:	f04f 0120 	mov.w	r1, #32
 8002922:	f381 8811 	msr	BASEPRI, r1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	4840      	ldr	r0, [pc, #256]	; (8002a2c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800292a:	f7ff fc0a 	bl	8002142 <_PreparePacket>
 800292e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
 800293c:	e00b      	b.n	8002956 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	b2da      	uxtb	r2, r3
 8002942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002944:	1c59      	adds	r1, r3, #1
 8002946:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	09db      	lsrs	r3, r3, #7
 8002954:	63bb      	str	r3, [r7, #56]	; 0x38
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	2b7f      	cmp	r3, #127	; 0x7f
 800295a:	d8f0      	bhi.n	800293e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
 8002974:	e00b      	b.n	800298e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	b2da      	uxtb	r2, r3
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	1c59      	adds	r1, r3, #1
 800297e:	6379      	str	r1, [r7, #52]	; 0x34
 8002980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	09db      	lsrs	r3, r3, #7
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	2b7f      	cmp	r3, #127	; 0x7f
 8002992:	d8f0      	bhi.n	8002976 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	637a      	str	r2, [r7, #52]	; 0x34
 800299a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ac:	e00b      	b.n	80029c6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	1c59      	adds	r1, r3, #1
 80029b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80029b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	09db      	lsrs	r3, r3, #7
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	2b7f      	cmp	r3, #127	; 0x7f
 80029ca:	d8f0      	bhi.n	80029ae <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	e00b      	b.n	80029fe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	6279      	str	r1, [r7, #36]	; 0x24
 80029f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	09db      	lsrs	r3, r3, #7
 80029fc:	623b      	str	r3, [r7, #32]
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2b7f      	cmp	r3, #127	; 0x7f
 8002a02:	d8f0      	bhi.n	80029e6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	627a      	str	r2, [r7, #36]	; 0x24
 8002a0a:	6a3a      	ldr	r2, [r7, #32]
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	6979      	ldr	r1, [r7, #20]
 8002a18:	69b8      	ldr	r0, [r7, #24]
 8002a1a:	f7ff fc6b 	bl	80022f4 <_SendPacket>
  RECORD_END();
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f383 8811 	msr	BASEPRI, r3
}
 8002a24:	bf00      	nop
 8002a26:	3740      	adds	r7, #64	; 0x40
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000874 	.word	0x20000874

08002a30 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002a36:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 80aa 	bne.w	8002b94 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002a40:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002a46:	f3ef 8311 	mrs	r3, BASEPRI
 8002a4a:	f04f 0120 	mov.w	r1, #32
 8002a4e:	f381 8811 	msr	BASEPRI, r1
 8002a52:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002a54:	220a      	movs	r2, #10
 8002a56:	4952      	ldr	r1, [pc, #328]	; (8002ba0 <SEGGER_SYSVIEW_Start+0x170>)
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f7ff f9c1 	bl	8001de0 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002a64:	200a      	movs	r0, #10
 8002a66:	f7ff fe27 	bl	80026b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a6e:	f04f 0120 	mov.w	r1, #32
 8002a72:	f381 8811 	msr	BASEPRI, r1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	484a      	ldr	r0, [pc, #296]	; (8002ba4 <SEGGER_SYSVIEW_Start+0x174>)
 8002a7a:	f7ff fb62 	bl	8002142 <_PreparePacket>
 8002a7e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	4b44      	ldr	r3, [pc, #272]	; (8002b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8e:	e00b      	b.n	8002aa8 <SEGGER_SYSVIEW_Start+0x78>
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	09db      	lsrs	r3, r3, #7
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8002aac:	d8f0      	bhi.n	8002a90 <SEGGER_SYSVIEW_Start+0x60>
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	e00b      	b.n	8002ae2 <SEGGER_SYSVIEW_Start+0xb2>
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1c59      	adds	r1, r3, #1
 8002ad2:	6279      	str	r1, [r7, #36]	; 0x24
 8002ad4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	09db      	lsrs	r3, r3, #7
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ae6:	d8f0      	bhi.n	8002aca <SEGGER_SYSVIEW_Start+0x9a>
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	627a      	str	r2, [r7, #36]	; 0x24
 8002aee:	6a3a      	ldr	r2, [r7, #32]
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	e00b      	b.n	8002b1c <SEGGER_SYSVIEW_Start+0xec>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	61f9      	str	r1, [r7, #28]
 8002b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	09db      	lsrs	r3, r3, #7
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b20:	d8f0      	bhi.n	8002b04 <SEGGER_SYSVIEW_Start+0xd4>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	61fa      	str	r2, [r7, #28]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	2302      	movs	r3, #2
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	e00b      	b.n	8002b54 <SEGGER_SYSVIEW_Start+0x124>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	6179      	str	r1, [r7, #20]
 8002b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	09db      	lsrs	r3, r3, #7
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b7f      	cmp	r3, #127	; 0x7f
 8002b58:	d8f0      	bhi.n	8002b3c <SEGGER_SYSVIEW_Start+0x10c>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	617a      	str	r2, [r7, #20]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002b6a:	2218      	movs	r2, #24
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fbc0 	bl	80022f4 <_SendPacket>
      RECORD_END();
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002b88:	f000 f9ec 	bl	8002f64 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002b8c:	f000 f9b2 	bl	8002ef4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002b90:	f000 fbb0 	bl	80032f4 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000844 	.word	0x20000844
 8002ba0:	080066f8 	.word	0x080066f8
 8002ba4:	20000874 	.word	0x20000874

08002ba8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002bae:	f3ef 8311 	mrs	r3, BASEPRI
 8002bb2:	f04f 0120 	mov.w	r1, #32
 8002bb6:	f381 8811 	msr	BASEPRI, r1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	480b      	ldr	r0, [pc, #44]	; (8002bec <SEGGER_SYSVIEW_Stop+0x44>)
 8002bbe:	f7ff fac0 	bl	8002142 <_PreparePacket>
 8002bc2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <SEGGER_SYSVIEW_Stop+0x48>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002bcc:	220b      	movs	r2, #11
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f7ff fb8f 	bl	80022f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <SEGGER_SYSVIEW_Stop+0x48>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f383 8811 	msr	BASEPRI, r3
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000874 	.word	0x20000874
 8002bf0:	20000844 	.word	0x20000844

08002bf4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8002bfe:	f04f 0120 	mov.w	r1, #32
 8002c02:	f381 8811 	msr	BASEPRI, r1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4845      	ldr	r0, [pc, #276]	; (8002d20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002c0a:	f7ff fa9a 	bl	8002142 <_PreparePacket>
 8002c0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c18:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1e:	e00b      	b.n	8002c38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	1c59      	adds	r1, r3, #1
 8002c28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	09db      	lsrs	r3, r3, #7
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c3c:	d8f0      	bhi.n	8002c20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	e00b      	b.n	8002c72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	6279      	str	r1, [r7, #36]	; 0x24
 8002c64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	09db      	lsrs	r3, r3, #7
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2b7f      	cmp	r3, #127	; 0x7f
 8002c76:	d8f0      	bhi.n	8002c5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e00b      	b.n	8002cac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	1c59      	adds	r1, r3, #1
 8002c9c:	61f9      	str	r1, [r7, #28]
 8002c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	09db      	lsrs	r3, r3, #7
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb0:	d8f0      	bhi.n	8002c94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	61fa      	str	r2, [r7, #28]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e00b      	b.n	8002ce4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1c59      	adds	r1, r3, #1
 8002cd4:	6179      	str	r1, [r7, #20]
 8002cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	09db      	lsrs	r3, r3, #7
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce8:	d8f0      	bhi.n	8002ccc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	617a      	str	r2, [r7, #20]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002cfa:	2218      	movs	r2, #24
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f7ff faf8 	bl	80022f4 <_SendPacket>
  RECORD_END();
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	4798      	blx	r3
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3730      	adds	r7, #48	; 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000874 	.word	0x20000874
 8002d24:	20000844 	.word	0x20000844

08002d28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b092      	sub	sp, #72	; 0x48
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002d30:	f3ef 8311 	mrs	r3, BASEPRI
 8002d34:	f04f 0120 	mov.w	r1, #32
 8002d38:	f381 8811 	msr	BASEPRI, r1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	486b      	ldr	r0, [pc, #428]	; (8002eec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002d40:	f7ff f9ff 	bl	8002142 <_PreparePacket>
 8002d44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5c:	e00b      	b.n	8002d76 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d64:	1c59      	adds	r1, r3, #1
 8002d66:	6479      	str	r1, [r7, #68]	; 0x44
 8002d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d72:	09db      	lsrs	r3, r3, #7
 8002d74:	643b      	str	r3, [r7, #64]	; 0x40
 8002d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d78:	2b7f      	cmp	r3, #127	; 0x7f
 8002d7a:	d8f0      	bhi.n	8002d5e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	647a      	str	r2, [r7, #68]	; 0x44
 8002d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d96:	e00b      	b.n	8002db0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9e:	1c59      	adds	r1, r3, #1
 8002da0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	09db      	lsrs	r3, r3, #7
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	2b7f      	cmp	r3, #127	; 0x7f
 8002db4:	d8f0      	bhi.n	8002d98 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4619      	mov	r1, r3
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff f96a 	bl	80020a8 <_EncodeStr>
 8002dd4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002dd6:	2209      	movs	r2, #9
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	6938      	ldr	r0, [r7, #16]
 8002ddc:	f7ff fa8a 	bl	80022f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
 8002df6:	e00b      	b.n	8002e10 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	1c59      	adds	r1, r3, #1
 8002e00:	6379      	str	r1, [r7, #52]	; 0x34
 8002e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	09db      	lsrs	r3, r3, #7
 8002e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	2b7f      	cmp	r3, #127	; 0x7f
 8002e14:	d8f0      	bhi.n	8002df8 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	637a      	str	r2, [r7, #52]	; 0x34
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e30:	e00b      	b.n	8002e4a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	1c59      	adds	r1, r3, #1
 8002e3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	09db      	lsrs	r3, r3, #7
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e4e:	d8f0      	bhi.n	8002e32 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	623b      	str	r3, [r7, #32]
 8002e6a:	e00b      	b.n	8002e84 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	1c59      	adds	r1, r3, #1
 8002e74:	6279      	str	r1, [r7, #36]	; 0x24
 8002e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	09db      	lsrs	r3, r3, #7
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2b7f      	cmp	r3, #127	; 0x7f
 8002e88:	d8f0      	bhi.n	8002e6c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e00b      	b.n	8002ebc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	61f9      	str	r1, [r7, #28]
 8002eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	09db      	lsrs	r3, r3, #7
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec0:	d8f0      	bhi.n	8002ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	61fa      	str	r2, [r7, #28]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002ed2:	2215      	movs	r2, #21
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	6938      	ldr	r0, [r7, #16]
 8002ed8:	f7ff fa0c 	bl	80022f4 <_SendPacket>
  RECORD_END();
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f383 8811 	msr	BASEPRI, r3
}
 8002ee2:	bf00      	nop
 8002ee4:	3748      	adds	r7, #72	; 0x48
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000874 	.word	0x20000874
 8002ef0:	20000844 	.word	0x20000844

08002ef4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002f0a:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4798      	blx	r3
  }
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000844 	.word	0x20000844

08002f1c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f24:	f3ef 8311 	mrs	r3, BASEPRI
 8002f28:	f04f 0120 	mov.w	r1, #32
 8002f2c:	f381 8811 	msr	BASEPRI, r1
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	480b      	ldr	r0, [pc, #44]	; (8002f60 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002f34:	f7ff f905 	bl	8002142 <_PreparePacket>
 8002f38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	6938      	ldr	r0, [r7, #16]
 8002f40:	f7ff f8b2 	bl	80020a8 <_EncodeStr>
 8002f44:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002f46:	220e      	movs	r2, #14
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	6938      	ldr	r0, [r7, #16]
 8002f4c:	f7ff f9d2 	bl	80022f4 <_SendPacket>
  RECORD_END();
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f383 8811 	msr	BASEPRI, r3
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000874 	.word	0x20000874

08002f64 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d019      	beq.n	8002fa6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d014      	beq.n	8002fa6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4798      	blx	r3
 8002f84:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f88:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002f8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f04f 0400 	mov.w	r4, #0
 8002f96:	0013      	movs	r3, r2
 8002f98:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	200d      	movs	r0, #13
 8002fa0:	f7ff fbe4 	bl	800276c <SEGGER_SYSVIEW_RecordU32x2>
 8002fa4:	e005      	b.n	8002fb2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	200c      	movs	r0, #12
 8002fae:	f7ff fba1 	bl	80026f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000844 	.word	0x20000844
 8002fc0:	e0001004 	.word	0xe0001004

08002fc4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002fca:	f3ef 8311 	mrs	r3, BASEPRI
 8002fce:	f04f 0120 	mov.w	r1, #32
 8002fd2:	f381 8811 	msr	BASEPRI, r1
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	4807      	ldr	r0, [pc, #28]	; (8002ff8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002fda:	f7ff f8b2 	bl	8002142 <_PreparePacket>
 8002fde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002fe0:	2211      	movs	r2, #17
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	6838      	ldr	r0, [r7, #0]
 8002fe6:	f7ff f985 	bl	80022f4 <_SendPacket>
  RECORD_END();
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f383 8811 	msr	BASEPRI, r3
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000874 	.word	0x20000874

08002ffc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003004:	f3ef 8311 	mrs	r3, BASEPRI
 8003008:	f04f 0120 	mov.w	r1, #32
 800300c:	f381 8811 	msr	BASEPRI, r1
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	481a      	ldr	r0, [pc, #104]	; (800307c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003014:	f7ff f895 	bl	8002142 <_PreparePacket>
 8003018:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e00b      	b.n	800304c <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	1c59      	adds	r1, r3, #1
 800303c:	61f9      	str	r1, [r7, #28]
 800303e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	09db      	lsrs	r3, r3, #7
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b7f      	cmp	r3, #127	; 0x7f
 8003050:	d8f0      	bhi.n	8003034 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	61fa      	str	r2, [r7, #28]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003062:	2208      	movs	r2, #8
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	6938      	ldr	r0, [r7, #16]
 8003068:	f7ff f944 	bl	80022f4 <_SendPacket>
  RECORD_END();
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f383 8811 	msr	BASEPRI, r3
}
 8003072:	bf00      	nop
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000874 	.word	0x20000874
 8003080:	20000844 	.word	0x20000844

08003084 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800308c:	f3ef 8311 	mrs	r3, BASEPRI
 8003090:	f04f 0120 	mov.w	r1, #32
 8003094:	f381 8811 	msr	BASEPRI, r1
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	481a      	ldr	r0, [pc, #104]	; (8003104 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800309c:	f7ff f851 	bl	8002142 <_PreparePacket>
 80030a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e00b      	b.n	80030d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	1c59      	adds	r1, r3, #1
 80030c4:	61f9      	str	r1, [r7, #28]
 80030c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	09db      	lsrs	r3, r3, #7
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b7f      	cmp	r3, #127	; 0x7f
 80030d8:	d8f0      	bhi.n	80030bc <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	61fa      	str	r2, [r7, #28]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80030ea:	2204      	movs	r2, #4
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	6938      	ldr	r0, [r7, #16]
 80030f0:	f7ff f900 	bl	80022f4 <_SendPacket>
  RECORD_END();
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f383 8811 	msr	BASEPRI, r3
}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000874 	.word	0x20000874
 8003108:	20000844 	.word	0x20000844

0800310c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003114:	f3ef 8311 	mrs	r3, BASEPRI
 8003118:	f04f 0120 	mov.w	r1, #32
 800311c:	f381 8811 	msr	BASEPRI, r1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	481a      	ldr	r0, [pc, #104]	; (800318c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003124:	f7ff f80d 	bl	8002142 <_PreparePacket>
 8003128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e00b      	b.n	800315c <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	61f9      	str	r1, [r7, #28]
 800314e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	09db      	lsrs	r3, r3, #7
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b7f      	cmp	r3, #127	; 0x7f
 8003160:	d8f0      	bhi.n	8003144 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	61fa      	str	r2, [r7, #28]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003172:	2206      	movs	r2, #6
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	6938      	ldr	r0, [r7, #16]
 8003178:	f7ff f8bc 	bl	80022f4 <_SendPacket>
  RECORD_END();
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f383 8811 	msr	BASEPRI, r3
}
 8003182:	bf00      	nop
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000874 	.word	0x20000874
 8003190:	20000844 	.word	0x20000844

08003194 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	089b      	lsrs	r3, r3, #2
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000844 	.word	0x20000844

080031b8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80031c2:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d06d      	beq.n	80032a6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80031ca:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d4:	e008      	b.n	80031e8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	3301      	adds	r3, #1
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d3f2      	bcc.n	80031d6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80031f0:	e000      	b.n	80031f4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80031f2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d055      	beq.n	80032a6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031fa:	f3ef 8311 	mrs	r3, BASEPRI
 80031fe:	f04f 0120 	mov.w	r1, #32
 8003202:	f381 8811 	msr	BASEPRI, r1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	482a      	ldr	r0, [pc, #168]	; (80032b4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800320a:	f7fe ff9a 	bl	8002142 <_PreparePacket>
 800320e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	e00b      	b.n	8003236 <SEGGER_SYSVIEW_SendModule+0x7e>
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	1c59      	adds	r1, r3, #1
 8003226:	6279      	str	r1, [r7, #36]	; 0x24
 8003228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	09db      	lsrs	r3, r3, #7
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	2b7f      	cmp	r3, #127	; 0x7f
 800323a:	d8f0      	bhi.n	800321e <SEGGER_SYSVIEW_SendModule+0x66>
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	627a      	str	r2, [r7, #36]	; 0x24
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e00b      	b.n	8003270 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	61f9      	str	r1, [r7, #28]
 8003262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	09db      	lsrs	r3, r3, #7
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b7f      	cmp	r3, #127	; 0x7f
 8003274:	d8f0      	bhi.n	8003258 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	61fa      	str	r2, [r7, #28]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	4619      	mov	r1, r3
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7fe ff0a 	bl	80020a8 <_EncodeStr>
 8003294:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003296:	2216      	movs	r2, #22
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	6938      	ldr	r0, [r7, #16]
 800329c:	f7ff f82a 	bl	80022f4 <_SendPacket>
      RECORD_END();
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80032a6:	bf00      	nop
 80032a8:	3730      	adds	r7, #48	; 0x30
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	2000086c 	.word	0x2000086c
 80032b4:	20000874 	.word	0x20000874

080032b8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00f      	beq.n	80032e6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f2      	bne.n	80032cc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2000086c 	.word	0x2000086c

080032f4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80032fa:	f3ef 8311 	mrs	r3, BASEPRI
 80032fe:	f04f 0120 	mov.w	r1, #32
 8003302:	f381 8811 	msr	BASEPRI, r1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	4817      	ldr	r0, [pc, #92]	; (8003368 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800330a:	f7fe ff1a 	bl	8002142 <_PreparePacket>
 800330e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e00b      	b.n	8003338 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	1c59      	adds	r1, r3, #1
 8003328:	6179      	str	r1, [r7, #20]
 800332a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	09db      	lsrs	r3, r3, #7
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b7f      	cmp	r3, #127	; 0x7f
 800333c:	d8f0      	bhi.n	8003320 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	617a      	str	r2, [r7, #20]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800334e:	221b      	movs	r2, #27
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f7fe ffce 	bl	80022f4 <_SendPacket>
  RECORD_END();
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f383 8811 	msr	BASEPRI, r3
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000874 	.word	0x20000874
 800336c:	20000870 	.word	0x20000870

08003370 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8003370:	b40f      	push	{r0, r1, r2, r3}
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	461a      	mov	r2, r3
 8003382:	2100      	movs	r1, #0
 8003384:	6938      	ldr	r0, [r7, #16]
 8003386:	f7ff f889 	bl	800249c <_VPrintHost>
  va_end(ParamList);
#endif
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003394:	b004      	add	sp, #16
 8003396:	4770      	bx	lr

08003398 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80033a0:	f3ef 8311 	mrs	r3, BASEPRI
 80033a4:	f04f 0120 	mov.w	r1, #32
 80033a8:	f381 8811 	msr	BASEPRI, r1
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	4827      	ldr	r0, [pc, #156]	; (800344c <SEGGER_SYSVIEW_Warn+0xb4>)
 80033b0:	f7fe fec7 	bl	8002142 <_PreparePacket>
 80033b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6938      	ldr	r0, [r7, #16]
 80033bc:	f7fe fe74 	bl	80020a8 <_EncodeStr>
 80033c0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	2301      	movs	r3, #1
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	e00b      	b.n	80033e4 <SEGGER_SYSVIEW_Warn+0x4c>
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	6279      	str	r1, [r7, #36]	; 0x24
 80033d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	09db      	lsrs	r3, r3, #7
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b7f      	cmp	r3, #127	; 0x7f
 80033e8:	d8f0      	bhi.n	80033cc <SEGGER_SYSVIEW_Warn+0x34>
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	627a      	str	r2, [r7, #36]	; 0x24
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e00b      	b.n	800341c <SEGGER_SYSVIEW_Warn+0x84>
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	61f9      	str	r1, [r7, #28]
 800340e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	09db      	lsrs	r3, r3, #7
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b7f      	cmp	r3, #127	; 0x7f
 8003420:	d8f0      	bhi.n	8003404 <SEGGER_SYSVIEW_Warn+0x6c>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	61fa      	str	r2, [r7, #28]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003432:	221a      	movs	r2, #26
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	6938      	ldr	r0, [r7, #16]
 8003438:	f7fe ff5c 	bl	80022f4 <_SendPacket>
  RECORD_END();
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f383 8811 	msr	BASEPRI, r3
}
 8003442:	bf00      	nop
 8003444:	3728      	adds	r7, #40	; 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000874 	.word	0x20000874

08003450 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003454:	4803      	ldr	r0, [pc, #12]	; (8003464 <_cbSendSystemDesc+0x14>)
 8003456:	f7ff fd61 	bl	8002f1c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800345a:	4803      	ldr	r0, [pc, #12]	; (8003468 <_cbSendSystemDesc+0x18>)
 800345c:	f7ff fd5e 	bl	8002f1c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	0800659c 	.word	0x0800659c
 8003468:	080065d0 	.word	0x080065d0

0800346c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <SEGGER_SYSVIEW_Conf+0x20>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <SEGGER_SYSVIEW_Conf+0x20>)
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <SEGGER_SYSVIEW_Conf+0x24>)
 800347a:	4a06      	ldr	r2, [pc, #24]	; (8003494 <SEGGER_SYSVIEW_Conf+0x28>)
 800347c:	f7ff f8ce 	bl	800261c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003480:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003484:	f7ff f908 	bl	8002698 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000000 	.word	0x20000000
 8003490:	08003451 	.word	0x08003451
 8003494:	08006704 	.word	0x08006704

08003498 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349a:	b085      	sub	sp, #20
 800349c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e048      	b.n	8003536 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80034a4:	4928      	ldr	r1, [pc, #160]	; (8003548 <_cbSendTaskList+0xb0>)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fed7 	bl	8005268 <uxTaskGetStackHighWaterMark>
 80034ba:	4923      	ldr	r1, [pc, #140]	; (8003548 <_cbSendTaskList+0xb0>)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3310      	adds	r3, #16
 80034ca:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80034cc:	491e      	ldr	r1, [pc, #120]	; (8003548 <_cbSendTaskList+0xb0>)
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	491a      	ldr	r1, [pc, #104]	; (8003548 <_cbSendTaskList+0xb0>)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3304      	adds	r3, #4
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	4916      	ldr	r1, [pc, #88]	; (8003548 <_cbSendTaskList+0xb0>)
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3308      	adds	r3, #8
 80034fe:	681d      	ldr	r5, [r3, #0]
 8003500:	4911      	ldr	r1, [pc, #68]	; (8003548 <_cbSendTaskList+0xb0>)
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	330c      	adds	r3, #12
 8003510:	681e      	ldr	r6, [r3, #0]
 8003512:	490d      	ldr	r1, [pc, #52]	; (8003548 <_cbSendTaskList+0xb0>)
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3310      	adds	r3, #16
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	4633      	mov	r3, r6
 8003528:	462a      	mov	r2, r5
 800352a:	4621      	mov	r1, r4
 800352c:	f000 f8b4 	bl	8003698 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3301      	adds	r3, #1
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <_cbSendTaskList+0xb4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d3b1      	bcc.n	80034a4 <_cbSendTaskList+0xc>
  }
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003548:	20000958 	.word	0x20000958
 800354c:	200009f8 	.word	0x200009f8

08003550 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003556:	f001 fb6f 	bl	8004c38 <xTaskGetTickCountFromISR>
 800355a:	4603      	mov	r3, r0
 800355c:	f04f 0400 	mov.w	r4, #0
 8003560:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003564:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003568:	462b      	mov	r3, r5
 800356a:	4634      	mov	r4, r6
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	0162      	lsls	r2, r4, #5
 8003576:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800357a:	0159      	lsls	r1, r3, #5
 800357c:	460b      	mov	r3, r1
 800357e:	4614      	mov	r4, r2
 8003580:	1b5b      	subs	r3, r3, r5
 8003582:	eb64 0406 	sbc.w	r4, r4, r6
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	00a2      	lsls	r2, r4, #2
 8003590:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003594:	0099      	lsls	r1, r3, #2
 8003596:	460b      	mov	r3, r1
 8003598:	4614      	mov	r4, r2
 800359a:	195b      	adds	r3, r3, r5
 800359c:	eb44 0406 	adc.w	r4, r4, r6
 80035a0:	f04f 0100 	mov.w	r1, #0
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	00e2      	lsls	r2, r4, #3
 80035aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035ae:	00d9      	lsls	r1, r3, #3
 80035b0:	460b      	mov	r3, r1
 80035b2:	4614      	mov	r4, r2
 80035b4:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80035b8:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	4621      	mov	r1, r4
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80035d6:	2205      	movs	r2, #5
 80035d8:	492b      	ldr	r1, [pc, #172]	; (8003688 <SYSVIEW_AddTask+0xc0>)
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	f002 ff58 	bl	8006490 <memcmp>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d04b      	beq.n	800367e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <SYSVIEW_AddTask+0xc4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b07      	cmp	r3, #7
 80035ec:	d903      	bls.n	80035f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80035ee:	4828      	ldr	r0, [pc, #160]	; (8003690 <SYSVIEW_AddTask+0xc8>)
 80035f0:	f7ff fed2 	bl	8003398 <SEGGER_SYSVIEW_Warn>
    return;
 80035f4:	e044      	b.n	8003680 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80035f6:	4b25      	ldr	r3, [pc, #148]	; (800368c <SYSVIEW_AddTask+0xc4>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4926      	ldr	r1, [pc, #152]	; (8003694 <SYSVIEW_AddTask+0xcc>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <SYSVIEW_AddTask+0xc4>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4921      	ldr	r1, [pc, #132]	; (8003694 <SYSVIEW_AddTask+0xcc>)
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3304      	adds	r3, #4
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <SYSVIEW_AddTask+0xc4>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	491b      	ldr	r1, [pc, #108]	; (8003694 <SYSVIEW_AddTask+0xcc>)
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3308      	adds	r3, #8
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <SYSVIEW_AddTask+0xc4>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4916      	ldr	r1, [pc, #88]	; (8003694 <SYSVIEW_AddTask+0xcc>)
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	330c      	adds	r3, #12
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <SYSVIEW_AddTask+0xc4>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4910      	ldr	r1, [pc, #64]	; (8003694 <SYSVIEW_AddTask+0xcc>)
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3310      	adds	r3, #16
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <SYSVIEW_AddTask+0xc4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a08      	ldr	r2, [pc, #32]	; (800368c <SYSVIEW_AddTask+0xc4>)
 800366a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f80e 	bl	8003698 <SYSVIEW_SendTaskInfo>
 800367c:	e000      	b.n	8003680 <SYSVIEW_AddTask+0xb8>
    return;
 800367e:	bf00      	nop

}
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	080065e0 	.word	0x080065e0
 800368c:	200009f8 	.word	0x200009f8
 8003690:	080065e8 	.word	0x080065e8
 8003694:	20000958 	.word	0x20000958

08003698 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	2214      	movs	r2, #20
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 ff08 	bl	80064c4 <memset>
  TaskInfo.TaskID     = TaskID;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fb2b 	bl	8002d28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80036d2:	bf00      	nop
 80036d4:	3728      	adds	r7, #40	; 0x28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ee:	f3ef 8305 	mrs	r3, IPSR
 80036f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80036f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fa:	f3ef 8310 	mrs	r3, PRIMASK
 80036fe:	607b      	str	r3, [r7, #4]
  return(result);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003706:	f3ef 8311 	mrs	r3, BASEPRI
 800370a:	603b      	str	r3, [r7, #0]
  return(result);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <osKernelInitialize+0x3a>
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <osKernelInitialize+0x64>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d103      	bne.n	8003722 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800371a:	f06f 0305 	mvn.w	r3, #5
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e00c      	b.n	800373c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <osKernelInitialize+0x64>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <osKernelInitialize+0x64>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	e002      	b.n	800373c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800373c:	68fb      	ldr	r3, [r7, #12]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	200009fc 	.word	0x200009fc

08003750 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003756:	f3ef 8305 	mrs	r3, IPSR
 800375a:	60bb      	str	r3, [r7, #8]
  return(result);
 800375c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003762:	f3ef 8310 	mrs	r3, PRIMASK
 8003766:	607b      	str	r3, [r7, #4]
  return(result);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800376e:	f3ef 8311 	mrs	r3, BASEPRI
 8003772:	603b      	str	r3, [r7, #0]
  return(result);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <osKernelStart+0x3a>
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <osKernelStart+0x68>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d103      	bne.n	800378a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003782:	f06f 0305 	mvn.w	r3, #5
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e010      	b.n	80037ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <osKernelStart+0x68>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d109      	bne.n	80037a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003792:	f7ff ffa2 	bl	80036da <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <osKernelStart+0x68>)
 8003798:	2202      	movs	r2, #2
 800379a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800379c:	f001 f914 	bl	80049c8 <vTaskStartScheduler>
      stat = osOK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e002      	b.n	80037ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80037ac:	68fb      	ldr	r3, [r7, #12]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200009fc 	.word	0x200009fc

080037bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b090      	sub	sp, #64	; 0x40
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037cc:	f3ef 8305 	mrs	r3, IPSR
 80037d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80037d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f040 808f 	bne.w	80038f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037da:	f3ef 8310 	mrs	r3, PRIMASK
 80037de:	61bb      	str	r3, [r7, #24]
  return(result);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037e6:	f3ef 8311 	mrs	r3, BASEPRI
 80037ea:	617b      	str	r3, [r7, #20]
  return(result);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <osThreadNew+0x3e>
 80037f2:	4b44      	ldr	r3, [pc, #272]	; (8003904 <osThreadNew+0x148>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d07e      	beq.n	80038f8 <osThreadNew+0x13c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d07b      	beq.n	80038f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003804:	2318      	movs	r3, #24
 8003806:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d045      	beq.n	80038a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <osThreadNew+0x6a>
        name = attr->name;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <osThreadNew+0x90>
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	2b38      	cmp	r3, #56	; 0x38
 800383e:	d805      	bhi.n	800384c <osThreadNew+0x90>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <osThreadNew+0x94>
        return (NULL);
 800384c:	2300      	movs	r3, #0
 800384e:	e054      	b.n	80038fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <osThreadNew+0xca>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b5b      	cmp	r3, #91	; 0x5b
 800386e:	d90a      	bls.n	8003886 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003874:	2b00      	cmp	r3, #0
 8003876:	d006      	beq.n	8003886 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <osThreadNew+0xca>
        mem = 1;
 8003880:	2301      	movs	r3, #1
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	e010      	b.n	80038a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <osThreadNew+0xec>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <osThreadNew+0xec>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <osThreadNew+0xec>
          mem = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	e001      	b.n	80038a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d110      	bne.n	80038d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fe8b 	bl	80045e0 <xTaskCreateStatic>
 80038ca:	4603      	mov	r3, r0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e013      	b.n	80038f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d110      	bne.n	80038f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	b29a      	uxth	r2, r3
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fed3 	bl	8004694 <xTaskCreate>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <osThreadNew+0x13c>
          hTask = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038f8:	693b      	ldr	r3, [r7, #16]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3730      	adds	r7, #48	; 0x30
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200009fc 	.word	0x200009fc

08003908 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003910:	f3ef 8305 	mrs	r3, IPSR
 8003914:	613b      	str	r3, [r7, #16]
  return(result);
 8003916:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391c:	f3ef 8310 	mrs	r3, PRIMASK
 8003920:	60fb      	str	r3, [r7, #12]
  return(result);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003928:	f3ef 8311 	mrs	r3, BASEPRI
 800392c:	60bb      	str	r3, [r7, #8]
  return(result);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <osDelay+0x3c>
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <osDelay+0x58>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d103      	bne.n	8003944 <osDelay+0x3c>
    stat = osErrorISR;
 800393c:	f06f 0305 	mvn.w	r3, #5
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e007      	b.n	8003954 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <osDelay+0x4c>
      vTaskDelay(ticks);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f001 f802 	bl	8004958 <vTaskDelay>
    }
  }

  return (stat);
 8003954:	697b      	ldr	r3, [r7, #20]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200009fc 	.word	0x200009fc

08003964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a07      	ldr	r2, [pc, #28]	; (8003990 <vApplicationGetIdleTaskMemory+0x2c>)
 8003974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4a06      	ldr	r2, [pc, #24]	; (8003994 <vApplicationGetIdleTaskMemory+0x30>)
 800397a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	601a      	str	r2, [r3, #0]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000a00 	.word	0x20000a00
 8003994:	20000a5c 	.word	0x20000a5c

08003998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80039a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4a06      	ldr	r2, [pc, #24]	; (80039c8 <vApplicationGetTimerTaskMemory+0x30>)
 80039ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b6:	601a      	str	r2, [r3, #0]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20000c5c 	.word	0x20000c5c
 80039c8:	20000cb8 	.word	0x20000cb8

080039cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f103 0208 	add.w	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f103 0208 	add.w	r2, r3, #8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f103 0208 	add.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d103      	bne.n	8003a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e00c      	b.n	8003aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3308      	adds	r3, #8
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e002      	b.n	8003a9c <vListInsert+0x2e>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d2f6      	bcs.n	8003a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6852      	ldr	r2, [r2, #4]
 8003b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d103      	bne.n	8003b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	e7fe      	b.n	8003b5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003b5c:	f002 f93e 	bl	8005ddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	441a      	add	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	22ff      	movs	r2, #255	; 0xff
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	22ff      	movs	r2, #255	; 0xff
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d114      	bne.n	8003bdc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3310      	adds	r3, #16
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f9ca 	bl	8004f58 <xTaskRemoveFromEventList>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <xQueueGenericReset+0xcc>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	e009      	b.n	8003bf0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3310      	adds	r3, #16
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fef3 	bl	80039cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3324      	adds	r3, #36	; 0x24
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff feee 	bl	80039cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bf0:	f002 f922 	bl	8005e38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	; 0x38
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <xQueueGenericCreateStatic+0x28>
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2a:	e7fe      	b.n	8003c2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <xQueueGenericCreateStatic+0x42>
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	e7fe      	b.n	8003c44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <xQueueGenericCreateStatic+0x4e>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <xQueueGenericCreateStatic+0x52>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <xQueueGenericCreateStatic+0x54>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <xQueueGenericCreateStatic+0x6c>
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <xQueueGenericCreateStatic+0x78>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <xQueueGenericCreateStatic+0x7c>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <xQueueGenericCreateStatic+0x7e>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <xQueueGenericCreateStatic+0x96>
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e7fe      	b.n	8003c98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c9a:	2350      	movs	r3, #80	; 0x50
 8003c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b50      	cmp	r3, #80	; 0x50
 8003ca2:	d009      	beq.n	8003cb8 <xQueueGenericCreateStatic+0xb4>
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e7fe      	b.n	8003cb6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ccc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f805 	bl	8003cea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3730      	adds	r7, #48	; 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d18:	2101      	movs	r1, #1
 8003d1a:	69b8      	ldr	r0, [r7, #24]
 8003d1c:	f7ff ff0a 	bl	8003b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	68f9      	ldr	r1, [r7, #12]
 8003d2e:	2073      	movs	r0, #115	; 0x73
 8003d30:	f7fe fd76 	bl	8002820 <SEGGER_SYSVIEW_RecordU32x3>
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b090      	sub	sp, #64	; 0x40
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <xQueueGenericSend+0x30>
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6a:	e7fe      	b.n	8003d6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <xQueueGenericSend+0x3e>
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <xQueueGenericSend+0x42>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericSend+0x44>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <xQueueGenericSend+0x5c>
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	e7fe      	b.n	8003d96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSend+0x6a>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <xQueueGenericSend+0x6e>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueGenericSend+0x70>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <xQueueGenericSend+0x88>
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	e7fe      	b.n	8003dc2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc4:	f001 faba 	bl	800533c <xTaskGetSchedulerState>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <xQueueGenericSend+0x98>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <xQueueGenericSend+0x9c>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <xQueueGenericSend+0x9e>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <xQueueGenericSend+0xb6>
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	e7fe      	b.n	8003df0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003df2:	f001 fff3 	bl	8005ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <xQueueGenericSend+0xcc>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d136      	bne.n	8003e76 <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff f9c2 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	205a      	movs	r0, #90	; 0x5a
 8003e1e:	f7fe fd75 	bl	800290c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e28:	f000 fa66 	bl	80042f8 <prvCopyDataToQueue>
 8003e2c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	3324      	adds	r3, #36	; 0x24
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f88c 	bl	8004f58 <xTaskRemoveFromEventList>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d013      	beq.n	8003e6e <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e46:	4b4d      	ldr	r3, [pc, #308]	; (8003f7c <xQueueGenericSend+0x240>)
 8003e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	e00a      	b.n	8003e6e <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <xQueueGenericSend+0x240>)
 8003e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e6e:	f001 ffe3 	bl	8005e38 <vPortExitCritical>
				return pdPASS;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e07d      	b.n	8003f72 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d110      	bne.n	8003e9e <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e7c:	f001 ffdc 	bl	8005e38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff f986 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	460b      	mov	r3, r1
 8003e92:	4601      	mov	r1, r0
 8003e94:	205a      	movs	r0, #90	; 0x5a
 8003e96:	f7fe fd39 	bl	800290c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e069      	b.n	8003f72 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 f8bb 	bl	8005024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eb2:	f001 ffc1 	bl	8005e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eb6:	f000 fe01 	bl	8004abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eba:	f001 ff8f 	bl	8005ddc <vPortEnterCritical>
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d103      	bne.n	8003ed4 <xQueueGenericSend+0x198>
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d103      	bne.n	8003eea <xQueueGenericSend+0x1ae>
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eea:	f001 ffa5 	bl	8005e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eee:	1d3a      	adds	r2, r7, #4
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f8aa 	bl	8005050 <xTaskCheckForTimeOut>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d124      	bne.n	8003f4c <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f04:	f000 faf0 	bl	80044e8 <prvIsQueueFull>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d018      	beq.n	8003f40 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	3310      	adds	r3, #16
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 ffcc 	bl	8004eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f1e:	f000 fa7b 	bl	8004418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f22:	f000 fdd9 	bl	8004ad8 <xTaskResumeAll>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f47f af62 	bne.w	8003df2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <xQueueGenericSend+0x240>)
 8003f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	e758      	b.n	8003df2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f42:	f000 fa69 	bl	8004418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f46:	f000 fdc7 	bl	8004ad8 <xTaskResumeAll>
 8003f4a:	e752      	b.n	8003df2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f4e:	f000 fa63 	bl	8004418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f52:	f000 fdc1 	bl	8004ad8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff f91b 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	460b      	mov	r3, r1
 8003f68:	4601      	mov	r1, r0
 8003f6a:	205a      	movs	r0, #90	; 0x5a
 8003f6c:	f7fe fcce 	bl	800290c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003f70:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3738      	adds	r7, #56	; 0x38
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08e      	sub	sp, #56	; 0x38
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <xQueueGenericSendFromISR+0x2c>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	e7fe      	b.n	8003faa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <xQueueGenericSendFromISR+0x3a>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <xQueueGenericSendFromISR+0x3e>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueGenericSendFromISR+0x40>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <xQueueGenericSendFromISR+0x58>
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	e7fe      	b.n	8003fd6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d103      	bne.n	8003fe6 <xQueueGenericSendFromISR+0x66>
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <xQueueGenericSendFromISR+0x6a>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueGenericSendFromISR+0x6c>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <xQueueGenericSendFromISR+0x84>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e7fe      	b.n	8004002 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004004:	f001 ffc6 	bl	8005f94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004008:	f3ef 8211 	mrs	r2, BASEPRI
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	61ba      	str	r2, [r7, #24]
 800401e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004020:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <xQueueGenericSendFromISR+0xb6>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d136      	bne.n	80040a4 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800403c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff f8a6 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 8004048:	4601      	mov	r1, r0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	461a      	mov	r2, r3
 800404e:	2060      	movs	r0, #96	; 0x60
 8004050:	f7fe fb8c 	bl	800276c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800405a:	f000 f94d 	bl	80042f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800405e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d112      	bne.n	800408e <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	3324      	adds	r3, #36	; 0x24
 8004074:	4618      	mov	r0, r3
 8004076:	f000 ff6f 	bl	8004f58 <xTaskRemoveFromEventList>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e007      	b.n	800409e <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800408e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004092:	3301      	adds	r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	b25a      	sxtb	r2, r3
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800409e:	2301      	movs	r3, #1
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80040a2:	e00b      	b.n	80040bc <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff f874 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 80040ac:	4601      	mov	r1, r0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	461a      	mov	r2, r3
 80040b2:	2060      	movs	r0, #96	; 0x60
 80040b4:	f7fe fb5a 	bl	800276c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3738      	adds	r7, #56	; 0x38
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b08f      	sub	sp, #60	; 0x3c
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <xQueueReceive+0x2e>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	e7fe      	b.n	80040fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <xQueueReceive+0x3c>
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <xQueueReceive+0x40>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <xQueueReceive+0x42>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <xQueueReceive+0x5a>
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	e7fe      	b.n	8004128 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800412a:	f001 f907 	bl	800533c <xTaskGetSchedulerState>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <xQueueReceive+0x6a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <xQueueReceive+0x6e>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueReceive+0x70>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <xQueueReceive+0x88>
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e7fe      	b.n	8004156 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004158:	f001 fe40 	bl	8005ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d031      	beq.n	80041cc <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416c:	f000 f92e 	bl	80043cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff f80e 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 8004178:	4604      	mov	r4, r0
 800417a:	2000      	movs	r0, #0
 800417c:	f7ff f80a 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 8004180:	4601      	mov	r1, r0
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	2301      	movs	r3, #1
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	460a      	mov	r2, r1
 800418c:	4621      	mov	r1, r4
 800418e:	205c      	movs	r0, #92	; 0x5c
 8004190:	f7fe fbbc 	bl	800290c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00f      	beq.n	80041c4 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	3310      	adds	r3, #16
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fed5 	bl	8004f58 <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041b4:	4b4f      	ldr	r3, [pc, #316]	; (80042f4 <xQueueReceive+0x224>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041c4:	f001 fe38 	bl	8005e38 <vPortExitCritical>
				return pdPASS;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e08e      	b.n	80042ea <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d115      	bne.n	80041fe <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041d2:	f001 fe31 	bl	8005e38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe ffdb 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 80041de:	4604      	mov	r4, r0
 80041e0:	2000      	movs	r0, #0
 80041e2:	f7fe ffd7 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 80041e6:	4601      	mov	r1, r0
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	2301      	movs	r3, #1
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	460a      	mov	r2, r1
 80041f2:	4621      	mov	r1, r4
 80041f4:	205c      	movs	r0, #92	; 0x5c
 80041f6:	f7fe fb89 	bl	800290c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e075      	b.n	80042ea <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004204:	f107 0310 	add.w	r3, r7, #16
 8004208:	4618      	mov	r0, r3
 800420a:	f000 ff0b 	bl	8005024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004212:	f001 fe11 	bl	8005e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004216:	f000 fc51 	bl	8004abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800421a:	f001 fddf 	bl	8005ddc <vPortEnterCritical>
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004224:	b25b      	sxtb	r3, r3
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d103      	bne.n	8004234 <xQueueReceive+0x164>
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d103      	bne.n	800424a <xQueueReceive+0x17a>
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800424a:	f001 fdf5 	bl	8005e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800424e:	1d3a      	adds	r2, r7, #4
 8004250:	f107 0310 	add.w	r3, r7, #16
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fefa 	bl	8005050 <xTaskCheckForTimeOut>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d124      	bne.n	80042ac <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004264:	f000 f92a 	bl	80044bc <prvIsQueueEmpty>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	3324      	adds	r3, #36	; 0x24
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fe1c 	bl	8004eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800427c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427e:	f000 f8cb 	bl	8004418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004282:	f000 fc29 	bl	8004ad8 <xTaskResumeAll>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f af65 	bne.w	8004158 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800428e:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <xQueueReceive+0x224>)
 8004290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	e75b      	b.n	8004158 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a2:	f000 f8b9 	bl	8004418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042a6:	f000 fc17 	bl	8004ad8 <xTaskResumeAll>
 80042aa:	e755      	b.n	8004158 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ae:	f000 f8b3 	bl	8004418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042b2:	f000 fc11 	bl	8004ad8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b8:	f000 f900 	bl	80044bc <prvIsQueueEmpty>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f43f af4a 	beq.w	8004158 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe ff64 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 80042cc:	4604      	mov	r4, r0
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fe ff60 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 80042d4:	4601      	mov	r1, r0
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	2301      	movs	r3, #1
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	460a      	mov	r2, r1
 80042e0:	4621      	mov	r1, r4
 80042e2:	205c      	movs	r0, #92	; 0x5c
 80042e4:	f7fe fb12 	bl	800290c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80042e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3734      	adds	r7, #52	; 0x34
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}
 80042f2:	bf00      	nop
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d14d      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f001 f828 	bl	8005378 <xTaskPriorityDisinherit>
 8004328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	e043      	b.n	80043ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d119      	bne.n	800436c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6858      	ldr	r0, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	461a      	mov	r2, r3
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	f002 f8b3 	bl	80064ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d32b      	bcc.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e026      	b.n	80043ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68d8      	ldr	r0, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	461a      	mov	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	f002 f899 	bl	80064ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	425b      	negs	r3, r3
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d207      	bcs.n	80043a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	425b      	negs	r3, r3
 80043a2:	441a      	add	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d105      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043c2:	697b      	ldr	r3, [r7, #20]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d303      	bcc.n	8004400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68d9      	ldr	r1, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	461a      	mov	r2, r3
 800440a:	6838      	ldr	r0, [r7, #0]
 800440c:	f002 f84f 	bl	80064ae <memcpy>
	}
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004420:	f001 fcdc 	bl	8005ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800442a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800442c:	e011      	b.n	8004452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3324      	adds	r3, #36	; 0x24
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd8c 	bl	8004f58 <xTaskRemoveFromEventList>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004446:	f000 fe63 	bl	8005110 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3b01      	subs	r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	dce9      	bgt.n	800442e <prvUnlockQueue+0x16>
 800445a:	e000      	b.n	800445e <prvUnlockQueue+0x46>
					break;
 800445c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004466:	f001 fce7 	bl	8005e38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800446a:	f001 fcb7 	bl	8005ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004476:	e011      	b.n	800449c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3310      	adds	r3, #16
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fd67 	bl	8004f58 <xTaskRemoveFromEventList>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004490:	f000 fe3e 	bl	8005110 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	3b01      	subs	r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800449c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dce9      	bgt.n	8004478 <prvUnlockQueue+0x60>
 80044a4:	e000      	b.n	80044a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	22ff      	movs	r2, #255	; 0xff
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044b0:	f001 fcc2 	bl	8005e38 <vPortExitCritical>
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044c4:	f001 fc8a 	bl	8005ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e001      	b.n	80044da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044da:	f001 fcad 	bl	8005e38 <vPortExitCritical>

	return xReturn;
 80044de:	68fb      	ldr	r3, [r7, #12]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044f0:	f001 fc74 	bl	8005ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d102      	bne.n	8004506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e001      	b.n	800450a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800450a:	f001 fc95 	bl	8005e38 <vPortExitCritical>

	return xReturn;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e01e      	b.n	8004566 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004528:	4a12      	ldr	r2, [pc, #72]	; (8004574 <vQueueAddToRegistry+0x5c>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d115      	bne.n	8004560 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004534:	490f      	ldr	r1, [pc, #60]	; (8004574 <vQueueAddToRegistry+0x5c>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800453e:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <vQueueAddToRegistry+0x5c>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fe21 	bl	8003194 <SEGGER_SYSVIEW_ShrinkId>
 8004552:	4601      	mov	r1, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	2071      	movs	r0, #113	; 0x71
 800455a:	f7fe f907 	bl	800276c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800455e:	e005      	b.n	800456c <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b07      	cmp	r3, #7
 800456a:	d9dd      	bls.n	8004528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20005b14 	.word	0x20005b14

08004578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004588:	f001 fc28 	bl	8005ddc <vPortEnterCritical>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004592:	b25b      	sxtb	r3, r3
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d103      	bne.n	80045a2 <vQueueWaitForMessageRestricted+0x2a>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d103      	bne.n	80045b8 <vQueueWaitForMessageRestricted+0x40>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b8:	f001 fc3e 	bl	8005e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3324      	adds	r3, #36	; 0x24
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fc95 	bl	8004efc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7ff ff20 	bl	8004418 <prvUnlockQueue>
	}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08e      	sub	sp, #56	; 0x38
 80045e4:	af04      	add	r7, sp, #16
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <xTaskCreateStatic+0x28>
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	e7fe      	b.n	8004606 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <xTaskCreateStatic+0x42>
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e7fe      	b.n	8004620 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004622:	235c      	movs	r3, #92	; 0x5c
 8004624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b5c      	cmp	r3, #92	; 0x5c
 800462a:	d009      	beq.n	8004640 <xTaskCreateStatic+0x60>
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	e7fe      	b.n	800463e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004640:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01e      	beq.n	8004686 <xTaskCreateStatic+0xa6>
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004656:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004660:	2300      	movs	r3, #0
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f850 	bl	800471e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800467e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004680:	f000 f8dc 	bl	800483c <prvAddNewTaskToReadyList>
 8004684:	e001      	b.n	800468a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800468a:	697b      	ldr	r3, [r7, #20]
	}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	; 0x30
 8004698:	af04      	add	r7, sp, #16
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fcf7 	bl	800609c <pvPortMalloc>
 80046ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046b6:	205c      	movs	r0, #92	; 0x5c
 80046b8:	f001 fcf0 	bl	800609c <pvPortMalloc>
 80046bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ca:	e005      	b.n	80046d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f001 fda7 	bl	8006220 <vPortFree>
 80046d2:	e001      	b.n	80046d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f80e 	bl	800471e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004702:	69f8      	ldr	r0, [r7, #28]
 8004704:	f000 f89a 	bl	800483c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004708:	2301      	movs	r3, #1
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e002      	b.n	8004714 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004714:	69bb      	ldr	r3, [r7, #24]
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	461a      	mov	r2, r3
 8004736:	21a5      	movs	r1, #165	; 0xa5
 8004738:	f001 fec4 	bl	80064c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004746:	3b01      	subs	r3, #1
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f023 0307 	bic.w	r3, r3, #7
 8004754:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <prvInitialiseNewTask+0x56>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e7fe      	b.n	8004772 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01f      	beq.n	80047ba <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e012      	b.n	80047a6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	7819      	ldrb	r1, [r3, #0]
 8004788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	3334      	adds	r3, #52	; 0x34
 8004790:	460a      	mov	r2, r1
 8004792:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b0f      	cmp	r3, #15
 80047aa:	d9e9      	bls.n	8004780 <prvInitialiseNewTask+0x62>
 80047ac:	e000      	b.n	80047b0 <prvInitialiseNewTask+0x92>
			{
				break;
 80047ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b8:	e003      	b.n	80047c2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	2b37      	cmp	r3, #55	; 0x37
 80047c6:	d901      	bls.n	80047cc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047c8:	2337      	movs	r3, #55	; 0x37
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	2200      	movs	r2, #0
 80047dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	3304      	adds	r3, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f912 	bl	8003a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	3318      	adds	r3, #24
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff f90d 	bl	8003a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	2200      	movs	r2, #0
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	69b8      	ldr	r0, [r7, #24]
 800481c:	f001 f9ba 	bl	8005b94 <pxPortInitialiseStack>
 8004820:	4602      	mov	r2, r0
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004832:	bf00      	nop
 8004834:	3720      	adds	r7, #32
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800483c:	b5b0      	push	{r4, r5, r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004844:	f001 faca 	bl	8005ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004848:	4b3c      	ldr	r3, [pc, #240]	; (800493c <prvAddNewTaskToReadyList+0x100>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a3b      	ldr	r2, [pc, #236]	; (800493c <prvAddNewTaskToReadyList+0x100>)
 8004850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004852:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <prvAddNewTaskToReadyList+0x104>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800485a:	4a39      	ldr	r2, [pc, #228]	; (8004940 <prvAddNewTaskToReadyList+0x104>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004860:	4b36      	ldr	r3, [pc, #216]	; (800493c <prvAddNewTaskToReadyList+0x100>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d110      	bne.n	800488a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004868:	f000 fc76 	bl	8005158 <prvInitialiseTaskLists>
 800486c:	e00d      	b.n	800488a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800486e:	4b35      	ldr	r3, [pc, #212]	; (8004944 <prvAddNewTaskToReadyList+0x108>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004876:	4b32      	ldr	r3, [pc, #200]	; (8004940 <prvAddNewTaskToReadyList+0x104>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	429a      	cmp	r2, r3
 8004882:	d802      	bhi.n	800488a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004884:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <prvAddNewTaskToReadyList+0x104>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <prvAddNewTaskToReadyList+0x10c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <prvAddNewTaskToReadyList+0x10c>)
 8004892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004894:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <prvAddNewTaskToReadyList+0x10c>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <prvAddNewTaskToReadyList+0x94>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fba9 	bl	8002ffc <SEGGER_SYSVIEW_OnTaskCreate>
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	461d      	mov	r5, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461c      	mov	r4, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	1ae3      	subs	r3, r4, r3
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	462b      	mov	r3, r5
 80048cc:	f7fe fe7c 	bl	80035c8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fc1a 	bl	800310c <SEGGER_SYSVIEW_OnTaskStartReady>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <prvAddNewTaskToReadyList+0x110>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d903      	bls.n	80048ec <prvAddNewTaskToReadyList+0xb0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <prvAddNewTaskToReadyList+0x110>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4a15      	ldr	r2, [pc, #84]	; (8004950 <prvAddNewTaskToReadyList+0x114>)
 80048fa:	441a      	add	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7ff f88f 	bl	8003a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004908:	f001 fa96 	bl	8005e38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800490c:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <prvAddNewTaskToReadyList+0x108>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <prvAddNewTaskToReadyList+0x104>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	429a      	cmp	r2, r3
 8004920:	d207      	bcs.n	8004932 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <prvAddNewTaskToReadyList+0x118>)
 8004924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bdb0      	pop	{r4, r5, r7, pc}
 800493a:	bf00      	nop
 800493c:	2000158c 	.word	0x2000158c
 8004940:	200010b8 	.word	0x200010b8
 8004944:	20001598 	.word	0x20001598
 8004948:	200015a8 	.word	0x200015a8
 800494c:	20001594 	.word	0x20001594
 8004950:	200010bc 	.word	0x200010bc
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01a      	beq.n	80049a0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <vTaskDelay+0x68>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <vTaskDelay+0x2e>
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	e7fe      	b.n	8004984 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004986:	f000 f899 	bl	8004abc <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	2023      	movs	r0, #35	; 0x23
 800498e:	f7fd feb1 	bl	80026f4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004992:	2100      	movs	r1, #0
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fd63 	bl	8005460 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800499a:	f000 f89d 	bl	8004ad8 <xTaskResumeAll>
 800499e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <vTaskDelay+0x6c>)
 80049a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200015b4 	.word	0x200015b4
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049d6:	463a      	mov	r2, r7
 80049d8:	1d39      	adds	r1, r7, #4
 80049da:	f107 0308 	add.w	r3, r7, #8
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe ffc0 	bl	8003964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	9202      	str	r2, [sp, #8]
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	2300      	movs	r3, #0
 80049f4:	460a      	mov	r2, r1
 80049f6:	492a      	ldr	r1, [pc, #168]	; (8004aa0 <vTaskStartScheduler+0xd8>)
 80049f8:	482a      	ldr	r0, [pc, #168]	; (8004aa4 <vTaskStartScheduler+0xdc>)
 80049fa:	f7ff fdf1 	bl	80045e0 <xTaskCreateStatic>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <vTaskStartScheduler+0xe0>)
 8004a02:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <vTaskStartScheduler+0xe0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e001      	b.n	8004a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d102      	bne.n	8004a22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a1c:	f000 fd74 	bl	8005508 <xTimerCreateTimerTask>
 8004a20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d128      	bne.n	8004a7a <vTaskStartScheduler+0xb2>
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <vTaskStartScheduler+0xe4>)
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <vTaskStartScheduler+0xe8>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <vTaskStartScheduler+0xec>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8004a4e:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <vTaskStartScheduler+0xf0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3334      	adds	r3, #52	; 0x34
 8004a54:	2205      	movs	r2, #5
 8004a56:	4912      	ldr	r1, [pc, #72]	; (8004aa0 <vTaskStartScheduler+0xd8>)
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fd19 	bl	8006490 <memcmp>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <vTaskStartScheduler+0xa8>
 8004a64:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <vTaskStartScheduler+0xf0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe fb0b 	bl	8003084 <SEGGER_SYSVIEW_OnTaskStartExec>
 8004a6e:	e001      	b.n	8004a74 <vTaskStartScheduler+0xac>
 8004a70:	f7fe faa8 	bl	8002fc4 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a74:	f001 f914 	bl	8005ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a78:	e00d      	b.n	8004a96 <vTaskStartScheduler+0xce>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d109      	bne.n	8004a96 <vTaskStartScheduler+0xce>
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e7fe      	b.n	8004a94 <vTaskStartScheduler+0xcc>
}
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08006638 	.word	0x08006638
 8004aa4:	08005129 	.word	0x08005129
 8004aa8:	200015b0 	.word	0x200015b0
 8004aac:	200015ac 	.word	0x200015ac
 8004ab0:	20001598 	.word	0x20001598
 8004ab4:	20001590 	.word	0x20001590
 8004ab8:	200010b8 	.word	0x200010b8

08004abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <vTaskSuspendAll+0x18>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a03      	ldr	r2, [pc, #12]	; (8004ad4 <vTaskSuspendAll+0x18>)
 8004ac8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004aca:	bf00      	nop
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	200015b4 	.word	0x200015b4

08004ad8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ae6:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <xTaskResumeAll+0x11c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <xTaskResumeAll+0x2a>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	e7fe      	b.n	8004b00 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b02:	f001 f96b 	bl	8005ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <xTaskResumeAll+0x11c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4a39      	ldr	r2, [pc, #228]	; (8004bf4 <xTaskResumeAll+0x11c>)
 8004b0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b10:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <xTaskResumeAll+0x11c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d166      	bne.n	8004be6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b18:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <xTaskResumeAll+0x120>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d062      	beq.n	8004be6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b20:	e033      	b.n	8004b8a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b22:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <xTaskResumeAll+0x124>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3318      	adds	r3, #24
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe ffd6 	bl	8003ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe ffd1 	bl	8003ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fae3 	bl	800310c <SEGGER_SYSVIEW_OnTaskStartReady>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4a:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <xTaskResumeAll+0x128>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d903      	bls.n	8004b5a <xTaskResumeAll+0x82>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <xTaskResumeAll+0x128>)
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <xTaskResumeAll+0x12c>)
 8004b68:	441a      	add	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7fe ff58 	bl	8003a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <xTaskResumeAll+0x130>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8004b84:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <xTaskResumeAll+0x134>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <xTaskResumeAll+0x124>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1c7      	bne.n	8004b22 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b98:	f000 fbb0 	bl	80052fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <xTaskResumeAll+0x138>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ba8:	f000 f858 	bl	8004c5c <xTaskIncrementTick>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <xTaskResumeAll+0x134>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f1      	bne.n	8004ba8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <xTaskResumeAll+0x138>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <xTaskResumeAll+0x134>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <xTaskResumeAll+0x13c>)
 8004bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004be6:	f001 f927 	bl	8005e38 <vPortExitCritical>

	return xAlreadyYielded;
 8004bea:	68bb      	ldr	r3, [r7, #8]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200015b4 	.word	0x200015b4
 8004bf8:	2000158c 	.word	0x2000158c
 8004bfc:	2000154c 	.word	0x2000154c
 8004c00:	20001594 	.word	0x20001594
 8004c04:	200010bc 	.word	0x200010bc
 8004c08:	200010b8 	.word	0x200010b8
 8004c0c:	200015a0 	.word	0x200015a0
 8004c10:	2000159c 	.word	0x2000159c
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <xTaskGetTickCount+0x1c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c24:	687b      	ldr	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20001590 	.word	0x20001590

08004c38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c3e:	f001 f9a9 	bl	8005f94 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004c46:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <xTaskGetTickCountFromISR+0x20>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c4c:	683b      	ldr	r3, [r7, #0]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20001590 	.word	0x20001590

08004c5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c66:	4b50      	ldr	r3, [pc, #320]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 808c 	bne.w	8004d88 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c70:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <xTaskIncrementTick+0x150>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c78:	4a4c      	ldr	r2, [pc, #304]	; (8004dac <xTaskIncrementTick+0x150>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11f      	bne.n	8004cc4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c84:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <xTaskIncrementTick+0x46>
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	e7fe      	b.n	8004ca0 <xTaskIncrementTick+0x44>
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	4b42      	ldr	r3, [pc, #264]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a40      	ldr	r2, [pc, #256]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4a40      	ldr	r2, [pc, #256]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b40      	ldr	r3, [pc, #256]	; (8004db8 <xTaskIncrementTick+0x15c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <xTaskIncrementTick+0x15c>)
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	f000 fb1c 	bl	80052fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <xTaskIncrementTick+0x160>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d34d      	bcc.n	8004d6a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cce:	4b38      	ldr	r3, [pc, #224]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd8:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <xTaskIncrementTick+0x160>)
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	601a      	str	r2, [r3, #0]
					break;
 8004ce0:	e043      	b.n	8004d6a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce2:	4b33      	ldr	r3, [pc, #204]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d203      	bcs.n	8004d02 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cfa:	4a30      	ldr	r2, [pc, #192]	; (8004dbc <xTaskIncrementTick+0x160>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d00:	e033      	b.n	8004d6a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe feea 	bl	8003ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3318      	adds	r3, #24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe fee1 	bl	8003ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe f9f3 	bl	800310c <SEGGER_SYSVIEW_OnTaskStartReady>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2a:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <xTaskIncrementTick+0x164>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d903      	bls.n	8004d3a <xTaskIncrementTick+0xde>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <xTaskIncrementTick+0x164>)
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <xTaskIncrementTick+0x168>)
 8004d48:	441a      	add	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f7fe fe68 	bl	8003a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <xTaskIncrementTick+0x16c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d3b4      	bcc.n	8004cce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d68:	e7b1      	b.n	8004cce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d6a:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <xTaskIncrementTick+0x16c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	4914      	ldr	r1, [pc, #80]	; (8004dc4 <xTaskIncrementTick+0x168>)
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d907      	bls.n	8004d92 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004d82:	2301      	movs	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e004      	b.n	8004d92 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <xTaskIncrementTick+0x170>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <xTaskIncrementTick+0x170>)
 8004d90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <xTaskIncrementTick+0x174>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d9e:	697b      	ldr	r3, [r7, #20]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	200015b4 	.word	0x200015b4
 8004dac:	20001590 	.word	0x20001590
 8004db0:	20001544 	.word	0x20001544
 8004db4:	20001548 	.word	0x20001548
 8004db8:	200015a4 	.word	0x200015a4
 8004dbc:	200015ac 	.word	0x200015ac
 8004dc0:	20001594 	.word	0x20001594
 8004dc4:	200010bc 	.word	0x200010bc
 8004dc8:	200010b8 	.word	0x200010b8
 8004dcc:	2000159c 	.word	0x2000159c
 8004dd0:	200015a0 	.word	0x200015a0

08004dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <vTaskSwitchContext+0xc8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004de2:	4b2f      	ldr	r3, [pc, #188]	; (8004ea0 <vTaskSwitchContext+0xcc>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004de8:	e053      	b.n	8004e92 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 8004dea:	4b2d      	ldr	r3, [pc, #180]	; (8004ea0 <vTaskSwitchContext+0xcc>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <vTaskSwitchContext+0xd0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e00f      	b.n	8004e18 <vTaskSwitchContext+0x44>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <vTaskSwitchContext+0x3e>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	e7fe      	b.n	8004e10 <vTaskSwitchContext+0x3c>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	4923      	ldr	r1, [pc, #140]	; (8004ea8 <vTaskSwitchContext+0xd4>)
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0e5      	beq.n	8004df8 <vTaskSwitchContext+0x24>
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <vTaskSwitchContext+0xd4>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d104      	bne.n	8004e5c <vTaskSwitchContext+0x88>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <vTaskSwitchContext+0xd8>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <vTaskSwitchContext+0xd0>)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <vTaskSwitchContext+0xd8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3334      	adds	r3, #52	; 0x34
 8004e72:	2205      	movs	r2, #5
 8004e74:	490e      	ldr	r1, [pc, #56]	; (8004eb0 <vTaskSwitchContext+0xdc>)
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fb0a 	bl	8006490 <memcmp>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <vTaskSwitchContext+0xba>
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <vTaskSwitchContext+0xd8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe f8fc 	bl	8003084 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004e8c:	e001      	b.n	8004e92 <vTaskSwitchContext+0xbe>
		traceTASK_SWITCHED_IN();
 8004e8e:	f7fe f899 	bl	8002fc4 <SEGGER_SYSVIEW_OnIdle>
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200015b4 	.word	0x200015b4
 8004ea0:	200015a0 	.word	0x200015a0
 8004ea4:	20001594 	.word	0x20001594
 8004ea8:	200010bc 	.word	0x200010bc
 8004eac:	200010b8 	.word	0x200010b8
 8004eb0:	08006638 	.word	0x08006638

08004eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <vTaskPlaceOnEventList+0x24>
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	e7fe      	b.n	8004ed6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <vTaskPlaceOnEventList+0x44>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3318      	adds	r3, #24
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fe fdc4 	bl	8003a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	6838      	ldr	r0, [r7, #0]
 8004eea:	f000 fab9 	bl	8005460 <prvAddCurrentTaskToDelayedList>
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200010b8 	.word	0x200010b8

08004efc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <vTaskPlaceOnEventListRestricted+0x26>
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e7fe      	b.n	8004f20 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <vTaskPlaceOnEventListRestricted+0x58>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3318      	adds	r3, #24
 8004f28:	4619      	mov	r1, r3
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7fe fd7b 	bl	8003a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004f3c:	2024      	movs	r0, #36	; 0x24
 8004f3e:	f7fd fbbb 	bl	80026b8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	68b8      	ldr	r0, [r7, #8]
 8004f46:	f000 fa8b 	bl	8005460 <prvAddCurrentTaskToDelayedList>
	}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200010b8 	.word	0x200010b8

08004f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <xTaskRemoveFromEventList+0x2a>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e7fe      	b.n	8004f80 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3318      	adds	r3, #24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fdaa 	bl	8003ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	; (800500c <xTaskRemoveFromEventList+0xb4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d121      	bne.n	8004fd8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe fda1 	bl	8003ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe f8b3 	bl	800310c <SEGGER_SYSVIEW_OnTaskStartReady>
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <xTaskRemoveFromEventList+0xb8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d903      	bls.n	8004fba <xTaskRemoveFromEventList+0x62>
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	4a16      	ldr	r2, [pc, #88]	; (8005010 <xTaskRemoveFromEventList+0xb8>)
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4a13      	ldr	r2, [pc, #76]	; (8005014 <xTaskRemoveFromEventList+0xbc>)
 8004fc8:	441a      	add	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f7fe fd28 	bl	8003a26 <vListInsertEnd>
 8004fd6:	e005      	b.n	8004fe4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	3318      	adds	r3, #24
 8004fdc:	4619      	mov	r1, r3
 8004fde:	480e      	ldr	r0, [pc, #56]	; (8005018 <xTaskRemoveFromEventList+0xc0>)
 8004fe0:	f7fe fd21 	bl	8003a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <xTaskRemoveFromEventList+0xc4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d905      	bls.n	8004ffe <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <xTaskRemoveFromEventList+0xc8>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e001      	b.n	8005002 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005002:	697b      	ldr	r3, [r7, #20]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	200015b4 	.word	0x200015b4
 8005010:	20001594 	.word	0x20001594
 8005014:	200010bc 	.word	0x200010bc
 8005018:	2000154c 	.word	0x2000154c
 800501c:	200010b8 	.word	0x200010b8
 8005020:	200015a0 	.word	0x200015a0

08005024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <vTaskInternalSetTimeOutState+0x24>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <vTaskInternalSetTimeOutState+0x28>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	200015a4 	.word	0x200015a4
 800504c:	20001590 	.word	0x20001590

08005050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <xTaskCheckForTimeOut+0x24>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e7fe      	b.n	8005072 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <xTaskCheckForTimeOut+0x3e>
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e7fe      	b.n	800508c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800508e:	f000 fea5 	bl	8005ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <xTaskCheckForTimeOut+0xb8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d102      	bne.n	80050b2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	e023      	b.n	80050fa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <xTaskCheckForTimeOut+0xbc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d007      	beq.n	80050ce <xTaskCheckForTimeOut+0x7e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d302      	bcc.n	80050ce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e015      	b.n	80050fa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d20b      	bcs.n	80050f0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	1ad2      	subs	r2, r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff ff9d 	bl	8005024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	e004      	b.n	80050fa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050fa:	f000 fe9d 	bl	8005e38 <vPortExitCritical>

	return xReturn;
 80050fe:	69fb      	ldr	r3, [r7, #28]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20001590 	.word	0x20001590
 800510c:	200015a4 	.word	0x200015a4

08005110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <vTaskMissedYield+0x14>)
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]
}
 800511a:	bf00      	nop
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	200015a0 	.word	0x200015a0

08005128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005130:	f000 f852 	bl	80051d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <prvIdleTask+0x28>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d9f9      	bls.n	8005130 <prvIdleTask+0x8>
			{
				taskYIELD();
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <prvIdleTask+0x2c>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800514c:	e7f0      	b.n	8005130 <prvIdleTask+0x8>
 800514e:	bf00      	nop
 8005150:	200010bc 	.word	0x200010bc
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	e00c      	b.n	800517e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <prvInitialiseTaskLists+0x60>)
 8005170:	4413      	add	r3, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fc2a 	bl	80039cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3301      	adds	r3, #1
 800517c:	607b      	str	r3, [r7, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b37      	cmp	r3, #55	; 0x37
 8005182:	d9ef      	bls.n	8005164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005184:	480d      	ldr	r0, [pc, #52]	; (80051bc <prvInitialiseTaskLists+0x64>)
 8005186:	f7fe fc21 	bl	80039cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800518a:	480d      	ldr	r0, [pc, #52]	; (80051c0 <prvInitialiseTaskLists+0x68>)
 800518c:	f7fe fc1e 	bl	80039cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005190:	480c      	ldr	r0, [pc, #48]	; (80051c4 <prvInitialiseTaskLists+0x6c>)
 8005192:	f7fe fc1b 	bl	80039cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005196:	480c      	ldr	r0, [pc, #48]	; (80051c8 <prvInitialiseTaskLists+0x70>)
 8005198:	f7fe fc18 	bl	80039cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800519c:	480b      	ldr	r0, [pc, #44]	; (80051cc <prvInitialiseTaskLists+0x74>)
 800519e:	f7fe fc15 	bl	80039cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <prvInitialiseTaskLists+0x78>)
 80051a4:	4a05      	ldr	r2, [pc, #20]	; (80051bc <prvInitialiseTaskLists+0x64>)
 80051a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <prvInitialiseTaskLists+0x7c>)
 80051aa:	4a05      	ldr	r2, [pc, #20]	; (80051c0 <prvInitialiseTaskLists+0x68>)
 80051ac:	601a      	str	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200010bc 	.word	0x200010bc
 80051bc:	2000151c 	.word	0x2000151c
 80051c0:	20001530 	.word	0x20001530
 80051c4:	2000154c 	.word	0x2000154c
 80051c8:	20001560 	.word	0x20001560
 80051cc:	20001578 	.word	0x20001578
 80051d0:	20001544 	.word	0x20001544
 80051d4:	20001548 	.word	0x20001548

080051d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051de:	e019      	b.n	8005214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051e0:	f000 fdfc 	bl	8005ddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <prvCheckTasksWaitingTermination+0x4c>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe fc75 	bl	8003ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvCheckTasksWaitingTermination+0x50>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <prvCheckTasksWaitingTermination+0x50>)
 80051fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <prvCheckTasksWaitingTermination+0x54>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3b01      	subs	r3, #1
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <prvCheckTasksWaitingTermination+0x54>)
 8005208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800520a:	f000 fe15 	bl	8005e38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f846 	bl	80052a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <prvCheckTasksWaitingTermination+0x54>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e1      	bne.n	80051e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20001560 	.word	0x20001560
 8005228:	2000158c 	.word	0x2000158c
 800522c:	20001574 	.word	0x20001574

08005230 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800523c:	e005      	b.n	800524a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3301      	adds	r3, #1
 8005242:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2ba5      	cmp	r3, #165	; 0xa5
 8005250:	d0f5      	beq.n	800523e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	b29b      	uxth	r3, r3
	}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <uxTaskGetStackHighWaterMark+0x14>
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <uxTaskGetStackHighWaterMark+0x34>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	e000      	b.n	800527e <uxTaskGetStackHighWaterMark+0x16>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	f7ff ffd2 	bl	8005230 <prvTaskCheckFreeStackSpace>
 800528c:	4603      	mov	r3, r0
 800528e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005290:	68fb      	ldr	r3, [r7, #12]
	}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200010b8 	.word	0x200010b8

080052a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d108      	bne.n	80052c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 ffb2 	bl	8006220 <vPortFree>
				vPortFree( pxTCB );
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 ffaf 	bl	8006220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052c2:	e017      	b.n	80052f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d103      	bne.n	80052d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 ffa6 	bl	8006220 <vPortFree>
	}
 80052d4:	e00e      	b.n	80052f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d009      	beq.n	80052f4 <prvDeleteTCB+0x54>
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e7fe      	b.n	80052f2 <prvDeleteTCB+0x52>
	}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <prvResetNextTaskUnblockTime+0x38>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <prvResetNextTaskUnblockTime+0x3c>)
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005314:	e008      	b.n	8005328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <prvResetNextTaskUnblockTime+0x38>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <prvResetNextTaskUnblockTime+0x3c>)
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	20001544 	.word	0x20001544
 8005338:	200015ac 	.word	0x200015ac

0800533c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <xTaskGetSchedulerState+0x34>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800534a:	2301      	movs	r3, #1
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	e008      	b.n	8005362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005350:	4b08      	ldr	r3, [pc, #32]	; (8005374 <xTaskGetSchedulerState+0x38>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005358:	2302      	movs	r3, #2
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	e001      	b.n	8005362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005362:	687b      	ldr	r3, [r7, #4]
	}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	20001598 	.word	0x20001598
 8005374:	200015b4 	.word	0x200015b4

08005378 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d05d      	beq.n	800544a <xTaskPriorityDisinherit+0xd2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800538e:	4b31      	ldr	r3, [pc, #196]	; (8005454 <xTaskPriorityDisinherit+0xdc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d009      	beq.n	80053ac <xTaskPriorityDisinherit+0x34>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e7fe      	b.n	80053aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <xTaskPriorityDisinherit+0x50>
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	e7fe      	b.n	80053c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	1e5a      	subs	r2, r3, #1
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053da:	429a      	cmp	r2, r3
 80053dc:	d035      	beq.n	800544a <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d131      	bne.n	800544a <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fb78 	bl	8003ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4619      	mov	r1, r3
 80053f4:	204a      	movs	r0, #74	; 0x4a
 80053f6:	f7fd f97d 	bl	80026f4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fd fe7b 	bl	800310c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <xTaskPriorityDisinherit+0xe0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d903      	bls.n	800542a <xTaskPriorityDisinherit+0xb2>
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <xTaskPriorityDisinherit+0xe0>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <xTaskPriorityDisinherit+0xe4>)
 8005438:	441a      	add	r2, r3
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3304      	adds	r3, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7fe faf0 	bl	8003a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005446:	2301      	movs	r3, #1
 8005448:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800544a:	697b      	ldr	r3, [r7, #20]
	}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	200010b8 	.word	0x200010b8
 8005458:	20001594 	.word	0x20001594
 800545c:	200010bc 	.word	0x200010bc

08005460 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800546a:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005470:	4b20      	ldr	r3, [pc, #128]	; (80054f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fb32 	bl	8003ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d10a      	bne.n	800549a <prvAddCurrentTaskToDelayedList+0x3a>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800548a:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	4819      	ldr	r0, [pc, #100]	; (80054f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005494:	f7fe fac7 	bl	8003a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005498:	e026      	b.n	80054e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d209      	bcs.n	80054c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b2:	4b12      	ldr	r3, [pc, #72]	; (80054fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f7fe fad5 	bl	8003a6e <vListInsert>
}
 80054c4:	e010      	b.n	80054e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f7fe facb 	bl	8003a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d202      	bcs.n	80054e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6013      	str	r3, [r2, #0]
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20001590 	.word	0x20001590
 80054f4:	200010b8 	.word	0x200010b8
 80054f8:	20001578 	.word	0x20001578
 80054fc:	20001548 	.word	0x20001548
 8005500:	20001544 	.word	0x20001544
 8005504:	200015ac 	.word	0x200015ac

08005508 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005512:	f000 faff 	bl	8005b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005516:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <xTimerCreateTimerTask+0x80>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d021      	beq.n	8005562 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005526:	1d3a      	adds	r2, r7, #4
 8005528:	f107 0108 	add.w	r1, r7, #8
 800552c:	f107 030c 	add.w	r3, r7, #12
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe fa31 	bl	8003998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	9202      	str	r2, [sp, #8]
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	2302      	movs	r3, #2
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	460a      	mov	r2, r1
 8005548:	4910      	ldr	r1, [pc, #64]	; (800558c <xTimerCreateTimerTask+0x84>)
 800554a:	4811      	ldr	r0, [pc, #68]	; (8005590 <xTimerCreateTimerTask+0x88>)
 800554c:	f7ff f848 	bl	80045e0 <xTaskCreateStatic>
 8005550:	4602      	mov	r2, r0
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <xTimerCreateTimerTask+0x8c>)
 8005554:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <xTimerCreateTimerTask+0x8c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800555e:	2301      	movs	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <xTimerCreateTimerTask+0x74>
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e7fe      	b.n	800557a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800557c:	697b      	ldr	r3, [r7, #20]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200015e8 	.word	0x200015e8
 800558c:	08006640 	.word	0x08006640
 8005590:	080056c9 	.word	0x080056c9
 8005594:	200015ec 	.word	0x200015ec

08005598 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d109      	bne.n	80055c4 <xTimerGenericCommand+0x2c>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	e7fe      	b.n	80055c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <xTimerGenericCommand+0x94>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02a      	beq.n	8005622 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b05      	cmp	r3, #5
 80055dc:	dc18      	bgt.n	8005610 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055de:	f7ff fead 	bl	800533c <xTaskGetSchedulerState>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d109      	bne.n	80055fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <xTimerGenericCommand+0x94>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	f107 0110 	add.w	r1, r7, #16
 80055f0:	2300      	movs	r3, #0
 80055f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f4:	f7fe fba2 	bl	8003d3c <xQueueGenericSend>
 80055f8:	6278      	str	r0, [r7, #36]	; 0x24
 80055fa:	e012      	b.n	8005622 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <xTimerGenericCommand+0x94>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	f107 0110 	add.w	r1, r7, #16
 8005604:	2300      	movs	r3, #0
 8005606:	2200      	movs	r2, #0
 8005608:	f7fe fb98 	bl	8003d3c <xQueueGenericSend>
 800560c:	6278      	str	r0, [r7, #36]	; 0x24
 800560e:	e008      	b.n	8005622 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <xTimerGenericCommand+0x94>)
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	f107 0110 	add.w	r1, r7, #16
 8005618:	2300      	movs	r3, #0
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	f7fe fcb0 	bl	8003f80 <xQueueGenericSendFromISR>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005624:	4618      	mov	r0, r3
 8005626:	3728      	adds	r7, #40	; 0x28
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	200015e8 	.word	0x200015e8

08005630 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af02      	add	r7, sp, #8
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <prvProcessExpiredTimer+0x94>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe fa49 	bl	8003ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d021      	beq.n	80056a0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	18d1      	adds	r1, r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	6978      	ldr	r0, [r7, #20]
 800566a:	f000 f8d1 	bl	8005810 <prvInsertTimerInActiveList>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01e      	beq.n	80056b2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	2300      	movs	r3, #0
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	2100      	movs	r1, #0
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f7ff ff8a 	bl	8005598 <xTimerGenericCommand>
 8005684:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d112      	bne.n	80056b2 <prvProcessExpiredTimer+0x82>
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	e7fe      	b.n	800569e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	4798      	blx	r3
}
 80056ba:	bf00      	nop
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	200015e0 	.word	0x200015e0

080056c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056d0:	f107 0308 	add.w	r3, r7, #8
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f857 	bl	8005788 <prvGetNextExpireTime>
 80056da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4619      	mov	r1, r3
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f803 	bl	80056ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056e6:	f000 f8d5 	bl	8005894 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056ea:	e7f1      	b.n	80056d0 <prvTimerTask+0x8>

080056ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056f6:	f7ff f9e1 	bl	8004abc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056fa:	f107 0308 	add.w	r3, r7, #8
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f866 	bl	80057d0 <prvSampleTimeNow>
 8005704:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d130      	bne.n	800576e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <prvProcessTimerOrBlockTask+0x3c>
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	429a      	cmp	r2, r3
 8005718:	d806      	bhi.n	8005728 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800571a:	f7ff f9dd 	bl	8004ad8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff ff85 	bl	8005630 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005726:	e024      	b.n	8005772 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <prvProcessTimerOrBlockTask+0x90>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <prvProcessTimerOrBlockTask+0x50>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <prvProcessTimerOrBlockTask+0x52>
 800573c:	2300      	movs	r3, #0
 800573e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <prvProcessTimerOrBlockTask+0x94>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	f7fe ff13 	bl	8004578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005752:	f7ff f9c1 	bl	8004ad8 <xTaskResumeAll>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <prvProcessTimerOrBlockTask+0x98>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
}
 800576c:	e001      	b.n	8005772 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800576e:	f7ff f9b3 	bl	8004ad8 <xTaskResumeAll>
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	200015e4 	.word	0x200015e4
 8005780:	200015e8 	.word	0x200015e8
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <prvGetNextExpireTime+0x44>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <prvGetNextExpireTime+0x16>
 800579a:	2201      	movs	r2, #1
 800579c:	e000      	b.n	80057a0 <prvGetNextExpireTime+0x18>
 800579e:	2200      	movs	r2, #0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057ac:	4b07      	ldr	r3, [pc, #28]	; (80057cc <prvGetNextExpireTime+0x44>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e001      	b.n	80057bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057bc:	68fb      	ldr	r3, [r7, #12]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	200015e0 	.word	0x200015e0

080057d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057d8:	f7ff fa1e 	bl	8004c18 <xTaskGetTickCount>
 80057dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <prvSampleTimeNow+0x3c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d205      	bcs.n	80057f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057e8:	f000 f930 	bl	8005a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e002      	b.n	80057fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057fa:	4a04      	ldr	r2, [pc, #16]	; (800580c <prvSampleTimeNow+0x3c>)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005800:	68fb      	ldr	r3, [r7, #12]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	200015f0 	.word	0x200015f0

08005810 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d812      	bhi.n	800585c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e01b      	b.n	8005882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <prvInsertTimerInActiveList+0x7c>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f7fe f90a 	bl	8003a6e <vListInsert>
 800585a:	e012      	b.n	8005882 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d206      	bcs.n	8005872 <prvInsertTimerInActiveList+0x62>
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e007      	b.n	8005882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <prvInsertTimerInActiveList+0x80>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7fe f8f6 	bl	8003a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005882:	697b      	ldr	r3, [r7, #20]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200015e4 	.word	0x200015e4
 8005890:	200015e0 	.word	0x200015e0

08005894 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	; 0x38
 8005898:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800589a:	e0c6      	b.n	8005a2a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da17      	bge.n	80058d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058a2:	1d3b      	adds	r3, r7, #4
 80058a4:	3304      	adds	r3, #4
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <prvProcessReceivedCommands+0x2e>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	e7fe      	b.n	80058c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c8:	6850      	ldr	r0, [r2, #4]
 80058ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058cc:	6892      	ldr	r2, [r2, #8]
 80058ce:	4611      	mov	r1, r2
 80058d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f2c0 80a7 	blt.w	8005a28 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	3304      	adds	r3, #4
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe f8f8 	bl	8003ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058f0:	463b      	mov	r3, r7
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff ff6c 	bl	80057d0 <prvSampleTimeNow>
 80058f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b09      	cmp	r3, #9
 80058fe:	f200 8094 	bhi.w	8005a2a <prvProcessReceivedCommands+0x196>
 8005902:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <prvProcessReceivedCommands+0x74>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	08005931 	.word	0x08005931
 800590c:	08005931 	.word	0x08005931
 8005910:	08005931 	.word	0x08005931
 8005914:	080059a3 	.word	0x080059a3
 8005918:	080059b7 	.word	0x080059b7
 800591c:	080059ff 	.word	0x080059ff
 8005920:	08005931 	.word	0x08005931
 8005924:	08005931 	.word	0x08005931
 8005928:	080059a3 	.word	0x080059a3
 800592c:	080059b7 	.word	0x080059b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	18d1      	adds	r1, r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005950:	f7ff ff5e 	bl	8005810 <prvInsertTimerInActiveList>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d067      	beq.n	8005a2a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05c      	beq.n	8005a2a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	441a      	add	r2, r3
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2300      	movs	r3, #0
 800597e:	2100      	movs	r1, #0
 8005980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005982:	f7ff fe09 	bl	8005598 <xTimerGenericCommand>
 8005986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d14d      	bne.n	8005a2a <prvProcessReceivedCommands+0x196>
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	61bb      	str	r3, [r7, #24]
 80059a0:	e7fe      	b.n	80059a0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059b4:	e039      	b.n	8005a2a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <prvProcessReceivedCommands+0x156>
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e7fe      	b.n	80059e8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	18d1      	adds	r1, r2, r3
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f8:	f7ff ff0a 	bl	8005810 <prvInsertTimerInActiveList>
					break;
 80059fc:	e015      	b.n	8005a2a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d103      	bne.n	8005a14 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a0e:	f000 fc07 	bl	8006220 <vPortFree>
 8005a12:	e00a      	b.n	8005a2a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a26:	e000      	b.n	8005a2a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <prvProcessReceivedCommands+0x1b4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	1d39      	adds	r1, r7, #4
 8005a30:	2200      	movs	r2, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fb4c 	bl	80040d0 <xQueueReceive>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f47f af2e 	bne.w	800589c <prvProcessReceivedCommands+0x8>
	}
}
 8005a40:	bf00      	nop
 8005a42:	3730      	adds	r7, #48	; 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200015e8 	.word	0x200015e8

08005a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a52:	e047      	b.n	8005ae4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a54:	4b2d      	ldr	r3, [pc, #180]	; (8005b0c <prvSwitchTimerLists+0xc0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5e:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <prvSwitchTimerLists+0xc0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe f837 	bl	8003ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d02d      	beq.n	8005ae4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4413      	add	r3, r2
 8005a90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d90e      	bls.n	8005ab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aa6:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <prvSwitchTimerLists+0xc0>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f7fd ffdc 	bl	8003a6e <vListInsert>
 8005ab6:	e015      	b.n	8005ae4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2300      	movs	r3, #0
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fd68 	bl	8005598 <xTimerGenericCommand>
 8005ac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <prvSwitchTimerLists+0x98>
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	e7fe      	b.n	8005ae2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <prvSwitchTimerLists+0xc0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1b2      	bne.n	8005a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <prvSwitchTimerLists+0xc0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <prvSwitchTimerLists+0xc4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <prvSwitchTimerLists+0xc0>)
 8005afa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005afc:	4a04      	ldr	r2, [pc, #16]	; (8005b10 <prvSwitchTimerLists+0xc4>)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6013      	str	r3, [r2, #0]
}
 8005b02:	bf00      	nop
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	200015e0 	.word	0x200015e0
 8005b10:	200015e4 	.word	0x200015e4

08005b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b1a:	f000 f95f 	bl	8005ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <prvCheckForValidListAndQueue+0x60>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d120      	bne.n	8005b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b26:	4814      	ldr	r0, [pc, #80]	; (8005b78 <prvCheckForValidListAndQueue+0x64>)
 8005b28:	f7fd ff50 	bl	80039cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b2c:	4813      	ldr	r0, [pc, #76]	; (8005b7c <prvCheckForValidListAndQueue+0x68>)
 8005b2e:	f7fd ff4d 	bl	80039cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b32:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <prvCheckForValidListAndQueue+0x6c>)
 8005b34:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <prvCheckForValidListAndQueue+0x64>)
 8005b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b38:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <prvCheckForValidListAndQueue+0x70>)
 8005b3a:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <prvCheckForValidListAndQueue+0x68>)
 8005b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b3e:	2300      	movs	r3, #0
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <prvCheckForValidListAndQueue+0x74>)
 8005b44:	4a11      	ldr	r2, [pc, #68]	; (8005b8c <prvCheckForValidListAndQueue+0x78>)
 8005b46:	2110      	movs	r1, #16
 8005b48:	200a      	movs	r0, #10
 8005b4a:	f7fe f85b 	bl	8003c04 <xQueueGenericCreateStatic>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <prvCheckForValidListAndQueue+0x60>)
 8005b52:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <prvCheckForValidListAndQueue+0x60>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <prvCheckForValidListAndQueue+0x60>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	490b      	ldr	r1, [pc, #44]	; (8005b90 <prvCheckForValidListAndQueue+0x7c>)
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fcd8 	bl	8004518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b68:	f000 f966 	bl	8005e38 <vPortExitCritical>
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200015e8 	.word	0x200015e8
 8005b78:	200015b8 	.word	0x200015b8
 8005b7c:	200015cc 	.word	0x200015cc
 8005b80:	200015e0 	.word	0x200015e0
 8005b84:	200015e4 	.word	0x200015e4
 8005b88:	20001694 	.word	0x20001694
 8005b8c:	200015f4 	.word	0x200015f4
 8005b90:	08006648 	.word	0x08006648

08005b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3b04      	subs	r3, #4
 8005ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3b04      	subs	r3, #4
 8005bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3b04      	subs	r3, #4
 8005bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bc4:	4a0c      	ldr	r2, [pc, #48]	; (8005bf8 <pxPortInitialiseStack+0x64>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3b14      	subs	r3, #20
 8005bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3b04      	subs	r3, #4
 8005bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f06f 0202 	mvn.w	r2, #2
 8005be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3b20      	subs	r3, #32
 8005be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bea:	68fb      	ldr	r3, [r7, #12]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	08005bfd 	.word	0x08005bfd

08005bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <prvTaskExitError+0x50>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d009      	beq.n	8005c24 <prvTaskExitError+0x28>
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e7fe      	b.n	8005c22 <prvTaskExitError+0x26>
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c36:	bf00      	nop
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0fc      	beq.n	8005c38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	2000000c 	.word	0x2000000c

08005c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c50:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <pxCurrentTCBConst2>)
 8005c52:	6819      	ldr	r1, [r3, #0]
 8005c54:	6808      	ldr	r0, [r1, #0]
 8005c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5a:	f380 8809 	msr	PSP, r0
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f380 8811 	msr	BASEPRI, r0
 8005c6a:	4770      	bx	lr
 8005c6c:	f3af 8000 	nop.w

08005c70 <pxCurrentTCBConst2>:
 8005c70:	200010b8 	.word	0x200010b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c78:	4808      	ldr	r0, [pc, #32]	; (8005c9c <prvPortStartFirstTask+0x24>)
 8005c7a:	6800      	ldr	r0, [r0, #0]
 8005c7c:	6800      	ldr	r0, [r0, #0]
 8005c7e:	f380 8808 	msr	MSP, r0
 8005c82:	f04f 0000 	mov.w	r0, #0
 8005c86:	f380 8814 	msr	CONTROL, r0
 8005c8a:	b662      	cpsie	i
 8005c8c:	b661      	cpsie	f
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	df00      	svc	0
 8005c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c9a:	bf00      	nop
 8005c9c:	e000ed08 	.word	0xe000ed08

08005ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ca6:	4b44      	ldr	r3, [pc, #272]	; (8005db8 <xPortStartScheduler+0x118>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a44      	ldr	r2, [pc, #272]	; (8005dbc <xPortStartScheduler+0x11c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d109      	bne.n	8005cc4 <xPortStartScheduler+0x24>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	e7fe      	b.n	8005cc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cc4:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <xPortStartScheduler+0x118>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a3d      	ldr	r2, [pc, #244]	; (8005dc0 <xPortStartScheduler+0x120>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d109      	bne.n	8005ce2 <xPortStartScheduler+0x42>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e7fe      	b.n	8005ce0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ce2:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <xPortStartScheduler+0x124>)
 8005ce4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	22ff      	movs	r2, #255	; 0xff
 8005cf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	4b30      	ldr	r3, [pc, #192]	; (8005dc8 <xPortStartScheduler+0x128>)
 8005d08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d0a:	4b30      	ldr	r3, [pc, #192]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d0c:	2207      	movs	r2, #7
 8005d0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d10:	e009      	b.n	8005d26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005d12:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a2c      	ldr	r2, [pc, #176]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2e:	2b80      	cmp	r3, #128	; 0x80
 8005d30:	d0ef      	beq.n	8005d12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d32:	4b26      	ldr	r3, [pc, #152]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1c3 0307 	rsb	r3, r3, #7
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d009      	beq.n	8005d52 <xPortStartScheduler+0xb2>
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60bb      	str	r3, [r7, #8]
 8005d50:	e7fe      	b.n	8005d50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d52:	4b1e      	ldr	r3, [pc, #120]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d64:	4a19      	ldr	r2, [pc, #100]	; (8005dcc <xPortStartScheduler+0x12c>)
 8005d66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <xPortStartScheduler+0x130>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a16      	ldr	r2, [pc, #88]	; (8005dd0 <xPortStartScheduler+0x130>)
 8005d76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <xPortStartScheduler+0x130>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <xPortStartScheduler+0x130>)
 8005d82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d88:	f000 f8d6 	bl	8005f38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <xPortStartScheduler+0x134>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d92:	f000 f8f5 	bl	8005f80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <xPortStartScheduler+0x138>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <xPortStartScheduler+0x138>)
 8005d9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005da0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005da2:	f7ff ff69 	bl	8005c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005da6:	f7ff f815 	bl	8004dd4 <vTaskSwitchContext>
	prvTaskExitError();
 8005daa:	f7ff ff27 	bl	8005bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	e000ed00 	.word	0xe000ed00
 8005dbc:	410fc271 	.word	0x410fc271
 8005dc0:	410fc270 	.word	0x410fc270
 8005dc4:	e000e400 	.word	0xe000e400
 8005dc8:	200016e4 	.word	0x200016e4
 8005dcc:	200016e8 	.word	0x200016e8
 8005dd0:	e000ed20 	.word	0xe000ed20
 8005dd4:	2000000c 	.word	0x2000000c
 8005dd8:	e000ef34 	.word	0xe000ef34

08005ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005df4:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <vPortEnterCritical+0x54>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	4a0d      	ldr	r2, [pc, #52]	; (8005e30 <vPortEnterCritical+0x54>)
 8005dfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <vPortEnterCritical+0x54>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d10e      	bne.n	8005e24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <vPortEnterCritical+0x58>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <vPortEnterCritical+0x48>
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	e7fe      	b.n	8005e22 <vPortEnterCritical+0x46>
	}
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	2000000c 	.word	0x2000000c
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e3e:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <vPortExitCritical+0x4c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <vPortExitCritical+0x22>
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	607b      	str	r3, [r7, #4]
 8005e58:	e7fe      	b.n	8005e58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <vPortExitCritical+0x4c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <vPortExitCritical+0x4c>)
 8005e62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <vPortExitCritical+0x4c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <vPortExitCritical+0x3e>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	2000000c 	.word	0x2000000c
	...

08005e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e90:	f3ef 8009 	mrs	r0, PSP
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <pxCurrentTCBConst>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f01e 0f10 	tst.w	lr, #16
 8005ea0:	bf08      	it	eq
 8005ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eaa:	6010      	str	r0, [r2, #0]
 8005eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005eb4:	f380 8811 	msr	BASEPRI, r0
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f7fe ff88 	bl	8004dd4 <vTaskSwitchContext>
 8005ec4:	f04f 0000 	mov.w	r0, #0
 8005ec8:	f380 8811 	msr	BASEPRI, r0
 8005ecc:	bc09      	pop	{r0, r3}
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	6808      	ldr	r0, [r1, #0]
 8005ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed6:	f01e 0f10 	tst.w	lr, #16
 8005eda:	bf08      	it	eq
 8005edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ee0:	f380 8809 	msr	PSP, r0
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	f3af 8000 	nop.w

08005ef0 <pxCurrentTCBConst>:
 8005ef0:	200010b8 	.word	0x200010b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop

08005ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f10:	f7fe fea4 	bl	8004c5c <xTaskIncrementTick>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <SysTick_Handler+0x3c>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <vPortSetupTimerInterrupt+0x34>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <vPortSetupTimerInterrupt+0x38>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <vPortSetupTimerInterrupt+0x3c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <vPortSetupTimerInterrupt+0x40>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	099b      	lsrs	r3, r3, #6
 8005f54:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <vPortSetupTimerInterrupt+0x44>)
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <vPortSetupTimerInterrupt+0x34>)
 8005f5c:	2207      	movs	r2, #7
 8005f5e:	601a      	str	r2, [r3, #0]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	e000e010 	.word	0xe000e010
 8005f70:	e000e018 	.word	0xe000e018
 8005f74:	20000000 	.word	0x20000000
 8005f78:	10624dd3 	.word	0x10624dd3
 8005f7c:	e000e014 	.word	0xe000e014

08005f80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f90 <vPortEnableVFP+0x10>
 8005f84:	6801      	ldr	r1, [r0, #0]
 8005f86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f8a:	6001      	str	r1, [r0, #0]
 8005f8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f8e:	bf00      	nop
 8005f90:	e000ed88 	.word	0xe000ed88

08005f94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	    vSetVarulMaxPRIGROUPValue();
 8005f9a:	f000 f839 	bl	8006010 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f9e:	f3ef 8305 	mrs	r3, IPSR
 8005fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b0f      	cmp	r3, #15
 8005fa8:	d913      	bls.n	8005fd2 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005faa:	4a15      	ldr	r2, [pc, #84]	; (8006000 <vPortValidateInterruptPriority+0x6c>)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fb4:	4b13      	ldr	r3, [pc, #76]	; (8006004 <vPortValidateInterruptPriority+0x70>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	7afa      	ldrb	r2, [r7, #11]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d209      	bcs.n	8005fd2 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	e7fe      	b.n	8005fd0 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <vPortValidateInterruptPriority+0x74>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <vPortValidateInterruptPriority+0x78>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d909      	bls.n	8005ff6 <vPortValidateInterruptPriority+0x62>
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	e7fe      	b.n	8005ff4 <vPortValidateInterruptPriority+0x60>
	}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e000e3f0 	.word	0xe000e3f0
 8006004:	200016e4 	.word	0x200016e4
 8006008:	e000ed0c 	.word	0xe000ed0c
 800600c:	200016e8 	.word	0x200016e8

08006010 <vSetVarulMaxPRIGROUPValue>:

//###########################################################
// Add function below in file port.c
#if( configASSERT_DEFINED == 1 )
	void vSetVarulMaxPRIGROUPValue( void )
	{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006016:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <vSetVarulMaxPRIGROUPValue+0x84>)
 8006018:	60fb      	str	r3, [r7, #12]
		volatile uint8_t ucMaxPriorityValue;
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	22ff      	movs	r2, #255	; 0xff
 800601e:	701a      	strb	r2, [r3, #0]
		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	71fb      	strb	r3, [r7, #7]
		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 800602a:	2207      	movs	r2, #7
 800602c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800602e:	e009      	b.n	8006044 <vSetVarulMaxPRIGROUPValue+0x34>
		{
			ulMaxPRIGROUPValue--;
 8006030:	4b19      	ldr	r3, [pc, #100]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3b01      	subs	r3, #1
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006038:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	b2db      	uxtb	r3, r3
 8006042:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d0ef      	beq.n	8006030 <vSetVarulMaxPRIGROUPValue+0x20>
	#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1c3 0307 	rsb	r3, r3, #7
 8006058:	2b04      	cmp	r3, #4
 800605a:	d009      	beq.n	8006070 <vSetVarulMaxPRIGROUPValue+0x60>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	e7fe      	b.n	800606e <vSetVarulMaxPRIGROUPValue+0x5e>
		}
	#endif
		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006070:	4b09      	ldr	r3, [pc, #36]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	4a08      	ldr	r2, [pc, #32]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006078:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006082:	4a05      	ldr	r2, [pc, #20]	; (8006098 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006084:	6013      	str	r3, [r2, #0]
	}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	e000e400 	.word	0xe000e400
 8006098:	200016e8 	.word	0x200016e8

0800609c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	; 0x28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060a8:	f7fe fd08 	bl	8004abc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060ac:	4b57      	ldr	r3, [pc, #348]	; (800620c <pvPortMalloc+0x170>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060b4:	f000 f90c 	bl	80062d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060b8:	4b55      	ldr	r3, [pc, #340]	; (8006210 <pvPortMalloc+0x174>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f040 808c 	bne.w	80061de <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01c      	beq.n	8006106 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80060cc:	2208      	movs	r2, #8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d013      	beq.n	8006106 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f023 0307 	bic.w	r3, r3, #7
 80060e4:	3308      	adds	r3, #8
 80060e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <pvPortMalloc+0x6a>
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e7fe      	b.n	8006104 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d068      	beq.n	80061de <pvPortMalloc+0x142>
 800610c:	4b41      	ldr	r3, [pc, #260]	; (8006214 <pvPortMalloc+0x178>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	429a      	cmp	r2, r3
 8006114:	d863      	bhi.n	80061de <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006116:	4b40      	ldr	r3, [pc, #256]	; (8006218 <pvPortMalloc+0x17c>)
 8006118:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800611a:	4b3f      	ldr	r3, [pc, #252]	; (8006218 <pvPortMalloc+0x17c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006120:	e004      	b.n	800612c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d903      	bls.n	800613e <pvPortMalloc+0xa2>
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f1      	bne.n	8006122 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800613e:	4b33      	ldr	r3, [pc, #204]	; (800620c <pvPortMalloc+0x170>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	429a      	cmp	r2, r3
 8006146:	d04a      	beq.n	80061de <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2208      	movs	r2, #8
 800614e:	4413      	add	r3, r2
 8006150:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	1ad2      	subs	r2, r2, r3
 8006162:	2308      	movs	r3, #8
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	429a      	cmp	r2, r3
 8006168:	d91e      	bls.n	80061a8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800616a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4413      	add	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <pvPortMalloc+0xf4>
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	e7fe      	b.n	800618e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061a2:	69b8      	ldr	r0, [r7, #24]
 80061a4:	f000 f8f6 	bl	8006394 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061a8:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <pvPortMalloc+0x178>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	4a18      	ldr	r2, [pc, #96]	; (8006214 <pvPortMalloc+0x178>)
 80061b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061b6:	4b17      	ldr	r3, [pc, #92]	; (8006214 <pvPortMalloc+0x178>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b18      	ldr	r3, [pc, #96]	; (800621c <pvPortMalloc+0x180>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d203      	bcs.n	80061ca <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <pvPortMalloc+0x178>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a15      	ldr	r2, [pc, #84]	; (800621c <pvPortMalloc+0x180>)
 80061c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <pvPortMalloc+0x174>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061de:	f7fe fc7b 	bl	8004ad8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <pvPortMalloc+0x164>
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	e7fe      	b.n	80061fe <pvPortMalloc+0x162>
	return pvReturn;
 8006200:	69fb      	ldr	r3, [r7, #28]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3728      	adds	r7, #40	; 0x28
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	200052f4 	.word	0x200052f4
 8006210:	20005300 	.word	0x20005300
 8006214:	200052f8 	.word	0x200052f8
 8006218:	200052ec 	.word	0x200052ec
 800621c:	200052fc 	.word	0x200052fc

08006220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d046      	beq.n	80062c0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006232:	2308      	movs	r3, #8
 8006234:	425b      	negs	r3, r3
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4413      	add	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <vPortFree+0xa8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <vPortFree+0x42>
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e7fe      	b.n	8006260 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <vPortFree+0x5e>
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	e7fe      	b.n	800627c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <vPortFree+0xa8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4013      	ands	r3, r2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d019      	beq.n	80062c0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d115      	bne.n	80062c0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <vPortFree+0xa8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	43db      	mvns	r3, r3
 800629e:	401a      	ands	r2, r3
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062a4:	f7fe fc0a 	bl	8004abc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	4b07      	ldr	r3, [pc, #28]	; (80062cc <vPortFree+0xac>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4413      	add	r3, r2
 80062b2:	4a06      	ldr	r2, [pc, #24]	; (80062cc <vPortFree+0xac>)
 80062b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062b6:	6938      	ldr	r0, [r7, #16]
 80062b8:	f000 f86c 	bl	8006394 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80062bc:	f7fe fc0c 	bl	8004ad8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062c0:	bf00      	nop
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20005300 	.word	0x20005300
 80062cc:	200052f8 	.word	0x200052f8

080062d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062dc:	4b27      	ldr	r3, [pc, #156]	; (800637c <prvHeapInit+0xac>)
 80062de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3307      	adds	r3, #7
 80062ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <prvHeapInit+0xac>)
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006308:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <prvHeapInit+0xb0>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <prvHeapInit+0xb0>)
 8006310:	2200      	movs	r2, #0
 8006312:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4413      	add	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800631c:	2208      	movs	r2, #8
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <prvHeapInit+0xb4>)
 8006330:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <prvHeapInit+0xb4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <prvHeapInit+0xb4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006350:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <prvHeapInit+0xb4>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <prvHeapInit+0xb8>)
 800635e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4a09      	ldr	r2, [pc, #36]	; (800638c <prvHeapInit+0xbc>)
 8006366:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <prvHeapInit+0xc0>)
 800636a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800636e:	601a      	str	r2, [r3, #0]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	200016ec 	.word	0x200016ec
 8006380:	200052ec 	.word	0x200052ec
 8006384:	200052f4 	.word	0x200052f4
 8006388:	200052fc 	.word	0x200052fc
 800638c:	200052f8 	.word	0x200052f8
 8006390:	20005300 	.word	0x20005300

08006394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800639c:	4b28      	ldr	r3, [pc, #160]	; (8006440 <prvInsertBlockIntoFreeList+0xac>)
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	e002      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x14>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d8f7      	bhi.n	80063a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	4413      	add	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d108      	bne.n	80063d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	441a      	add	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	441a      	add	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d118      	bne.n	800641c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <prvInsertBlockIntoFreeList+0xb0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d00d      	beq.n	8006412 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	441a      	add	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e008      	b.n	8006424 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <prvInsertBlockIntoFreeList+0xb0>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e003      	b.n	8006424 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	429a      	cmp	r2, r3
 800642a:	d002      	beq.n	8006432 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	200052ec 	.word	0x200052ec
 8006444:	200052f4 	.word	0x200052f4

08006448 <__libc_init_array>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4e0d      	ldr	r6, [pc, #52]	; (8006480 <__libc_init_array+0x38>)
 800644c:	4c0d      	ldr	r4, [pc, #52]	; (8006484 <__libc_init_array+0x3c>)
 800644e:	1ba4      	subs	r4, r4, r6
 8006450:	10a4      	asrs	r4, r4, #2
 8006452:	2500      	movs	r5, #0
 8006454:	42a5      	cmp	r5, r4
 8006456:	d109      	bne.n	800646c <__libc_init_array+0x24>
 8006458:	4e0b      	ldr	r6, [pc, #44]	; (8006488 <__libc_init_array+0x40>)
 800645a:	4c0c      	ldr	r4, [pc, #48]	; (800648c <__libc_init_array+0x44>)
 800645c:	f000 f83a 	bl	80064d4 <_init>
 8006460:	1ba4      	subs	r4, r4, r6
 8006462:	10a4      	asrs	r4, r4, #2
 8006464:	2500      	movs	r5, #0
 8006466:	42a5      	cmp	r5, r4
 8006468:	d105      	bne.n	8006476 <__libc_init_array+0x2e>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006470:	4798      	blx	r3
 8006472:	3501      	adds	r5, #1
 8006474:	e7ee      	b.n	8006454 <__libc_init_array+0xc>
 8006476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800647a:	4798      	blx	r3
 800647c:	3501      	adds	r5, #1
 800647e:	e7f2      	b.n	8006466 <__libc_init_array+0x1e>
 8006480:	08006714 	.word	0x08006714
 8006484:	08006714 	.word	0x08006714
 8006488:	08006714 	.word	0x08006714
 800648c:	08006718 	.word	0x08006718

08006490 <memcmp>:
 8006490:	b530      	push	{r4, r5, lr}
 8006492:	2400      	movs	r4, #0
 8006494:	42a2      	cmp	r2, r4
 8006496:	d101      	bne.n	800649c <memcmp+0xc>
 8006498:	2000      	movs	r0, #0
 800649a:	e007      	b.n	80064ac <memcmp+0x1c>
 800649c:	5d03      	ldrb	r3, [r0, r4]
 800649e:	3401      	adds	r4, #1
 80064a0:	190d      	adds	r5, r1, r4
 80064a2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80064a6:	42ab      	cmp	r3, r5
 80064a8:	d0f4      	beq.n	8006494 <memcmp+0x4>
 80064aa:	1b58      	subs	r0, r3, r5
 80064ac:	bd30      	pop	{r4, r5, pc}

080064ae <memcpy>:
 80064ae:	b510      	push	{r4, lr}
 80064b0:	1e43      	subs	r3, r0, #1
 80064b2:	440a      	add	r2, r1
 80064b4:	4291      	cmp	r1, r2
 80064b6:	d100      	bne.n	80064ba <memcpy+0xc>
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064c2:	e7f7      	b.n	80064b4 <memcpy+0x6>

080064c4 <memset>:
 80064c4:	4402      	add	r2, r0
 80064c6:	4603      	mov	r3, r0
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d100      	bne.n	80064ce <memset+0xa>
 80064cc:	4770      	bx	lr
 80064ce:	f803 1b01 	strb.w	r1, [r3], #1
 80064d2:	e7f9      	b.n	80064c8 <memset+0x4>

080064d4 <_init>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr

080064e0 <_fini>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	bf00      	nop
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr
