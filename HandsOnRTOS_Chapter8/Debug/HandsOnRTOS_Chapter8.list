
HandsOnRTOS_Chapter8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080070fc  080070fc  000170fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007308  08007308  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005938  20000010  08007320  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005948  08007320  00025948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4c8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032c7  00000000  00000000  0003b508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001340  00000000  00000000  0003fc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023083  00000000  00000000  00040fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011853  00000000  00000000  0006405b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5f48  00000000  00000000  000758ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b7f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  0014b874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070e4 	.word	0x080070e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080070e4 	.word	0x080070e4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semPtr */
  semPtrHandle = osSemaphoreNew(1, 1, &semPtr_attributes);
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <MX_FREERTOS_Init+0x48>)
 80004d6:	2101      	movs	r1, #1
 80004d8:	2001      	movs	r0, #1
 80004da:	f003 fa55 	bl	8003988 <osSemaphoreNew>
 80004de:	4602      	mov	r2, r0
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_FREERTOS_Init+0x4c>)
 80004e2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <MX_FREERTOS_Init+0x50>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480e      	ldr	r0, [pc, #56]	; (8000524 <MX_FREERTOS_Init+0x54>)
 80004ea:	f003 f979 	bl	80037e0 <osThreadNew>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <MX_FREERTOS_Init+0x58>)
 80004f2:	601a      	str	r2, [r3, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(StartGreenTask, NULL, &GreenTask_attributes);
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <MX_FREERTOS_Init+0x5c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <MX_FREERTOS_Init+0x60>)
 80004fa:	f003 f971 	bl	80037e0 <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_FREERTOS_Init+0x64>)
 8000502:	601a      	str	r2, [r3, #0]

  /* creation of BlueTask */
  BlueTaskHandle = osThreadNew(StartBlueTask, NULL, &BlueTask_attributes);
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <MX_FREERTOS_Init+0x68>)
 8000506:	2100      	movs	r1, #0
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <MX_FREERTOS_Init+0x6c>)
 800050a:	f003 f969 	bl	80037e0 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_FREERTOS_Init+0x70>)
 8000512:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	080072c4 	.word	0x080072c4
 800051c:	200053c0 	.word	0x200053c0
 8000520:	08007258 	.word	0x08007258
 8000524:	08000545 	.word	0x08000545
 8000528:	20005360 	.word	0x20005360
 800052c:	0800727c 	.word	0x0800727c
 8000530:	08000555 	.word	0x08000555
 8000534:	20005618 	.word	0x20005618
 8000538:	080072a0 	.word	0x080072a0
 800053c:	080005b9 	.word	0x080005b9
 8000540:	20005414 	.word	0x20005414

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f003 f9ed 	bl	800392c <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0x8>

08000554 <StartGreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenTask */
void StartGreenTask(void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGreenTask */
  int8_t countv =0;
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	 if(countv++ >= 5){
 8000560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	3201      	adds	r2, #1
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	73fa      	strb	r2, [r7, #15]
 800056c:	2b04      	cmp	r3, #4
 800056e:	dd09      	ble.n	8000584 <StartGreenTask+0x30>
		 countv = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]
		 SEGGER_SYSVIEW_PrintfHost("Task A (green LED) gives semPtr");
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <StartGreenTask+0x58>)
 8000576:	f002 ff0d 	bl	8003394 <SEGGER_SYSVIEW_PrintfHost>
		 osSemaphoreRelease(semPtrHandle);
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <StartGreenTask+0x5c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fb06 	bl	8003b90 <osSemaphoreRelease>

	 }
	 HAL_GPIO_WritePin(GREENLED_GPIO_Port,GREENLED_Pin,SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <StartGreenTask+0x60>)
 800058c:	f000 fcb4 	bl	8000ef8 <HAL_GPIO_WritePin>
	 vTaskDelay(100);
 8000590:	2064      	movs	r0, #100	; 0x64
 8000592:	f004 fed9 	bl	8005348 <vTaskDelay>
	 HAL_GPIO_WritePin(GREENLED_GPIO_Port,GREENLED_Pin,RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <StartGreenTask+0x60>)
 800059e:	f000 fcab 	bl	8000ef8 <HAL_GPIO_WritePin>
	 vTaskDelay(100);
 80005a2:	2064      	movs	r0, #100	; 0x64
 80005a4:	f004 fed0 	bl	8005348 <vTaskDelay>
	 if(countv++ >= 5){
 80005a8:	e7da      	b.n	8000560 <StartGreenTask+0xc>
 80005aa:	bf00      	nop
 80005ac:	08007128 	.word	0x08007128
 80005b0:	200053c0 	.word	0x200053c0
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <StartBlueTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlueTask */
void StartBlueTask(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlueTask */
	SEGGER_SYSVIEW_PrintfHost("Blue Task waiting for Semaphore");
 80005c0:	4818      	ldr	r0, [pc, #96]	; (8000624 <StartBlueTask+0x6c>)
 80005c2:	f002 fee7 	bl	8003394 <SEGGER_SYSVIEW_PrintfHost>
  int8_t i;
  /* Infinite loop */
  for(;;)
  {
      if(osSemaphoreAcquire(semPtrHandle,1000) == osOK){
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <StartBlueTask+0x70>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fa78 	bl	8003ac4 <osSemaphoreAcquire>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d11f      	bne.n	800061a <StartBlueTask+0x62>
    	  for(i=0; i <3 ; i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	e017      	b.n	8000610 <StartBlueTask+0x58>

    		 HAL_GPIO_WritePin(BLUELED_GPIO_Port,BLUELED_Pin,SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <StartBlueTask+0x74>)
 80005e8:	f000 fc86 	bl	8000ef8 <HAL_GPIO_WritePin>
			 vTaskDelay(50);
 80005ec:	2032      	movs	r0, #50	; 0x32
 80005ee:	f004 feab 	bl	8005348 <vTaskDelay>
			 HAL_GPIO_WritePin(BLUELED_GPIO_Port,BLUELED_Pin,RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <StartBlueTask+0x74>)
 80005fa:	f000 fc7d 	bl	8000ef8 <HAL_GPIO_WritePin>
			 vTaskDelay(50);
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f004 fea2 	bl	8005348 <vTaskDelay>
    	  for(i=0; i <3 ; i++){
 8000604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	3301      	adds	r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	73fb      	strb	r3, [r7, #15]
 8000610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000614:	2b02      	cmp	r3, #2
 8000616:	dde3      	ble.n	80005e0 <StartBlueTask+0x28>
 8000618:	e7d5      	b.n	80005c6 <StartBlueTask+0xe>

    	  }
      }else {
		  //Timeout due to waiting for semaphore
    	  SEGGER_SYSVIEW_PrintfHost("Timeout Due to No Semaphore");
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <StartBlueTask+0x78>)
 800061c:	f002 feba 	bl	8003394 <SEGGER_SYSVIEW_PrintfHost>
      if(osSemaphoreAcquire(semPtrHandle,1000) == osOK){
 8000620:	e7d1      	b.n	80005c6 <StartBlueTask+0xe>
 8000622:	bf00      	nop
 8000624:	08007148 	.word	0x08007148
 8000628:	200053c0 	.word	0x200053c0
 800062c:	40020c00 	.word	0x40020c00
 8000630:	08007168 	.word	0x08007168

08000634 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_GPIO_Init+0x60>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <MX_GPIO_Init+0x60>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_GPIO_Init+0x60>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREENLED_Pin|BLUELED_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <MX_GPIO_Init+0x64>)
 800066c:	f000 fc44 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = GREENLED_Pin|BLUELED_Pin;
 8000670:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_GPIO_Init+0x64>)
 8000688:	f000 fa9c 	bl	8000bc4 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020c00 	.word	0x40020c00

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 f96c 	bl	800097c <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 80006a4:	f002 fef4 	bl	8003490 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80006a8:	f002 f9d4 	bl	8002a54 <SEGGER_SYSVIEW_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f80a 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f7ff ffc0 	bl	8000634 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006b4:	f003 f82a 	bl	800370c <osKernelInitialize>
  MX_FREERTOS_Init();
 80006b8:	f7ff ff0a 	bl	80004d0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006bc:	f003 f85a 	bl	8003774 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x24>
	...

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 fcfe 	bl	80070d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xb4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xb4>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xb4>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <SystemClock_Config+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <SystemClock_Config+0xb8>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <SystemClock_Config+0xb8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fbf9 	bl	8000f2c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000740:	f000 f830 	bl	80007a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fe54 	bl	800140c <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800076a:	f000 f81b 	bl	80007a4 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 f915 	bl	80009c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40001400 	.word	0x40001400

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	2037      	movs	r0, #55	; 0x37
 800081a:	f000 f9a9 	bl	8000b70 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800081e:	2037      	movs	r0, #55	; 0x37
 8000820:	f000 f9c2 	bl	8000ba8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <HAL_InitTick+0xa0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_InitTick+0xa0>)
 800082e:	f043 0320 	orr.w	r3, r3, #32
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_InitTick+0xa0>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 0320 	and.w	r3, r3, #32
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000840:	f107 0210 	add.w	r2, r7, #16
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 ff96 	bl	800177c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000850:	f000 ff80 	bl	8001754 <HAL_RCC_GetPCLK1Freq>
 8000854:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <HAL_InitTick+0xa4>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	0c9b      	lsrs	r3, r3, #18
 8000860:	3b01      	subs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_InitTick+0xa8>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <HAL_InitTick+0xac>)
 8000868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_InitTick+0xa8>)
 800086c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000870:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_InitTick+0xa8>)
 8000874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000876:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_InitTick+0xa8>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_InitTick+0xa8>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <HAL_InitTick+0xa8>)
 8000886:	f000 ffab 	bl	80017e0 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <HAL_InitTick+0xa8>)
 8000892:	f000 ffda 	bl	800184a <HAL_TIM_Base_Start_IT>
 8000896:	4603      	mov	r3, r0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3730      	adds	r7, #48	; 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	2000581c 	.word	0x2000581c
 80008b0:	40001400 	.word	0x40001400

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM7_IRQHandler+0x10>)
 80008ee:	f000 ffd0 	bl	8001892 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000581c 	.word	0x2000581c

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <SystemInit+0x28>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a07      	ldr	r2, [pc, #28]	; (8000924 <SystemInit+0x28>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SystemInit+0x28>)
 8000912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000916:	609a      	str	r2, [r3, #8]
#endif
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800092c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800092e:	e003      	b.n	8000938 <LoopCopyDataInit>

08000930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000936:	3104      	adds	r1, #4

08000938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800093c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000940:	d3f6      	bcc.n	8000930 <CopyDataInit>
  ldr  r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000944:	e002      	b.n	800094c <LoopFillZerobss>

08000946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000948:	f842 3b04 	str.w	r3, [r2], #4

0800094c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000950:	d3f9      	bcc.n	8000946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000952:	f7ff ffd3 	bl	80008fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f006 fb7f 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fe9f 	bl	800069c <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000960:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000964:	08007310 	.word	0x08007310
  ldr  r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800096c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000970:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000974:	20005948 	.word	0x20005948

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f8d8 	bl	8000b5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff ff2a 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff ff00 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	2000585c 	.word	0x2000585c

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000585c 	.word	0x2000585c

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db0b      	blt.n	8000a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 021f 	and.w	r2, r3, #31
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <__NVIC_EnableIRQ+0x38>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	095b      	lsrs	r3, r3, #5
 8000a84:	2001      	movs	r0, #1
 8000a86:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	; 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff4c 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b82:	f7ff ff61 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	68b9      	ldr	r1, [r7, #8]
 8000b8c:	6978      	ldr	r0, [r7, #20]
 8000b8e:	f7ff ffb1 	bl	8000af4 <NVIC_EncodePriority>
 8000b92:	4602      	mov	r2, r0
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff80 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff54 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	e16b      	b.n	8000eb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be0:	2201      	movs	r2, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 815a 	bne.w	8000eb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d00b      	beq.n	8000c1e <HAL_GPIO_Init+0x5a>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c12:	2b11      	cmp	r3, #17
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d130      	bne.n	8000c80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	f003 0201 	and.w	r2, r3, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0xfc>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b12      	cmp	r3, #18
 8000cbe:	d123      	bne.n	8000d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	69b9      	ldr	r1, [r7, #24]
 8000d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0203 	and.w	r2, r3, #3
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80b4 	beq.w	8000eb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <HAL_GPIO_Init+0x308>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a5e      	ldr	r2, [pc, #376]	; (8000ecc <HAL_GPIO_Init+0x308>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b5c      	ldr	r3, [pc, #368]	; (8000ecc <HAL_GPIO_Init+0x308>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d66:	4a5a      	ldr	r2, [pc, #360]	; (8000ed0 <HAL_GPIO_Init+0x30c>)
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <HAL_GPIO_Init+0x310>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d02b      	beq.n	8000dea <HAL_GPIO_Init+0x226>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a50      	ldr	r2, [pc, #320]	; (8000ed8 <HAL_GPIO_Init+0x314>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d025      	beq.n	8000de6 <HAL_GPIO_Init+0x222>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x318>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d01f      	beq.n	8000de2 <HAL_GPIO_Init+0x21e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4e      	ldr	r2, [pc, #312]	; (8000ee0 <HAL_GPIO_Init+0x31c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0x21a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x320>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0x216>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d00d      	beq.n	8000dd6 <HAL_GPIO_Init+0x212>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_GPIO_Init+0x328>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x20e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_GPIO_Init+0x32c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_GPIO_Init+0x20a>
 8000dca:	2307      	movs	r3, #7
 8000dcc:	e00e      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000dce:	2308      	movs	r3, #8
 8000dd0:	e00c      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	e00a      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	e008      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000dda:	2304      	movs	r3, #4
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000dde:	2303      	movs	r3, #3
 8000de0:	e004      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x228>
 8000dea:	2300      	movs	r3, #0
 8000dec:	69fa      	ldr	r2, [r7, #28]
 8000dee:	f002 0203 	and.w	r2, r2, #3
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4093      	lsls	r3, r2
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dfc:	4934      	ldr	r1, [pc, #208]	; (8000ed0 <HAL_GPIO_Init+0x30c>)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	3302      	adds	r3, #2
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e2e:	4a31      	ldr	r2, [pc, #196]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e58:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eac:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	f67f ae90 	bls.w	8000be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3724      	adds	r7, #36	; 0x24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40021c00 	.word	0x40021c00
 8000ef4:	40013c00 	.word	0x40013c00

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f14:	e003      	b.n	8000f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	619a      	str	r2, [r3, #24]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e25b      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d075      	beq.n	8001036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f4a:	4ba3      	ldr	r3, [pc, #652]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d00c      	beq.n	8000f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f56:	4ba0      	ldr	r3, [pc, #640]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d112      	bne.n	8000f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f62:	4b9d      	ldr	r3, [pc, #628]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f6e:	d10b      	bne.n	8000f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	4b99      	ldr	r3, [pc, #612]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d05b      	beq.n	8001034 <HAL_RCC_OscConfig+0x108>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d157      	bne.n	8001034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e236      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x74>
 8000f92:	4b91      	ldr	r3, [pc, #580]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a90      	ldr	r2, [pc, #576]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e01d      	b.n	8000fdc <HAL_RCC_OscConfig+0xb0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x98>
 8000faa:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a8a      	ldr	r2, [pc, #552]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b88      	ldr	r3, [pc, #544]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a87      	ldr	r2, [pc, #540]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0xb0>
 8000fc4:	4b84      	ldr	r3, [pc, #528]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a83      	ldr	r2, [pc, #524]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b81      	ldr	r3, [pc, #516]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a80      	ldr	r2, [pc, #512]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fd00 	bl	80009e8 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fcfc 	bl	80009e8 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e1fb      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b76      	ldr	r3, [pc, #472]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0xc0>
 800100a:	e014      	b.n	8001036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fcec 	bl	80009e8 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fce8 	bl	80009e8 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e1e7      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	4b6c      	ldr	r3, [pc, #432]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0xe8>
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d063      	beq.n	800110a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001042:	4b65      	ldr	r3, [pc, #404]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800104e:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001056:	2b08      	cmp	r3, #8
 8001058:	d11c      	bne.n	8001094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105a:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d116      	bne.n	8001094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001066:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_OscConfig+0x152>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d001      	beq.n	800107e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e1bb      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4952      	ldr	r1, [pc, #328]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	e03a      	b.n	800110a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109c:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <HAL_RCC_OscConfig+0x2b0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a2:	f7ff fca1 	bl	80009e8 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010aa:	f7ff fc9d 	bl	80009e8 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e19c      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4940      	ldr	r1, [pc, #256]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
 80010dc:	e015      	b.n	800110a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <HAL_RCC_OscConfig+0x2b0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc80 	bl	80009e8 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc7c 	bl	80009e8 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e17b      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d030      	beq.n	8001178 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d016      	beq.n	800114c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_RCC_OscConfig+0x2b4>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001124:	f7ff fc60 	bl	80009e8 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112c:	f7ff fc5c 	bl	80009e8 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e15b      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x200>
 800114a:	e015      	b.n	8001178 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_RCC_OscConfig+0x2b4>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fc49 	bl	80009e8 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fc45 	bl	80009e8 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e144      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a0 	beq.w	80012c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10f      	bne.n	80011b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_RCC_OscConfig+0x2b8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d121      	bne.n	8001206 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_RCC_OscConfig+0x2b8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_RCC_OscConfig+0x2b8>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fc0b 	bl	80009e8 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e011      	b.n	80011fa <HAL_RCC_OscConfig+0x2ce>
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	42470000 	.word	0x42470000
 80011e0:	42470e80 	.word	0x42470e80
 80011e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e8:	f7ff fbfe 	bl	80009e8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e0fd      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b81      	ldr	r3, [pc, #516]	; (8001400 <HAL_RCC_OscConfig+0x4d4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x2f0>
 800120e:	4b7d      	ldr	r3, [pc, #500]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	4a7c      	ldr	r2, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6713      	str	r3, [r2, #112]	; 0x70
 800121a:	e01c      	b.n	8001256 <HAL_RCC_OscConfig+0x32a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b05      	cmp	r3, #5
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0x312>
 8001224:	4b77      	ldr	r3, [pc, #476]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001228:	4a76      	ldr	r2, [pc, #472]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6713      	str	r3, [r2, #112]	; 0x70
 8001230:	4b74      	ldr	r3, [pc, #464]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001234:	4a73      	ldr	r2, [pc, #460]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6713      	str	r3, [r2, #112]	; 0x70
 800123c:	e00b      	b.n	8001256 <HAL_RCC_OscConfig+0x32a>
 800123e:	4b71      	ldr	r3, [pc, #452]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001242:	4a70      	ldr	r2, [pc, #448]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6713      	str	r3, [r2, #112]	; 0x70
 800124a:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 800124c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124e:	4a6d      	ldr	r2, [pc, #436]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d015      	beq.n	800128a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125e:	f7ff fbc3 	bl	80009e8 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f7ff fbbf 	bl	80009e8 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4293      	cmp	r3, r2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e0bc      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127c:	4b61      	ldr	r3, [pc, #388]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0ee      	beq.n	8001266 <HAL_RCC_OscConfig+0x33a>
 8001288:	e014      	b.n	80012b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fbad 	bl	80009e8 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fba9 	bl	80009e8 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0a6      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 80012aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ee      	bne.n	8001292 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d105      	bne.n	80012c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a51      	ldr	r2, [pc, #324]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 80012c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8092 	beq.w	80013f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012d0:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d05c      	beq.n	8001396 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d141      	bne.n	8001368 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <HAL_RCC_OscConfig+0x4dc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb7d 	bl	80009e8 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fb79 	bl	80009e8 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e078      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f0      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69da      	ldr	r2, [r3, #28]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	019b      	lsls	r3, r3, #6
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	085b      	lsrs	r3, r3, #1
 8001328:	3b01      	subs	r3, #1
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	061b      	lsls	r3, r3, #24
 8001334:	4933      	ldr	r1, [pc, #204]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_RCC_OscConfig+0x4dc>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fb52 	bl	80009e8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fb4e 	bl	80009e8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e04d      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x41c>
 8001366:	e045      	b.n	80013f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x4dc>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fb3b 	bl	80009e8 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fb37 	bl	80009e8 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e036      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x44a>
 8001394:	e02e      	b.n	80013f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e029      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d115      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013ca:	4013      	ands	r3, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d10d      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d106      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40007000 	.word	0x40007000
 8001404:	40023800 	.word	0x40023800
 8001408:	42470060 	.word	0x42470060

0800140c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0cc      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b68      	ldr	r3, [pc, #416]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d90c      	bls.n	8001448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001436:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0b8      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800146a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001478:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001484:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	494d      	ldr	r1, [pc, #308]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	4313      	orrs	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d044      	beq.n	800152c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d119      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e07f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d003      	beq.n	80014ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e06f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e067      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f023 0203 	bic.w	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4934      	ldr	r1, [pc, #208]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014fc:	f7ff fa74 	bl	80009e8 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	e00a      	b.n	800151a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001504:	f7ff fa70 	bl	80009e8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e04f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 020c 	and.w	r2, r3, #12
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d1eb      	bne.n	8001504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d20c      	bcs.n	8001554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e032      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4916      	ldr	r1, [pc, #88]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	490e      	ldr	r1, [pc, #56]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001592:	f000 f821 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 8001596:	4601      	mov	r1, r0
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	fa21 f303 	lsr.w	r3, r1, r3
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f926 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	080072d4 	.word	0x080072d4
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ee:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_GetSysClockFreq+0x158>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d007      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0x32>
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d008      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x38>
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 808d 	bne.w	800171e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001606:	60bb      	str	r3, [r7, #8]
       break;
 8001608:	e08c      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800160a:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_GetSysClockFreq+0x160>)
 800160c:	60bb      	str	r3, [r7, #8]
      break;
 800160e:	e089      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_GetSysClockFreq+0x158>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001618:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161a:	4b45      	ldr	r3, [pc, #276]	; (8001730 <HAL_RCC_GetSysClockFreq+0x158>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d023      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001626:	4b42      	ldr	r3, [pc, #264]	; (8001730 <HAL_RCC_GetSysClockFreq+0x158>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	099b      	lsrs	r3, r3, #6
 800162c:	f04f 0400 	mov.w	r4, #0
 8001630:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	ea03 0501 	and.w	r5, r3, r1
 800163c:	ea04 0602 	and.w	r6, r4, r2
 8001640:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <HAL_RCC_GetSysClockFreq+0x160>)
 8001642:	fb02 f106 	mul.w	r1, r2, r6
 8001646:	2200      	movs	r2, #0
 8001648:	fb02 f205 	mul.w	r2, r2, r5
 800164c:	440a      	add	r2, r1
 800164e:	493a      	ldr	r1, [pc, #232]	; (8001738 <HAL_RCC_GetSysClockFreq+0x160>)
 8001650:	fba5 0101 	umull	r0, r1, r5, r1
 8001654:	1853      	adds	r3, r2, r1
 8001656:	4619      	mov	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f04f 0400 	mov.w	r4, #0
 800165e:	461a      	mov	r2, r3
 8001660:	4623      	mov	r3, r4
 8001662:	f7fe fdb5 	bl	80001d0 <__aeabi_uldivmod>
 8001666:	4603      	mov	r3, r0
 8001668:	460c      	mov	r4, r1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e049      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_RCC_GetSysClockFreq+0x158>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	f04f 0400 	mov.w	r4, #0
 8001678:	f240 11ff 	movw	r1, #511	; 0x1ff
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	ea03 0501 	and.w	r5, r3, r1
 8001684:	ea04 0602 	and.w	r6, r4, r2
 8001688:	4629      	mov	r1, r5
 800168a:	4632      	mov	r2, r6
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	f04f 0400 	mov.w	r4, #0
 8001694:	0154      	lsls	r4, r2, #5
 8001696:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800169a:	014b      	lsls	r3, r1, #5
 800169c:	4619      	mov	r1, r3
 800169e:	4622      	mov	r2, r4
 80016a0:	1b49      	subs	r1, r1, r5
 80016a2:	eb62 0206 	sbc.w	r2, r2, r6
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f04f 0400 	mov.w	r4, #0
 80016ae:	0194      	lsls	r4, r2, #6
 80016b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b4:	018b      	lsls	r3, r1, #6
 80016b6:	1a5b      	subs	r3, r3, r1
 80016b8:	eb64 0402 	sbc.w	r4, r4, r2
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	00e2      	lsls	r2, r4, #3
 80016c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016ca:	00d9      	lsls	r1, r3, #3
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	195b      	adds	r3, r3, r5
 80016d2:	eb44 0406 	adc.w	r4, r4, r6
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	02a2      	lsls	r2, r4, #10
 80016e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016e4:	0299      	lsls	r1, r3, #10
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	f7fe fd6a 	bl	80001d0 <__aeabi_uldivmod>
 80016fc:	4603      	mov	r3, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_GetSysClockFreq+0x158>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0c1b      	lsrs	r3, r3, #16
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	3301      	adds	r3, #1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	60bb      	str	r3, [r7, #8]
      break;
 800171c:	e002      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001720:	60bb      	str	r3, [r7, #8]
      break;
 8001722:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001724:	68bb      	ldr	r3, [r7, #8]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	017d7840 	.word	0x017d7840

0800173c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_RCC_GetHCLKFreq+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000000 	.word	0x20000000

08001754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001758:	f7ff fff0 	bl	800173c <HAL_RCC_GetHCLKFreq>
 800175c:	4601      	mov	r1, r0
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0a9b      	lsrs	r3, r3, #10
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	4a03      	ldr	r2, [pc, #12]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	080072e4 	.word	0x080072e4

0800177c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	220f      	movs	r2, #15
 800178a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_GetClockConfig+0x5c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_RCC_GetClockConfig+0x60>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 020f 	and.w	r2, r3, #15
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	601a      	str	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e01d      	b.n	800182e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f815 	bl	8001836 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3304      	adds	r3, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4610      	mov	r0, r2
 8001820:	f000 f968 	bl	8001af4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b06      	cmp	r3, #6
 8001872:	d007      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d122      	bne.n	80018ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d11b      	bne.n	80018ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f06f 0202 	mvn.w	r2, #2
 80018be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f8ee 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 80018da:	e005      	b.n	80018e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8e0 	bl	8001aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8f1 	bl	8001aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d122      	bne.n	8001942 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b04      	cmp	r3, #4
 8001908:	d11b      	bne.n	8001942 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f06f 0204 	mvn.w	r2, #4
 8001912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f8c4 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 800192e:	e005      	b.n	800193c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f8b6 	bl	8001aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f8c7 	bl	8001aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b08      	cmp	r3, #8
 800194e:	d122      	bne.n	8001996 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11b      	bne.n	8001996 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0208 	mvn.w	r2, #8
 8001966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2204      	movs	r2, #4
 800196c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f89a 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 8001982:	e005      	b.n	8001990 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f88c 	bl	8001aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f89d 	bl	8001aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d122      	bne.n	80019ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d11b      	bne.n	80019ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f06f 0210 	mvn.w	r2, #16
 80019ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2208      	movs	r2, #8
 80019c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f870 	bl	8001ab6 <HAL_TIM_IC_CaptureCallback>
 80019d6:	e005      	b.n	80019e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f862 	bl	8001aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f873 	bl	8001aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d10e      	bne.n	8001a16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f06f 0201 	mvn.w	r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7fe feb5 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a20:	2b80      	cmp	r3, #128	; 0x80
 8001a22:	d10e      	bne.n	8001a42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	2b80      	cmp	r3, #128	; 0x80
 8001a30:	d107      	bne.n	8001a42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f903 	bl	8001c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d10e      	bne.n	8001a6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5a:	2b40      	cmp	r3, #64	; 0x40
 8001a5c:	d107      	bne.n	8001a6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f838 	bl	8001ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d10e      	bne.n	8001a9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d107      	bne.n	8001a9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f06f 0220 	mvn.w	r2, #32
 8001a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f8cd 	bl	8001c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a40      	ldr	r2, [pc, #256]	; (8001c08 <TIM_Base_SetConfig+0x114>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d013      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b12:	d00f      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <TIM_Base_SetConfig+0x118>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00b      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <TIM_Base_SetConfig+0x11c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <TIM_Base_SetConfig+0x120>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d003      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <TIM_Base_SetConfig+0x124>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d108      	bne.n	8001b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a2f      	ldr	r2, [pc, #188]	; (8001c08 <TIM_Base_SetConfig+0x114>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d02b      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d027      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <TIM_Base_SetConfig+0x118>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d023      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <TIM_Base_SetConfig+0x11c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01f      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <TIM_Base_SetConfig+0x120>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01b      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <TIM_Base_SetConfig+0x124>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d017      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <TIM_Base_SetConfig+0x128>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <TIM_Base_SetConfig+0x12c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00f      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <TIM_Base_SetConfig+0x130>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00b      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <TIM_Base_SetConfig+0x134>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <TIM_Base_SetConfig+0x138>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d003      	beq.n	8001ba6 <TIM_Base_SetConfig+0xb2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <TIM_Base_SetConfig+0x13c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d108      	bne.n	8001bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <TIM_Base_SetConfig+0x114>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <TIM_Base_SetConfig+0xf8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <TIM_Base_SetConfig+0x124>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d103      	bne.n	8001bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40000c00 	.word	0x40000c00
 8001c18:	40010400 	.word	0x40010400
 8001c1c:	40014000 	.word	0x40014000
 8001c20:	40014400 	.word	0x40014400
 8001c24:	40014800 	.word	0x40014800
 8001c28:	40001800 	.word	0x40001800
 8001c2c:	40001c00 	.word	0x40001c00
 8001c30:	40002000 	.word	0x40002000

08001c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <_DoInit+0x8c>)
 8001c64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <_DoInit+0x90>)
 8001c76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <_DoInit+0x94>)
 8001c7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <_DoInit+0x90>)
 8001c9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <_DoInit+0x98>)
 8001ca2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <_DoInit+0x9c>)
 8001cc2:	6810      	ldr	r0, [r2, #0]
 8001cc4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <_DoInit+0xa0>)
 8001cca:	6810      	ldr	r0, [r2, #0]
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	8891      	ldrh	r1, [r2, #4]
 8001cd0:	7992      	ldrb	r2, [r2, #6]
 8001cd2:	8099      	strh	r1, [r3, #4]
 8001cd4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	719a      	strb	r2, [r3, #6]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20005860 	.word	0x20005860
 8001cec:	08007184 	.word	0x08007184
 8001cf0:	2000002c 	.word	0x2000002c
 8001cf4:	2000042c 	.word	0x2000042c
 8001cf8:	08007190 	.word	0x08007190
 8001cfc:	08007194 	.word	0x08007194

08001d00 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <SEGGER_RTT_ReadNoLock+0x100>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <SEGGER_RTT_ReadNoLock+0x18>
 8001d14:	f7ff ffa2 	bl	8001c5c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	3360      	adds	r3, #96	; 0x60
 8001d24:	4a36      	ldr	r2, [pc, #216]	; (8001e00 <SEGGER_RTT_ReadNoLock+0x100>)
 8001d26:	4413      	add	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d92a      	bls.n	8001d9c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	bf28      	it	cs
 8001d58:	4613      	movcs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	4413      	add	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4619      	mov	r1, r3
 8001d68:	69f8      	ldr	r0, [r7, #28]
 8001d6a:	f005 f9a8 	bl	80070be <memcpy>
    NumBytesRead += NumBytesRem;
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001d86:	6a3a      	ldr	r2, [r7, #32]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	6a3a      	ldr	r2, [r7, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d101      	bne.n	8001d9c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4293      	cmp	r3, r2
 8001daa:	bf28      	it	cs
 8001dac:	4613      	movcs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d018      	beq.n	8001de8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	69f8      	ldr	r0, [r7, #28]
 8001dc4:	f005 f97b 	bl	80070be <memcpy>
    NumBytesRead += NumBytesRem;
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001de0:	6a3a      	ldr	r2, [r7, #32]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20005860 	.word	0x20005860

08001e04 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4a3f      	ldr	r2, [pc, #252]	; (8001f20 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001e22:	4413      	add	r3, r2
 8001e24:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d854      	bhi.n	8001ee4 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d30f      	bcc.n	8001e6e <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4413      	add	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 f92f 	bl	80070be <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e054      	b.n	8001f18 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d34b      	bcc.n	8001f16 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d90e      	bls.n	8001eae <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4413      	add	r3, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 f90e 	bl	80070be <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	e018      	b.n	8001ee0 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 f8ff 	bl	80070be <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	6858      	ldr	r0, [r3, #4]
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	18d1      	adds	r1, r2, r3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f005 f8f4 	bl	80070be <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e019      	b.n	8001f18 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d30f      	bcc.n	8001f16 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4413      	add	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f02:	4618      	mov	r0, r3
 8001f04:	f005 f8db 	bl	80070be <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	441a      	add	r2, r3
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20005860 	.word	0x20005860

08001f24 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8001f3a:	f7ff fe8f 	bl	8001c5c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d24c      	bcs.n	8001fe4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8001f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8001f4e:	f04f 0120 	mov.w	r1, #32
 8001f52:	f381 8811 	msr	BASEPRI, r1
 8001f56:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d032      	beq.n	8001fc4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001f5e:	4925      	ldr	r1, [pc, #148]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001f72:	4920      	ldr	r1, [pc, #128]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3304      	adds	r3, #4
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001f88:	491a      	ldr	r1, [pc, #104]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3320      	adds	r3, #32
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8001f9c:	4915      	ldr	r1, [pc, #84]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	3328      	adds	r3, #40	; 0x28
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8001fb0:	4910      	ldr	r1, [pc, #64]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3324      	adds	r3, #36	; 0x24
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8001fc4:	490b      	ldr	r1, [pc, #44]	; (8001ff4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	332c      	adds	r3, #44	; 0x2c
 8001fd4:	6a3a      	ldr	r2, [r7, #32]
 8001fd6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e002      	b.n	8001fea <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001fea:	697b      	ldr	r3, [r7, #20]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20005860 	.word	0x20005860

08001ff8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800200e:	f7ff fe25 	bl	8001c5c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4293      	cmp	r3, r2
 800201c:	d24b      	bcs.n	80020b6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800201e:	f3ef 8311 	mrs	r3, BASEPRI
 8002022:	f04f 0120 	mov.w	r1, #32
 8002026:	f381 8811 	msr	BASEPRI, r1
 800202a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d031      	beq.n	8002096 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002032:	4925      	ldr	r1, [pc, #148]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002046:	4920      	ldr	r1, [pc, #128]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	3364      	adds	r3, #100	; 0x64
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	3368      	adds	r3, #104	; 0x68
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800206e:	4916      	ldr	r1, [pc, #88]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	3370      	adds	r3, #112	; 0x70
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002082:	4911      	ldr	r1, [pc, #68]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	336c      	adds	r3, #108	; 0x6c
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8002096:	490c      	ldr	r1, [pc, #48]	; (80020c8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	3374      	adds	r3, #116	; 0x74
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e002      	b.n	80020bc <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	617b      	str	r3, [r7, #20]
  }
  return r;
 80020bc:	697b      	ldr	r3, [r7, #20]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20005860 	.word	0x20005860

080020cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80020dc:	e002      	b.n	80020e4 <_EncodeStr+0x18>
    Len++;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	3301      	adds	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f6      	bne.n	80020de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d901      	bls.n	80020fc <_EncodeStr+0x30>
    Len = Limit;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2bfe      	cmp	r3, #254	; 0xfe
 8002100:	d806      	bhi.n	8002110 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	60fa      	str	r2, [r7, #12]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e011      	b.n	8002134 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	60fa      	str	r2, [r7, #12]
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	60fa      	str	r2, [r7, #12]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	0a19      	lsrs	r1, r3, #8
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002138:	e00a      	b.n	8002150 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	1c53      	adds	r3, r2, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1c59      	adds	r1, r3, #1
 8002144:	60f9      	str	r1, [r7, #12]
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	701a      	strb	r2, [r3, #0]
    n++;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3f0      	bcc.n	800213a <_EncodeStr+0x6e>
  }
  return pPayload;
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3304      	adds	r3, #4
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002184:	1cfb      	adds	r3, r7, #3
 8002186:	2201      	movs	r2, #1
 8002188:	4619      	mov	r1, r3
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff fdb8 	bl	8001d00 <SEGGER_RTT_ReadNoLock>
 8002190:	4603      	mov	r3, r0
 8002192:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	dd44      	ble.n	8002224 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d01a      	beq.n	80021d6 <_HandleIncomingPacket+0x58>
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	dc06      	bgt.n	80021b2 <_HandleIncomingPacket+0x34>
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d010      	beq.n	80021ca <_HandleIncomingPacket+0x4c>
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	dc11      	bgt.n	80021d0 <_HandleIncomingPacket+0x52>
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d009      	beq.n	80021c4 <_HandleIncomingPacket+0x46>
 80021b0:	e02d      	b.n	800220e <_HandleIncomingPacket+0x90>
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d015      	beq.n	80021e2 <_HandleIncomingPacket+0x64>
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	db10      	blt.n	80021dc <_HandleIncomingPacket+0x5e>
 80021ba:	2b07      	cmp	r3, #7
 80021bc:	d014      	beq.n	80021e8 <_HandleIncomingPacket+0x6a>
 80021be:	2b80      	cmp	r3, #128	; 0x80
 80021c0:	d015      	beq.n	80021ee <_HandleIncomingPacket+0x70>
 80021c2:	e024      	b.n	800220e <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80021c4:	f000 fc46 	bl	8002a54 <SEGGER_SYSVIEW_Start>
      break;
 80021c8:	e031      	b.n	800222e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80021ca:	f000 fcff 	bl	8002bcc <SEGGER_SYSVIEW_Stop>
      break;
 80021ce:	e02e      	b.n	800222e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80021d0:	f000 feda 	bl	8002f88 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80021d4:	e02b      	b.n	800222e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80021d6:	f000 fe9f 	bl	8002f18 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80021da:	e028      	b.n	800222e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80021dc:	f000 fd1c 	bl	8002c18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80021e0:	e025      	b.n	800222e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80021e2:	f001 f899 	bl	8003318 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80021e6:	e022      	b.n	800222e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80021e8:	f001 f878 	bl	80032dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80021ec:	e01f      	b.n	800222e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80021ee:	1cfb      	adds	r3, r7, #3
 80021f0:	2201      	movs	r2, #1
 80021f2:	4619      	mov	r1, r3
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff fd83 	bl	8001d00 <SEGGER_RTT_ReadNoLock>
 80021fa:	4603      	mov	r3, r0
 80021fc:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	dd11      	ble.n	8002228 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 ffe8 	bl	80031dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800220c:	e00c      	b.n	8002228 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0a      	bge.n	800222c <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002216:	1cfb      	adds	r3, r7, #3
 8002218:	2201      	movs	r2, #1
 800221a:	4619      	mov	r1, r3
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff fd6f 	bl	8001d00 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002222:	e003      	b.n	800222c <_HandleIncomingPacket+0xae>
    }
  }
 8002224:	bf00      	nop
 8002226:	e002      	b.n	800222e <_HandleIncomingPacket+0xb0>
      break;
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <_HandleIncomingPacket+0xb0>
      break;
 800222c:	bf00      	nop
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800223e:	2301      	movs	r3, #1
 8002240:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <_TrySendOverflowPacket+0xd8>)
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
 8002252:	e00b      	b.n	800226c <_TrySendOverflowPacket+0x34>
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	b2da      	uxtb	r2, r3
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	1c59      	adds	r1, r3, #1
 800225c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800225e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	09db      	lsrs	r3, r3, #7
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	2b7f      	cmp	r3, #127	; 0x7f
 8002270:	d8f0      	bhi.n	8002254 <_TrySendOverflowPacket+0x1c>
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <_TrySendOverflowPacket+0xdc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002288:	4b21      	ldr	r3, [pc, #132]	; (8002310 <_TrySendOverflowPacket+0xd8>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	e00b      	b.n	80022b4 <_TrySendOverflowPacket+0x7c>
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	6279      	str	r1, [r7, #36]	; 0x24
 80022a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	09db      	lsrs	r3, r3, #7
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	2b7f      	cmp	r3, #127	; 0x7f
 80022b8:	d8f0      	bhi.n	800229c <_TrySendOverflowPacket+0x64>
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	627a      	str	r2, [r7, #36]	; 0x24
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff fd94 	bl	8001e04 <SEGGER_RTT_WriteSkipNoLock>
 80022dc:	4603      	mov	r3, r0
 80022de:	613b      	str	r3, [r7, #16]
  if (Status) {
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <_TrySendOverflowPacket+0xd8>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <_TrySendOverflowPacket+0xd8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <_TrySendOverflowPacket+0xd8>)
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e004      	b.n	8002304 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <_TrySendOverflowPacket+0xd8>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	4a03      	ldr	r2, [pc, #12]	; (8002310 <_TrySendOverflowPacket+0xd8>)
 8002302:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002304:	693b      	ldr	r3, [r7, #16]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000844 	.word	0x20000844
 8002314:	e0001004 	.word	0xe0001004

08002318 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002324:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <_SendPacket+0x19c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d010      	beq.n	800234e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <_SendPacket+0x19c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a1 	beq.w	8002478 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <_SendPacket+0x19c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d109      	bne.n	8002352 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800233e:	f7ff ff7b 	bl	8002238 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002342:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <_SendPacket+0x19c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 8098 	bne.w	800247c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800234c:	e001      	b.n	8002352 <_SendPacket+0x3a>
    goto Send;
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <_SendPacket+0x3c>
Send:
 8002352:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b1f      	cmp	r3, #31
 8002358:	d809      	bhi.n	800236e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <_SendPacket+0x19c>)
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 8089 	bne.w	8002480 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b17      	cmp	r3, #23
 8002372:	d807      	bhi.n	8002384 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3b01      	subs	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e03d      	b.n	8002400 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b7f      	cmp	r3, #127	; 0x7f
 8002390:	d912      	bls.n	80023b8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	09da      	lsrs	r2, r3, #7
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3b01      	subs	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	3a01      	subs	r2, #1
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e006      	b.n	80023c6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b7f      	cmp	r3, #127	; 0x7f
 80023ca:	d912      	bls.n	80023f2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	09da      	lsrs	r2, r3, #7
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	3a01      	subs	r2, #1
 80023e4:	60fa      	str	r2, [r7, #12]
 80023e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e006      	b.n	8002400 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <_SendPacket+0x1a0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <_SendPacket+0x19c>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	e00b      	b.n	8002432 <_SendPacket+0x11a>
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1c59      	adds	r1, r3, #1
 8002422:	6279      	str	r1, [r7, #36]	; 0x24
 8002424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	09db      	lsrs	r3, r3, #7
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	2b7f      	cmp	r3, #127	; 0x7f
 8002436:	d8f0      	bhi.n	800241a <_SendPacket+0x102>
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	627a      	str	r2, [r7, #36]	; 0x24
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	461a      	mov	r2, r3
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff fcd6 	bl	8001e04 <SEGGER_RTT_WriteSkipNoLock>
 8002458:	4603      	mov	r3, r0
 800245a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <_SendPacket+0x19c>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	60d3      	str	r3, [r2, #12]
 8002468:	e00b      	b.n	8002482 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <_SendPacket+0x19c>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <_SendPacket+0x19c>)
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e004      	b.n	8002482 <_SendPacket+0x16a>
    goto SendDone;
 8002478:	bf00      	nop
 800247a:	e002      	b.n	8002482 <_SendPacket+0x16a>
      goto SendDone;
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <_SendPacket+0x16a>
      goto SendDone;
 8002480:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <_SendPacket+0x1a4>)
 8002484:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <_SendPacket+0x1a4>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	429a      	cmp	r2, r3
 8002490:	d00b      	beq.n	80024aa <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <_SendPacket+0x19c>)
 8002494:	789b      	ldrb	r3, [r3, #2]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <_SendPacket+0x19c>)
 800249c:	2201      	movs	r2, #1
 800249e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80024a0:	f7ff fe6d 	bl	800217e <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <_SendPacket+0x19c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	; 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000844 	.word	0x20000844
 80024b8:	e0001004 	.word	0xe0001004
 80024bc:	20005860 	.word	0x20005860

080024c0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0a2      	sub	sp, #136	; 0x88
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 80024d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 80024e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01e      	beq.n	8002528 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 80024ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80024ee:	2b25      	cmp	r3, #37	; 0x25
 80024f0:	d1f1      	bne.n	80024d6 <_VPrintHost+0x16>
      c = *p;
 80024f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1d19      	adds	r1, r3, #4
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6011      	str	r1, [r2, #0]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002510:	460a      	mov	r2, r1
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002518:	440b      	add	r3, r1
 800251a:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800251e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002522:	2b10      	cmp	r3, #16
 8002524:	d002      	beq.n	800252c <_VPrintHost+0x6c>
    c = *p++;
 8002526:	e7d6      	b.n	80024d6 <_VPrintHost+0x16>
      break;
 8002528:	bf00      	nop
 800252a:	e000      	b.n	800252e <_VPrintHost+0x6e>
        break;
 800252c:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800252e:	f3ef 8311 	mrs	r3, BASEPRI
 8002532:	f04f 0120 	mov.w	r1, #32
 8002536:	f381 8811 	msr	BASEPRI, r1
 800253a:	65bb      	str	r3, [r7, #88]	; 0x58
 800253c:	483f      	ldr	r0, [pc, #252]	; (800263c <_VPrintHost+0x17c>)
 800253e:	f7ff fe12 	bl	8002166 <_PreparePacket>
 8002542:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800254a:	f7ff fdbf 	bl	80020cc <_EncodeStr>
 800254e:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8002550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002552:	677b      	str	r3, [r7, #116]	; 0x74
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	673b      	str	r3, [r7, #112]	; 0x70
 8002558:	e00b      	b.n	8002572 <_VPrintHost+0xb2>
 800255a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255c:	b2da      	uxtb	r2, r3
 800255e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	6779      	str	r1, [r7, #116]	; 0x74
 8002564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800256e:	09db      	lsrs	r3, r3, #7
 8002570:	673b      	str	r3, [r7, #112]	; 0x70
 8002572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002574:	2b7f      	cmp	r3, #127	; 0x7f
 8002576:	d8f0      	bhi.n	800255a <_VPrintHost+0x9a>
 8002578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	677a      	str	r2, [r7, #116]	; 0x74
 800257e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002586:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8002588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800258a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800258c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002590:	66bb      	str	r3, [r7, #104]	; 0x68
 8002592:	e00b      	b.n	80025ac <_VPrintHost+0xec>
 8002594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002596:	b2da      	uxtb	r2, r3
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	1c59      	adds	r1, r3, #1
 800259c:	66f9      	str	r1, [r7, #108]	; 0x6c
 800259e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a8:	09db      	lsrs	r3, r3, #7
 80025aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ae:	2b7f      	cmp	r3, #127	; 0x7f
 80025b0:	d8f0      	bhi.n	8002594 <_VPrintHost+0xd4>
 80025b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c0:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80025ca:	e022      	b.n	8002612 <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 80025cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ce:	667b      	str	r3, [r7, #100]	; 0x64
 80025d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	663b      	str	r3, [r7, #96]	; 0x60
 80025d8:	e00b      	b.n	80025f2 <_VPrintHost+0x132>
 80025da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e0:	1c59      	adds	r1, r3, #1
 80025e2:	6679      	str	r1, [r7, #100]	; 0x64
 80025e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ee:	09db      	lsrs	r3, r3, #7
 80025f0:	663b      	str	r3, [r7, #96]	; 0x60
 80025f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f4:	2b7f      	cmp	r3, #127	; 0x7f
 80025f6:	d8f0      	bhi.n	80025da <_VPrintHost+0x11a>
 80025f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	667a      	str	r2, [r7, #100]	; 0x64
 80025fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002606:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8002608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800260c:	3304      	adds	r3, #4
 800260e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8002612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1d5      	bne.n	80025cc <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002620:	221a      	movs	r2, #26
 8002622:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002624:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002626:	f7ff fe77 	bl	8002318 <_SendPacket>
    RECORD_END();
 800262a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262c:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3788      	adds	r7, #136	; 0x88
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000874 	.word	0x20000874

08002640 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002656:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <SEGGER_SYSVIEW_Init+0x68>)
 8002658:	4914      	ldr	r1, [pc, #80]	; (80026ac <SEGGER_SYSVIEW_Init+0x6c>)
 800265a:	2001      	movs	r0, #1
 800265c:	f7ff fc62 	bl	8001f24 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002660:	2300      	movs	r3, #0
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2308      	movs	r3, #8
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <SEGGER_SYSVIEW_Init+0x70>)
 8002668:	4910      	ldr	r1, [pc, #64]	; (80026ac <SEGGER_SYSVIEW_Init+0x6c>)
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff fcc4 	bl	8001ff8 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <SEGGER_SYSVIEW_Init+0x74>)
 8002672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002676:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <SEGGER_SYSVIEW_Init+0x78>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <SEGGER_SYSVIEW_Init+0x74>)
 800267e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <SEGGER_SYSVIEW_Init+0x74>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <SEGGER_SYSVIEW_Init+0x74>)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <SEGGER_SYSVIEW_Init+0x74>)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <SEGGER_SYSVIEW_Init+0x74>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <SEGGER_SYSVIEW_Init+0x74>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000043c 	.word	0x2000043c
 80026ac:	0800719c 	.word	0x0800719c
 80026b0:	2000083c 	.word	0x2000083c
 80026b4:	20000844 	.word	0x20000844
 80026b8:	e0001004 	.word	0xe0001004

080026bc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6113      	str	r3, [r2, #16]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000844 	.word	0x20000844

080026dc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80026e4:	f3ef 8311 	mrs	r3, BASEPRI
 80026e8:	f04f 0120 	mov.w	r1, #32
 80026ec:	f381 8811 	msr	BASEPRI, r1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4808      	ldr	r0, [pc, #32]	; (8002714 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80026f4:	f7ff fd37 	bl	8002166 <_PreparePacket>
 80026f8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68b8      	ldr	r0, [r7, #8]
 8002700:	f7ff fe0a 	bl	8002318 <_SendPacket>
  RECORD_END();
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f383 8811 	msr	BASEPRI, r3
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000874 	.word	0x20000874

08002718 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002722:	f3ef 8311 	mrs	r3, BASEPRI
 8002726:	f04f 0120 	mov.w	r1, #32
 800272a:	f381 8811 	msr	BASEPRI, r1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	4816      	ldr	r0, [pc, #88]	; (800278c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002732:	f7ff fd18 	bl	8002166 <_PreparePacket>
 8002736:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e00b      	b.n	800275e <SEGGER_SYSVIEW_RecordU32+0x46>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	1c59      	adds	r1, r3, #1
 800274e:	61f9      	str	r1, [r7, #28]
 8002750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	09db      	lsrs	r3, r3, #7
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b7f      	cmp	r3, #127	; 0x7f
 8002762:	d8f0      	bhi.n	8002746 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	61fa      	str	r2, [r7, #28]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	6938      	ldr	r0, [r7, #16]
 800277a:	f7ff fdcd 	bl	8002318 <_SendPacket>
  RECORD_END();
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f383 8811 	msr	BASEPRI, r3
}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000874 	.word	0x20000874

08002790 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800279c:	f3ef 8311 	mrs	r3, BASEPRI
 80027a0:	f04f 0120 	mov.w	r1, #32
 80027a4:	f381 8811 	msr	BASEPRI, r1
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	4825      	ldr	r0, [pc, #148]	; (8002840 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80027ac:	f7ff fcdb 	bl	8002166 <_PreparePacket>
 80027b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027be:	e00b      	b.n	80027d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	09db      	lsrs	r3, r3, #7
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	2b7f      	cmp	r3, #127	; 0x7f
 80027dc:	d8f0      	bhi.n	80027c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	e00b      	b.n	8002810 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1c59      	adds	r1, r3, #1
 8002800:	6279      	str	r1, [r7, #36]	; 0x24
 8002802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	09db      	lsrs	r3, r3, #7
 800280e:	623b      	str	r3, [r7, #32]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b7f      	cmp	r3, #127	; 0x7f
 8002814:	d8f0      	bhi.n	80027f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	627a      	str	r2, [r7, #36]	; 0x24
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	6979      	ldr	r1, [r7, #20]
 800282a:	69b8      	ldr	r0, [r7, #24]
 800282c:	f7ff fd74 	bl	8002318 <_SendPacket>
  RECORD_END();
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f383 8811 	msr	BASEPRI, r3
}
 8002836:	bf00      	nop
 8002838:	3730      	adds	r7, #48	; 0x30
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000874 	.word	0x20000874

08002844 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b08e      	sub	sp, #56	; 0x38
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8002852:	f3ef 8311 	mrs	r3, BASEPRI
 8002856:	f04f 0120 	mov.w	r1, #32
 800285a:	f381 8811 	msr	BASEPRI, r1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	4832      	ldr	r0, [pc, #200]	; (800292c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8002862:	f7ff fc80 	bl	8002166 <_PreparePacket>
 8002866:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
 8002874:	e00b      	b.n	800288e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	b2da      	uxtb	r2, r3
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	1c59      	adds	r1, r3, #1
 800287e:	6379      	str	r1, [r7, #52]	; 0x34
 8002880:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	09db      	lsrs	r3, r3, #7
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	2b7f      	cmp	r3, #127	; 0x7f
 8002892:	d8f0      	bhi.n	8002876 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	637a      	str	r2, [r7, #52]	; 0x34
 800289a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ac:	e00b      	b.n	80028c6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	1c59      	adds	r1, r3, #1
 80028b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80028b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	09db      	lsrs	r3, r3, #7
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	2b7f      	cmp	r3, #127	; 0x7f
 80028ca:	d8f0      	bhi.n	80028ae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	e00b      	b.n	80028fe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	6279      	str	r1, [r7, #36]	; 0x24
 80028f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	09db      	lsrs	r3, r3, #7
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2b7f      	cmp	r3, #127	; 0x7f
 8002902:	d8f0      	bhi.n	80028e6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	627a      	str	r2, [r7, #36]	; 0x24
 800290a:	6a3a      	ldr	r2, [r7, #32]
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6979      	ldr	r1, [r7, #20]
 8002918:	69b8      	ldr	r0, [r7, #24]
 800291a:	f7ff fcfd 	bl	8002318 <_SendPacket>
  RECORD_END();
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f383 8811 	msr	BASEPRI, r3
}
 8002924:	bf00      	nop
 8002926:	3738      	adds	r7, #56	; 0x38
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000874 	.word	0x20000874

08002930 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b090      	sub	sp, #64	; 0x40
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800293e:	f3ef 8311 	mrs	r3, BASEPRI
 8002942:	f04f 0120 	mov.w	r1, #32
 8002946:	f381 8811 	msr	BASEPRI, r1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	4840      	ldr	r0, [pc, #256]	; (8002a50 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800294e:	f7ff fc0a 	bl	8002166 <_PreparePacket>
 8002952:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002960:	e00b      	b.n	800297a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	b2da      	uxtb	r2, r3
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800296c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	09db      	lsrs	r3, r3, #7
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	2b7f      	cmp	r3, #127	; 0x7f
 800297e:	d8f0      	bhi.n	8002962 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
 8002998:	e00b      	b.n	80029b2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	b2da      	uxtb	r2, r3
 800299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a0:	1c59      	adds	r1, r3, #1
 80029a2:	6379      	str	r1, [r7, #52]	; 0x34
 80029a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	09db      	lsrs	r3, r3, #7
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	2b7f      	cmp	r3, #127	; 0x7f
 80029b6:	d8f0      	bhi.n	800299a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	637a      	str	r2, [r7, #52]	; 0x34
 80029be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d0:	e00b      	b.n	80029ea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80029dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	09db      	lsrs	r3, r3, #7
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	2b7f      	cmp	r3, #127	; 0x7f
 80029ee:	d8f0      	bhi.n	80029d2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	e00b      	b.n	8002a22 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1c59      	adds	r1, r3, #1
 8002a12:	6279      	str	r1, [r7, #36]	; 0x24
 8002a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	09db      	lsrs	r3, r3, #7
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2b7f      	cmp	r3, #127	; 0x7f
 8002a26:	d8f0      	bhi.n	8002a0a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	6979      	ldr	r1, [r7, #20]
 8002a3c:	69b8      	ldr	r0, [r7, #24]
 8002a3e:	f7ff fc6b 	bl	8002318 <_SendPacket>
  RECORD_END();
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f383 8811 	msr	BASEPRI, r3
}
 8002a48:	bf00      	nop
 8002a4a:	3740      	adds	r7, #64	; 0x40
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000874 	.word	0x20000874

08002a54 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	; 0x30
 8002a58:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002a5a:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 80aa 	bne.w	8002bb8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002a64:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a6e:	f04f 0120 	mov.w	r1, #32
 8002a72:	f381 8811 	msr	BASEPRI, r1
 8002a76:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002a78:	220a      	movs	r2, #10
 8002a7a:	4952      	ldr	r1, [pc, #328]	; (8002bc4 <SEGGER_SYSVIEW_Start+0x170>)
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7ff f9c1 	bl	8001e04 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f7ff fe27 	bl	80026dc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8002a92:	f04f 0120 	mov.w	r1, #32
 8002a96:	f381 8811 	msr	BASEPRI, r1
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	484a      	ldr	r0, [pc, #296]	; (8002bc8 <SEGGER_SYSVIEW_Start+0x174>)
 8002a9e:	f7ff fb62 	bl	8002166 <_PreparePacket>
 8002aa2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aac:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	e00b      	b.n	8002acc <SEGGER_SYSVIEW_Start+0x78>
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	1c59      	adds	r1, r3, #1
 8002abc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	09db      	lsrs	r3, r3, #7
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad0:	d8f0      	bhi.n	8002ab4 <SEGGER_SYSVIEW_Start+0x60>
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	e00b      	b.n	8002b06 <SEGGER_SYSVIEW_Start+0xb2>
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	1c59      	adds	r1, r3, #1
 8002af6:	6279      	str	r1, [r7, #36]	; 0x24
 8002af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	09db      	lsrs	r3, r3, #7
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b7f      	cmp	r3, #127	; 0x7f
 8002b0a:	d8f0      	bhi.n	8002aee <SEGGER_SYSVIEW_Start+0x9a>
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	627a      	str	r2, [r7, #36]	; 0x24
 8002b12:	6a3a      	ldr	r2, [r7, #32]
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	e00b      	b.n	8002b40 <SEGGER_SYSVIEW_Start+0xec>
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	61f9      	str	r1, [r7, #28]
 8002b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	09db      	lsrs	r3, r3, #7
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b7f      	cmp	r3, #127	; 0x7f
 8002b44:	d8f0      	bhi.n	8002b28 <SEGGER_SYSVIEW_Start+0xd4>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	61fa      	str	r2, [r7, #28]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e00b      	b.n	8002b78 <SEGGER_SYSVIEW_Start+0x124>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	1c59      	adds	r1, r3, #1
 8002b68:	6179      	str	r1, [r7, #20]
 8002b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	09db      	lsrs	r3, r3, #7
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b7c:	d8f0      	bhi.n	8002b60 <SEGGER_SYSVIEW_Start+0x10c>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	617a      	str	r2, [r7, #20]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002b8e:	2218      	movs	r2, #24
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fbc0 	bl	8002318 <_SendPacket>
      RECORD_END();
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002bac:	f000 f9ec 	bl	8002f88 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002bb0:	f000 f9b2 	bl	8002f18 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002bb4:	f000 fbb0 	bl	8003318 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3730      	adds	r7, #48	; 0x30
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000844 	.word	0x20000844
 8002bc4:	080072ec 	.word	0x080072ec
 8002bc8:	20000874 	.word	0x20000874

08002bcc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8002bd6:	f04f 0120 	mov.w	r1, #32
 8002bda:	f381 8811 	msr	BASEPRI, r1
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	480b      	ldr	r0, [pc, #44]	; (8002c10 <SEGGER_SYSVIEW_Stop+0x44>)
 8002be2:	f7ff fac0 	bl	8002166 <_PreparePacket>
 8002be6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <SEGGER_SYSVIEW_Stop+0x48>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002bf0:	220b      	movs	r2, #11
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	6838      	ldr	r0, [r7, #0]
 8002bf6:	f7ff fb8f 	bl	8002318 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <SEGGER_SYSVIEW_Stop+0x48>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f383 8811 	msr	BASEPRI, r3
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000874 	.word	0x20000874
 8002c14:	20000844 	.word	0x20000844

08002c18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c22:	f04f 0120 	mov.w	r1, #32
 8002c26:	f381 8811 	msr	BASEPRI, r1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	4845      	ldr	r0, [pc, #276]	; (8002d44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002c2e:	f7ff fa9a 	bl	8002166 <_PreparePacket>
 8002c32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c42:	e00b      	b.n	8002c5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	1c59      	adds	r1, r3, #1
 8002c4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	09db      	lsrs	r3, r3, #7
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c60:	d8f0      	bhi.n	8002c44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	e00b      	b.n	8002c96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	1c59      	adds	r1, r3, #1
 8002c86:	6279      	str	r1, [r7, #36]	; 0x24
 8002c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	09db      	lsrs	r3, r3, #7
 8002c94:	623b      	str	r3, [r7, #32]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	2b7f      	cmp	r3, #127	; 0x7f
 8002c9a:	d8f0      	bhi.n	8002c7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e00b      	b.n	8002cd0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	61f9      	str	r1, [r7, #28]
 8002cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	09db      	lsrs	r3, r3, #7
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd4:	d8f0      	bhi.n	8002cb8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	61fa      	str	r2, [r7, #28]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	2302      	movs	r3, #2
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	e00b      	b.n	8002d08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	1c59      	adds	r1, r3, #1
 8002cf8:	6179      	str	r1, [r7, #20]
 8002cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	09db      	lsrs	r3, r3, #7
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d0c:	d8f0      	bhi.n	8002cf0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	617a      	str	r2, [r7, #20]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002d1e:	2218      	movs	r2, #24
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68b8      	ldr	r0, [r7, #8]
 8002d24:	f7ff faf8 	bl	8002318 <_SendPacket>
  RECORD_END();
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	4798      	blx	r3
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3730      	adds	r7, #48	; 0x30
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000874 	.word	0x20000874
 8002d48:	20000844 	.word	0x20000844

08002d4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b092      	sub	sp, #72	; 0x48
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002d54:	f3ef 8311 	mrs	r3, BASEPRI
 8002d58:	f04f 0120 	mov.w	r1, #32
 8002d5c:	f381 8811 	msr	BASEPRI, r1
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	486b      	ldr	r0, [pc, #428]	; (8002f10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002d64:	f7ff f9ff 	bl	8002166 <_PreparePacket>
 8002d68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b67      	ldr	r3, [pc, #412]	; (8002f14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d80:	e00b      	b.n	8002d9a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d88:	1c59      	adds	r1, r3, #1
 8002d8a:	6479      	str	r1, [r7, #68]	; 0x44
 8002d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d96:	09db      	lsrs	r3, r3, #7
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	d8f0      	bhi.n	8002d82 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	647a      	str	r2, [r7, #68]	; 0x44
 8002da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dba:	e00b      	b.n	8002dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	1c59      	adds	r1, r3, #1
 8002dc4:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002dc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	09db      	lsrs	r3, r3, #7
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8002dd8:	d8f0      	bhi.n	8002dbc <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de8:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	4619      	mov	r1, r3
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff f96a 	bl	80020cc <_EncodeStr>
 8002df8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002dfa:	2209      	movs	r2, #9
 8002dfc:	68f9      	ldr	r1, [r7, #12]
 8002dfe:	6938      	ldr	r0, [r7, #16]
 8002e00:	f7ff fa8a 	bl	8002318 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b40      	ldr	r3, [pc, #256]	; (8002f14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1a:	e00b      	b.n	8002e34 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	1c59      	adds	r1, r3, #1
 8002e24:	6379      	str	r1, [r7, #52]	; 0x34
 8002e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	09db      	lsrs	r3, r3, #7
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	2b7f      	cmp	r3, #127	; 0x7f
 8002e38:	d8f0      	bhi.n	8002e1c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e54:	e00b      	b.n	8002e6e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	1c59      	adds	r1, r3, #1
 8002e5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	09db      	lsrs	r3, r3, #7
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	2b7f      	cmp	r3, #127	; 0x7f
 8002e72:	d8f0      	bhi.n	8002e56 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	e00b      	b.n	8002ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	6279      	str	r1, [r7, #36]	; 0x24
 8002e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	09db      	lsrs	r3, r3, #7
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8002eac:	d8f0      	bhi.n	8002e90 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	627a      	str	r2, [r7, #36]	; 0x24
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e00b      	b.n	8002ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	61f9      	str	r1, [r7, #28]
 8002ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	09db      	lsrs	r3, r3, #7
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee4:	d8f0      	bhi.n	8002ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	61fa      	str	r2, [r7, #28]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002ef6:	2215      	movs	r2, #21
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	6938      	ldr	r0, [r7, #16]
 8002efc:	f7ff fa0c 	bl	8002318 <_SendPacket>
  RECORD_END();
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f383 8811 	msr	BASEPRI, r3
}
 8002f06:	bf00      	nop
 8002f08:	3748      	adds	r7, #72	; 0x48
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000874 	.word	0x20000874
 8002f14:	20000844 	.word	0x20000844

08002f18 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002f1c:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002f2e:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4798      	blx	r3
  }
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000844 	.word	0x20000844

08002f40 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f48:	f3ef 8311 	mrs	r3, BASEPRI
 8002f4c:	f04f 0120 	mov.w	r1, #32
 8002f50:	f381 8811 	msr	BASEPRI, r1
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	480b      	ldr	r0, [pc, #44]	; (8002f84 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002f58:	f7ff f905 	bl	8002166 <_PreparePacket>
 8002f5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6938      	ldr	r0, [r7, #16]
 8002f64:	f7ff f8b2 	bl	80020cc <_EncodeStr>
 8002f68:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002f6a:	220e      	movs	r2, #14
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	6938      	ldr	r0, [r7, #16]
 8002f70:	f7ff f9d2 	bl	8002318 <_SendPacket>
  RECORD_END();
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f383 8811 	msr	BASEPRI, r3
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000874 	.word	0x20000874

08002f88 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d019      	beq.n	8002fca <SEGGER_SYSVIEW_RecordSystime+0x42>
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d014      	beq.n	8002fca <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4798      	blx	r3
 8002fa8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002fac:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002fae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	f04f 0400 	mov.w	r4, #0
 8002fba:	0013      	movs	r3, r2
 8002fbc:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	200d      	movs	r0, #13
 8002fc4:	f7ff fbe4 	bl	8002790 <SEGGER_SYSVIEW_RecordU32x2>
 8002fc8:	e005      	b.n	8002fd6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	200c      	movs	r0, #12
 8002fd2:	f7ff fba1 	bl	8002718 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd90      	pop	{r4, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000844 	.word	0x20000844
 8002fe4:	e0001004 	.word	0xe0001004

08002fe8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002fee:	f3ef 8311 	mrs	r3, BASEPRI
 8002ff2:	f04f 0120 	mov.w	r1, #32
 8002ff6:	f381 8811 	msr	BASEPRI, r1
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	4807      	ldr	r0, [pc, #28]	; (800301c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002ffe:	f7ff f8b2 	bl	8002166 <_PreparePacket>
 8003002:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003004:	2211      	movs	r2, #17
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	6838      	ldr	r0, [r7, #0]
 800300a:	f7ff f985 	bl	8002318 <_SendPacket>
  RECORD_END();
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f383 8811 	msr	BASEPRI, r3
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000874 	.word	0x20000874

08003020 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003028:	f3ef 8311 	mrs	r3, BASEPRI
 800302c:	f04f 0120 	mov.w	r1, #32
 8003030:	f381 8811 	msr	BASEPRI, r1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	481a      	ldr	r0, [pc, #104]	; (80030a0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003038:	f7ff f895 	bl	8002166 <_PreparePacket>
 800303c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e00b      	b.n	8003070 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	61f9      	str	r1, [r7, #28]
 8003062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	09db      	lsrs	r3, r3, #7
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b7f      	cmp	r3, #127	; 0x7f
 8003074:	d8f0      	bhi.n	8003058 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	61fa      	str	r2, [r7, #28]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003086:	2208      	movs	r2, #8
 8003088:	68f9      	ldr	r1, [r7, #12]
 800308a:	6938      	ldr	r0, [r7, #16]
 800308c:	f7ff f944 	bl	8002318 <_SendPacket>
  RECORD_END();
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f383 8811 	msr	BASEPRI, r3
}
 8003096:	bf00      	nop
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000874 	.word	0x20000874
 80030a4:	20000844 	.word	0x20000844

080030a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80030b0:	f3ef 8311 	mrs	r3, BASEPRI
 80030b4:	f04f 0120 	mov.w	r1, #32
 80030b8:	f381 8811 	msr	BASEPRI, r1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	481a      	ldr	r0, [pc, #104]	; (8003128 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80030c0:	f7ff f851 	bl	8002166 <_PreparePacket>
 80030c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e00b      	b.n	80030f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	61f9      	str	r1, [r7, #28]
 80030ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	09db      	lsrs	r3, r3, #7
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b7f      	cmp	r3, #127	; 0x7f
 80030fc:	d8f0      	bhi.n	80030e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	61fa      	str	r2, [r7, #28]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800310e:	2204      	movs	r2, #4
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	6938      	ldr	r0, [r7, #16]
 8003114:	f7ff f900 	bl	8002318 <_SendPacket>
  RECORD_END();
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f383 8811 	msr	BASEPRI, r3
}
 800311e:	bf00      	nop
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000874 	.word	0x20000874
 800312c:	20000844 	.word	0x20000844

08003130 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003138:	f3ef 8311 	mrs	r3, BASEPRI
 800313c:	f04f 0120 	mov.w	r1, #32
 8003140:	f381 8811 	msr	BASEPRI, r1
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	481a      	ldr	r0, [pc, #104]	; (80031b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003148:	f7ff f80d 	bl	8002166 <_PreparePacket>
 800314c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	e00b      	b.n	8003180 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	61f9      	str	r1, [r7, #28]
 8003172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	09db      	lsrs	r3, r3, #7
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b7f      	cmp	r3, #127	; 0x7f
 8003184:	d8f0      	bhi.n	8003168 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	61fa      	str	r2, [r7, #28]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003196:	2206      	movs	r2, #6
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	6938      	ldr	r0, [r7, #16]
 800319c:	f7ff f8bc 	bl	8002318 <_SendPacket>
  RECORD_END();
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f383 8811 	msr	BASEPRI, r3
}
 80031a6:	bf00      	nop
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000874 	.word	0x20000874
 80031b4:	20000844 	.word	0x20000844

080031b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	089b      	lsrs	r3, r3, #2
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000844 	.word	0x20000844

080031dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	; 0x30
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06d      	beq.n	80032ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80031f4:	2300      	movs	r3, #0
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f8:	e008      	b.n	800320c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	3301      	adds	r3, #1
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003210:	429a      	cmp	r2, r3
 8003212:	d3f2      	bcc.n	80031fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8003214:	e000      	b.n	8003218 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003216:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d055      	beq.n	80032ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800321e:	f3ef 8311 	mrs	r3, BASEPRI
 8003222:	f04f 0120 	mov.w	r1, #32
 8003226:	f381 8811 	msr	BASEPRI, r1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	482a      	ldr	r0, [pc, #168]	; (80032d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800322e:	f7fe ff9a 	bl	8002166 <_PreparePacket>
 8003232:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	e00b      	b.n	800325a <SEGGER_SYSVIEW_SendModule+0x7e>
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	1c59      	adds	r1, r3, #1
 800324a:	6279      	str	r1, [r7, #36]	; 0x24
 800324c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	09db      	lsrs	r3, r3, #7
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	2b7f      	cmp	r3, #127	; 0x7f
 800325e:	d8f0      	bhi.n	8003242 <SEGGER_SYSVIEW_SendModule+0x66>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	627a      	str	r2, [r7, #36]	; 0x24
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e00b      	b.n	8003294 <SEGGER_SYSVIEW_SendModule+0xb8>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	61f9      	str	r1, [r7, #28]
 8003286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	09db      	lsrs	r3, r3, #7
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b7f      	cmp	r3, #127	; 0x7f
 8003298:	d8f0      	bhi.n	800327c <SEGGER_SYSVIEW_SendModule+0xa0>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	61fa      	str	r2, [r7, #28]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	4619      	mov	r1, r3
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7fe ff0a 	bl	80020cc <_EncodeStr>
 80032b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80032ba:	2216      	movs	r2, #22
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	6938      	ldr	r0, [r7, #16]
 80032c0:	f7ff f82a 	bl	8002318 <_SendPacket>
      RECORD_END();
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000086c 	.word	0x2000086c
 80032d8:	20000874 	.word	0x20000874

080032dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00f      	beq.n	800330a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f2      	bne.n	80032f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000086c 	.word	0x2000086c

08003318 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800331e:	f3ef 8311 	mrs	r3, BASEPRI
 8003322:	f04f 0120 	mov.w	r1, #32
 8003326:	f381 8811 	msr	BASEPRI, r1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	4817      	ldr	r0, [pc, #92]	; (800338c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800332e:	f7fe ff1a 	bl	8002166 <_PreparePacket>
 8003332:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e00b      	b.n	800335c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	6179      	str	r1, [r7, #20]
 800334e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	09db      	lsrs	r3, r3, #7
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b7f      	cmp	r3, #127	; 0x7f
 8003360:	d8f0      	bhi.n	8003344 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	617a      	str	r2, [r7, #20]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003372:	221b      	movs	r2, #27
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f7fe ffce 	bl	8002318 <_SendPacket>
  RECORD_END();
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f383 8811 	msr	BASEPRI, r3
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000874 	.word	0x20000874
 8003390:	20000870 	.word	0x20000870

08003394 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8003394:	b40f      	push	{r0, r1, r2, r3}
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	461a      	mov	r2, r3
 80033a6:	2100      	movs	r1, #0
 80033a8:	6938      	ldr	r0, [r7, #16]
 80033aa:	f7ff f889 	bl	80024c0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033b8:	b004      	add	sp, #16
 80033ba:	4770      	bx	lr

080033bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80033c4:	f3ef 8311 	mrs	r3, BASEPRI
 80033c8:	f04f 0120 	mov.w	r1, #32
 80033cc:	f381 8811 	msr	BASEPRI, r1
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	4827      	ldr	r0, [pc, #156]	; (8003470 <SEGGER_SYSVIEW_Warn+0xb4>)
 80033d4:	f7fe fec7 	bl	8002166 <_PreparePacket>
 80033d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	6938      	ldr	r0, [r7, #16]
 80033e0:	f7fe fe74 	bl	80020cc <_EncodeStr>
 80033e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	2301      	movs	r3, #1
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	e00b      	b.n	8003408 <SEGGER_SYSVIEW_Warn+0x4c>
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	6279      	str	r1, [r7, #36]	; 0x24
 80033fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	09db      	lsrs	r3, r3, #7
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	2b7f      	cmp	r3, #127	; 0x7f
 800340c:	d8f0      	bhi.n	80033f0 <SEGGER_SYSVIEW_Warn+0x34>
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	627a      	str	r2, [r7, #36]	; 0x24
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e00b      	b.n	8003440 <SEGGER_SYSVIEW_Warn+0x84>
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	61f9      	str	r1, [r7, #28]
 8003432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	09db      	lsrs	r3, r3, #7
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b7f      	cmp	r3, #127	; 0x7f
 8003444:	d8f0      	bhi.n	8003428 <SEGGER_SYSVIEW_Warn+0x6c>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	61fa      	str	r2, [r7, #28]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003456:	221a      	movs	r2, #26
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	6938      	ldr	r0, [r7, #16]
 800345c:	f7fe ff5c 	bl	8002318 <_SendPacket>
  RECORD_END();
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f383 8811 	msr	BASEPRI, r3
}
 8003466:	bf00      	nop
 8003468:	3728      	adds	r7, #40	; 0x28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000874 	.word	0x20000874

08003474 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003478:	4803      	ldr	r0, [pc, #12]	; (8003488 <_cbSendSystemDesc+0x14>)
 800347a:	f7ff fd61 	bl	8002f40 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800347e:	4803      	ldr	r0, [pc, #12]	; (800348c <_cbSendSystemDesc+0x18>)
 8003480:	f7ff fd5e 	bl	8002f40 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}
 8003488:	080071a4 	.word	0x080071a4
 800348c:	080071d8 	.word	0x080071d8

08003490 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800349e:	4a06      	ldr	r2, [pc, #24]	; (80034b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80034a0:	f7ff f8ce 	bl	8002640 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80034a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80034a8:	f7ff f908 	bl	80026bc <SEGGER_SYSVIEW_SetRAMBase>
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000000 	.word	0x20000000
 80034b4:	08003475 	.word	0x08003475
 80034b8:	080072f8 	.word	0x080072f8

080034bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80034bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034be:	b085      	sub	sp, #20
 80034c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	e048      	b.n	800355a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80034c8:	4928      	ldr	r1, [pc, #160]	; (800356c <_cbSendTaskList+0xb0>)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f002 fbbd 	bl	8005c58 <uxTaskGetStackHighWaterMark>
 80034de:	4923      	ldr	r1, [pc, #140]	; (800356c <_cbSendTaskList+0xb0>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3310      	adds	r3, #16
 80034ee:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80034f0:	491e      	ldr	r1, [pc, #120]	; (800356c <_cbSendTaskList+0xb0>)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	491a      	ldr	r1, [pc, #104]	; (800356c <_cbSendTaskList+0xb0>)
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3304      	adds	r3, #4
 8003510:	681c      	ldr	r4, [r3, #0]
 8003512:	4916      	ldr	r1, [pc, #88]	; (800356c <_cbSendTaskList+0xb0>)
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3308      	adds	r3, #8
 8003522:	681d      	ldr	r5, [r3, #0]
 8003524:	4911      	ldr	r1, [pc, #68]	; (800356c <_cbSendTaskList+0xb0>)
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	330c      	adds	r3, #12
 8003534:	681e      	ldr	r6, [r3, #0]
 8003536:	490d      	ldr	r1, [pc, #52]	; (800356c <_cbSendTaskList+0xb0>)
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	3310      	adds	r3, #16
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4633      	mov	r3, r6
 800354c:	462a      	mov	r2, r5
 800354e:	4621      	mov	r1, r4
 8003550:	f000 f8b4 	bl	80036bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3301      	adds	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <_cbSendTaskList+0xb4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d3b1      	bcc.n	80034c8 <_cbSendTaskList+0xc>
  }
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800356c:	20000958 	.word	0x20000958
 8003570:	200009f8 	.word	0x200009f8

08003574 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800357a:	f002 f855 	bl	8005628 <xTaskGetTickCountFromISR>
 800357e:	4603      	mov	r3, r0
 8003580:	f04f 0400 	mov.w	r4, #0
 8003584:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003588:	e9d7 5600 	ldrd	r5, r6, [r7]
 800358c:	462b      	mov	r3, r5
 800358e:	4634      	mov	r4, r6
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	0162      	lsls	r2, r4, #5
 800359a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800359e:	0159      	lsls	r1, r3, #5
 80035a0:	460b      	mov	r3, r1
 80035a2:	4614      	mov	r4, r2
 80035a4:	1b5b      	subs	r3, r3, r5
 80035a6:	eb64 0406 	sbc.w	r4, r4, r6
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	00a2      	lsls	r2, r4, #2
 80035b4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80035b8:	0099      	lsls	r1, r3, #2
 80035ba:	460b      	mov	r3, r1
 80035bc:	4614      	mov	r4, r2
 80035be:	195b      	adds	r3, r3, r5
 80035c0:	eb44 0406 	adc.w	r4, r4, r6
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	00e2      	lsls	r2, r4, #3
 80035ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035d2:	00d9      	lsls	r1, r3, #3
 80035d4:	460b      	mov	r3, r1
 80035d6:	4614      	mov	r4, r2
 80035d8:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80035dc:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	4621      	mov	r1, r4
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035ec <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80035fa:	2205      	movs	r2, #5
 80035fc:	492b      	ldr	r1, [pc, #172]	; (80036ac <SYSVIEW_AddTask+0xc0>)
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f003 fd4e 	bl	80070a0 <memcmp>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04b      	beq.n	80036a2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800360a:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b07      	cmp	r3, #7
 8003610:	d903      	bls.n	800361a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003612:	4828      	ldr	r0, [pc, #160]	; (80036b4 <SYSVIEW_AddTask+0xc8>)
 8003614:	f7ff fed2 	bl	80033bc <SEGGER_SYSVIEW_Warn>
    return;
 8003618:	e044      	b.n	80036a4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4926      	ldr	r1, [pc, #152]	; (80036b8 <SYSVIEW_AddTask+0xcc>)
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4921      	ldr	r1, [pc, #132]	; (80036b8 <SYSVIEW_AddTask+0xcc>)
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3304      	adds	r3, #4
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	491b      	ldr	r1, [pc, #108]	; (80036b8 <SYSVIEW_AddTask+0xcc>)
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3308      	adds	r3, #8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4916      	ldr	r1, [pc, #88]	; (80036b8 <SYSVIEW_AddTask+0xcc>)
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	330c      	adds	r3, #12
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4910      	ldr	r1, [pc, #64]	; (80036b8 <SYSVIEW_AddTask+0xcc>)
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3310      	adds	r3, #16
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <SYSVIEW_AddTask+0xc4>)
 800368e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f80e 	bl	80036bc <SYSVIEW_SendTaskInfo>
 80036a0:	e000      	b.n	80036a4 <SYSVIEW_AddTask+0xb8>
    return;
 80036a2:	bf00      	nop

}
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	080071e8 	.word	0x080071e8
 80036b0:	200009f8 	.word	0x200009f8
 80036b4:	080071f0 	.word	0x080071f0
 80036b8:	20000958 	.word	0x20000958

080036bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	2214      	movs	r2, #20
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f003 fcfe 	bl	80070d4 <memset>
  TaskInfo.TaskID     = TaskID;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fb2b 	bl	8002d4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80036f6:	bf00      	nop
 80036f8:	3728      	adds	r7, #40	; 0x28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003712:	f3ef 8305 	mrs	r3, IPSR
 8003716:	60bb      	str	r3, [r7, #8]
  return(result);
 8003718:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371e:	f3ef 8310 	mrs	r3, PRIMASK
 8003722:	607b      	str	r3, [r7, #4]
  return(result);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800372a:	f3ef 8311 	mrs	r3, BASEPRI
 800372e:	603b      	str	r3, [r7, #0]
  return(result);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <osKernelInitialize+0x3a>
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <osKernelInitialize+0x64>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d103      	bne.n	8003746 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800373e:	f06f 0305 	mvn.w	r3, #5
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e00c      	b.n	8003760 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <osKernelInitialize+0x64>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <osKernelInitialize+0x64>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e002      	b.n	8003760 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	200009fc 	.word	0x200009fc

08003774 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800377a:	f3ef 8305 	mrs	r3, IPSR
 800377e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003780:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8310 	mrs	r3, PRIMASK
 800378a:	607b      	str	r3, [r7, #4]
  return(result);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003792:	f3ef 8311 	mrs	r3, BASEPRI
 8003796:	603b      	str	r3, [r7, #0]
  return(result);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <osKernelStart+0x3a>
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <osKernelStart+0x68>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d103      	bne.n	80037ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80037a6:	f06f 0305 	mvn.w	r3, #5
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e010      	b.n	80037d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <osKernelStart+0x68>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d109      	bne.n	80037ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037b6:	f7ff ffa2 	bl	80036fe <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <osKernelStart+0x68>)
 80037bc:	2202      	movs	r2, #2
 80037be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037c0:	f001 fdfa 	bl	80053b8 <vTaskStartScheduler>
      stat = osOK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e002      	b.n	80037d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80037d0:	68fb      	ldr	r3, [r7, #12]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200009fc 	.word	0x200009fc

080037e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b090      	sub	sp, #64	; 0x40
 80037e4:	af04      	add	r7, sp, #16
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037f0:	f3ef 8305 	mrs	r3, IPSR
 80037f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80037f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f040 808f 	bne.w	800391c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003802:	61bb      	str	r3, [r7, #24]
  return(result);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800380a:	f3ef 8311 	mrs	r3, BASEPRI
 800380e:	617b      	str	r3, [r7, #20]
  return(result);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <osThreadNew+0x3e>
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <osThreadNew+0x148>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d07e      	beq.n	800391c <osThreadNew+0x13c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d07b      	beq.n	800391c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003828:	2318      	movs	r3, #24
 800382a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
 8003834:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d045      	beq.n	80038c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <osThreadNew+0x6a>
        name = attr->name;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <osThreadNew+0x90>
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	2b38      	cmp	r3, #56	; 0x38
 8003862:	d805      	bhi.n	8003870 <osThreadNew+0x90>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <osThreadNew+0x94>
        return (NULL);
 8003870:	2300      	movs	r3, #0
 8003872:	e054      	b.n	800391e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <osThreadNew+0xca>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b5b      	cmp	r3, #91	; 0x5b
 8003892:	d90a      	bls.n	80038aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003898:	2b00      	cmp	r3, #0
 800389a:	d006      	beq.n	80038aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <osThreadNew+0xca>
        mem = 1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	e010      	b.n	80038cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10c      	bne.n	80038cc <osThreadNew+0xec>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <osThreadNew+0xec>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <osThreadNew+0xec>
          mem = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	e001      	b.n	80038cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d110      	bne.n	80038f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038da:	9202      	str	r2, [sp, #8]
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f001 fb71 	bl	8004fd0 <xTaskCreateStatic>
 80038ee:	4603      	mov	r3, r0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e013      	b.n	800391c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d110      	bne.n	800391c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	f107 0310 	add.w	r3, r7, #16
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f001 fbb9 	bl	8005084 <xTaskCreate>
 8003912:	4603      	mov	r3, r0
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <osThreadNew+0x13c>
          hTask = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800391c:	693b      	ldr	r3, [r7, #16]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3730      	adds	r7, #48	; 0x30
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200009fc 	.word	0x200009fc

0800392c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003934:	f3ef 8305 	mrs	r3, IPSR
 8003938:	613b      	str	r3, [r7, #16]
  return(result);
 800393a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10f      	bne.n	8003960 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003940:	f3ef 8310 	mrs	r3, PRIMASK
 8003944:	60fb      	str	r3, [r7, #12]
  return(result);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800394c:	f3ef 8311 	mrs	r3, BASEPRI
 8003950:	60bb      	str	r3, [r7, #8]
  return(result);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <osDelay+0x3c>
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <osDelay+0x58>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d103      	bne.n	8003968 <osDelay+0x3c>
    stat = osErrorISR;
 8003960:	f06f 0305 	mvn.w	r3, #5
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e007      	b.n	8003978 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f001 fce8 	bl	8005348 <vTaskDelay>
    }
  }

  return (stat);
 8003978:	697b      	ldr	r3, [r7, #20]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200009fc 	.word	0x200009fc

08003988 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003998:	f3ef 8305 	mrs	r3, IPSR
 800399c:	61bb      	str	r3, [r7, #24]
  return(result);
 800399e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 8087 	bne.w	8003ab4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a6:	f3ef 8310 	mrs	r3, PRIMASK
 80039aa:	617b      	str	r3, [r7, #20]
  return(result);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039b2:	f3ef 8311 	mrs	r3, BASEPRI
 80039b6:	613b      	str	r3, [r7, #16]
  return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <osSemaphoreNew+0x3e>
 80039be:	4b40      	ldr	r3, [pc, #256]	; (8003ac0 <osSemaphoreNew+0x138>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d076      	beq.n	8003ab4 <osSemaphoreNew+0x12c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d073      	beq.n	8003ab4 <osSemaphoreNew+0x12c>
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d86f      	bhi.n	8003ab4 <osSemaphoreNew+0x12c>
    mem = -1;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
 80039d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d015      	beq.n	8003a0c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <osSemaphoreNew+0x6e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b4f      	cmp	r3, #79	; 0x4f
 80039ee:	d902      	bls.n	80039f6 <osSemaphoreNew+0x6e>
        mem = 1;
 80039f0:	2301      	movs	r3, #1
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	e00c      	b.n	8003a10 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d108      	bne.n	8003a10 <osSemaphoreNew+0x88>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <osSemaphoreNew+0x88>
          mem = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
 8003a0a:	e001      	b.n	8003a10 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d04d      	beq.n	8003ab4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d129      	bne.n	8003a72 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d10b      	bne.n	8003a3c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	2303      	movs	r3, #3
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	2001      	movs	r0, #1
 8003a34:	f000 fa54 	bl	8003ee0 <xQueueGenericCreateStatic>
 8003a38:	6278      	str	r0, [r7, #36]	; 0x24
 8003a3a:	e005      	b.n	8003a48 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	2100      	movs	r1, #0
 8003a40:	2001      	movs	r0, #1
 8003a42:	f000 fac0 	bl	8003fc6 <xQueueGenericCreate>
 8003a46:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d022      	beq.n	8003a94 <osSemaphoreNew+0x10c>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01f      	beq.n	8003a94 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003a54:	2300      	movs	r3, #0
 8003a56:	2200      	movs	r2, #0
 8003a58:	2100      	movs	r1, #0
 8003a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a5c:	f000 fb82 	bl	8004164 <xQueueGenericSend>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d016      	beq.n	8003a94 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8003a66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a68:	f001 f8d1 	bl	8004c0e <vQueueDelete>
            hSemaphore = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e010      	b.n	8003a94 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d108      	bne.n	8003a8a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fb08 	bl	8004096 <xQueueCreateCountingSemaphoreStatic>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
 8003a88:	e004      	b.n	8003a94 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fb37 	bl	8004100 <xQueueCreateCountingSemaphore>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <osSemaphoreNew+0x120>
          name = attr->name;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e001      	b.n	8003aac <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003aac:	69f9      	ldr	r1, [r7, #28]
 8003aae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab0:	f001 fa00 	bl	8004eb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3728      	adds	r7, #40	; 0x28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200009fc 	.word	0x200009fc

08003ac4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003adc:	f06f 0303 	mvn.w	r3, #3
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e04b      	b.n	8003b7c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae4:	f3ef 8305 	mrs	r3, IPSR
 8003ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af0:	f3ef 8310 	mrs	r3, PRIMASK
 8003af4:	613b      	str	r3, [r7, #16]
  return(result);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003afc:	f3ef 8311 	mrs	r3, BASEPRI
 8003b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d026      	beq.n	8003b56 <osSemaphoreAcquire+0x92>
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <osSemaphoreAcquire+0xc4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d122      	bne.n	8003b56 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003b16:	f06f 0303 	mvn.w	r3, #3
 8003b1a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003b1c:	e02d      	b.n	8003b7a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	461a      	mov	r2, r3
 8003b28:	2100      	movs	r1, #0
 8003b2a:	69b8      	ldr	r0, [r7, #24]
 8003b2c:	f000 ffd4 	bl	8004ad8 <xQueueReceiveFromISR>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d003      	beq.n	8003b3e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003b36:	f06f 0302 	mvn.w	r3, #2
 8003b3a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003b3c:	e01d      	b.n	8003b7a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01a      	beq.n	8003b7a <osSemaphoreAcquire+0xb6>
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <osSemaphoreAcquire+0xc8>)
 8003b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003b54:	e011      	b.n	8003b7a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	69b8      	ldr	r0, [r7, #24]
 8003b5a:	f000 fe7f 	bl	800485c <xQueueSemaphoreTake>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d00b      	beq.n	8003b7c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003b6a:	f06f 0301 	mvn.w	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	e004      	b.n	8003b7c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003b72:	f06f 0302 	mvn.w	r3, #2
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e000      	b.n	8003b7c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003b7a:	bf00      	nop
      }
    }
  }

  return (stat);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200009fc 	.word	0x200009fc
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003ba6:	f06f 0303 	mvn.w	r3, #3
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e03e      	b.n	8003c2c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bae:	f3ef 8305 	mrs	r3, IPSR
 8003bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8003bb4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbe:	613b      	str	r3, [r7, #16]
  return(result);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01e      	beq.n	8003c10 <osSemaphoreRelease+0x80>
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <osSemaphoreRelease+0xa8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d11a      	bne.n	8003c10 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	4619      	mov	r1, r3
 8003be4:	69b8      	ldr	r0, [r7, #24]
 8003be6:	f000 fc87 	bl	80044f8 <xQueueGiveFromISR>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d003      	beq.n	8003bf8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003bf0:	f06f 0302 	mvn.w	r3, #2
 8003bf4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003bf6:	e018      	b.n	8003c2a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d015      	beq.n	8003c2a <osSemaphoreRelease+0x9a>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <osSemaphoreRelease+0xac>)
 8003c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003c0e:	e00c      	b.n	8003c2a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c10:	2300      	movs	r3, #0
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	69b8      	ldr	r0, [r7, #24]
 8003c18:	f000 faa4 	bl	8004164 <xQueueGenericSend>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d004      	beq.n	8003c2c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003c22:	f06f 0302 	mvn.w	r3, #2
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	e000      	b.n	8003c2c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003c2a:	bf00      	nop
    }
  }

  return (stat);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200009fc 	.word	0x200009fc
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <vApplicationGetIdleTaskMemory+0x2c>)
 8003c50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <vApplicationGetIdleTaskMemory+0x30>)
 8003c56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000a00 	.word	0x20000a00
 8003c70:	20000a5c 	.word	0x20000a5c

08003c74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4a06      	ldr	r2, [pc, #24]	; (8003ca4 <vApplicationGetTimerTaskMemory+0x30>)
 8003c8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c92:	601a      	str	r2, [r3, #0]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	20000c5c 	.word	0x20000c5c
 8003ca4:	20000cb8 	.word	0x20000cb8

08003ca8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f103 0208 	add.w	r2, r3, #8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 0208 	add.w	r2, r3, #8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 0208 	add.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d103      	bne.n	8003d6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e00c      	b.n	8003d84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e002      	b.n	8003d78 <vListInsert+0x2e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d2f6      	bcs.n	8003d72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6852      	ldr	r2, [r2, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d103      	bne.n	8003df0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	1e5a      	subs	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	e7fe      	b.n	8003e36 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e38:	f002 fdd8 	bl	80069ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	68f9      	ldr	r1, [r7, #12]
 8003e46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	441a      	add	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	441a      	add	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	22ff      	movs	r2, #255	; 0xff
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	22ff      	movs	r2, #255	; 0xff
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d114      	bne.n	8003eb8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01a      	beq.n	8003ecc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3310      	adds	r3, #16
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 fd54 	bl	8005948 <xTaskRemoveFromEventList>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d012      	beq.n	8003ecc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <xQueueGenericReset+0xcc>)
 8003ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	e009      	b.n	8003ecc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3310      	adds	r3, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fef3 	bl	8003ca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3324      	adds	r3, #36	; 0x24
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff feee 	bl	8003ca8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ecc:	f002 fdbc 	bl	8006a48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ed0:	2301      	movs	r3, #1
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	; 0x38
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <xQueueGenericCreateStatic+0x28>
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f06:	e7fe      	b.n	8003f06 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <xQueueGenericCreateStatic+0x42>
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	e7fe      	b.n	8003f20 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <xQueueGenericCreateStatic+0x4e>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <xQueueGenericCreateStatic+0x52>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueGenericCreateStatic+0x54>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <xQueueGenericCreateStatic+0x6c>
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	e7fe      	b.n	8003f4a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <xQueueGenericCreateStatic+0x78>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <xQueueGenericCreateStatic+0x7c>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <xQueueGenericCreateStatic+0x7e>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <xQueueGenericCreateStatic+0x96>
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e7fe      	b.n	8003f74 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f76:	2350      	movs	r3, #80	; 0x50
 8003f78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b50      	cmp	r3, #80	; 0x50
 8003f7e:	d009      	beq.n	8003f94 <xQueueGenericCreateStatic+0xb4>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	e7fe      	b.n	8003f92 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fa8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f844 	bl	8004044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3730      	adds	r7, #48	; 0x30
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b08a      	sub	sp, #40	; 0x28
 8003fca:	af02      	add	r7, sp, #8
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <xQueueGenericCreate+0x28>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e004      	b.n	8004004 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3350      	adds	r3, #80	; 0x50
 8004008:	4618      	mov	r0, r3
 800400a:	f002 fe4f 	bl	8006cac <pvPortMalloc>
 800400e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d011      	beq.n	800403a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3350      	adds	r3, #80	; 0x50
 800401e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004028:	79fa      	ldrb	r2, [r7, #7]
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f805 	bl	8004044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800403a:	69bb      	ldr	r3, [r7, #24]
	}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d103      	bne.n	8004060 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e002      	b.n	8004066 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004072:	2101      	movs	r1, #1
 8004074:	69b8      	ldr	r0, [r7, #24]
 8004076:	f7ff fecb 	bl	8003e10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	2073      	movs	r0, #115	; 0x73
 800408a:	f7fe fbdb 	bl	8002844 <SEGGER_SYSVIEW_RecordU32x3>
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004096:	b580      	push	{r7, lr}
 8004098:	b08a      	sub	sp, #40	; 0x28
 800409a:	af02      	add	r7, sp, #8
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <xQueueCreateCountingSemaphoreStatic+0x26>
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e7fe      	b.n	80040ba <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d909      	bls.n	80040d8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e7fe      	b.n	80040d6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80040d8:	2302      	movs	r3, #2
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	2100      	movs	r1, #0
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fefc 	bl	8003ee0 <xQueueGenericCreateStatic>
 80040e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80040f6:	69fb      	ldr	r3, [r7, #28]
	}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <xQueueCreateCountingSemaphore+0x24>
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	e7fe      	b.n	8004122 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d909      	bls.n	8004140 <xQueueCreateCountingSemaphore+0x40>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e7fe      	b.n	800413e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004140:	2202      	movs	r2, #2
 8004142:	2100      	movs	r1, #0
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff3e 	bl	8003fc6 <xQueueGenericCreate>
 800414a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004158:	697b      	ldr	r3, [r7, #20]
	}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b090      	sub	sp, #64	; 0x40
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <xQueueGenericSend+0x30>
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	e7fe      	b.n	8004192 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <xQueueGenericSend+0x3e>
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <xQueueGenericSend+0x42>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <xQueueGenericSend+0x44>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <xQueueGenericSend+0x5c>
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
 80041be:	e7fe      	b.n	80041be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d103      	bne.n	80041ce <xQueueGenericSend+0x6a>
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <xQueueGenericSend+0x6e>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <xQueueGenericSend+0x70>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <xQueueGenericSend+0x88>
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	e7fe      	b.n	80041ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ec:	f001 fd9e 	bl	8005d2c <xTaskGetSchedulerState>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <xQueueGenericSend+0x98>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <xQueueGenericSend+0x9c>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <xQueueGenericSend+0x9e>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <xQueueGenericSend+0xb6>
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e7fe      	b.n	8004218 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800421a:	f002 fbe7 	bl	80069ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <xQueueGenericSend+0xcc>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d136      	bne.n	800429e <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe ffc0 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	460b      	mov	r3, r1
 8004242:	4601      	mov	r1, r0
 8004244:	205a      	movs	r0, #90	; 0x5a
 8004246:	f7fe fb73 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004250:	f000 fd20 	bl	8004c94 <prvCopyDataToQueue>
 8004254:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d010      	beq.n	8004280 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	3324      	adds	r3, #36	; 0x24
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fb70 	bl	8005948 <xTaskRemoveFromEventList>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d013      	beq.n	8004296 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <xQueueGenericSend+0x240>)
 8004270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	e00a      	b.n	8004296 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <xQueueGenericSend+0x240>)
 8004288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004296:	f002 fbd7 	bl	8006a48 <vPortExitCritical>
				return pdPASS;
 800429a:	2301      	movs	r3, #1
 800429c:	e07d      	b.n	800439a <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d110      	bne.n	80042c6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042a4:	f002 fbd0 	bl	8006a48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe ff84 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	460b      	mov	r3, r1
 80042ba:	4601      	mov	r1, r0
 80042bc:	205a      	movs	r0, #90	; 0x5a
 80042be:	f7fe fb37 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e069      	b.n	800439a <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fb9f 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042da:	f002 fbb5 	bl	8006a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042de:	f001 f8e5 	bl	80054ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042e2:	f002 fb83 	bl	80069ec <vPortEnterCritical>
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d103      	bne.n	80042fc <xQueueGenericSend+0x198>
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004302:	b25b      	sxtb	r3, r3
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d103      	bne.n	8004312 <xQueueGenericSend+0x1ae>
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004312:	f002 fb99 	bl	8006a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004316:	1d3a      	adds	r2, r7, #4
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f001 fb8e 	bl	8005a40 <xTaskCheckForTimeOut>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d124      	bne.n	8004374 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800432a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800432c:	f000 fdaa 	bl	8004e84 <prvIsQueueFull>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d018      	beq.n	8004368 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	3310      	adds	r3, #16
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f001 fab0 	bl	80058a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004346:	f000 fd35 	bl	8004db4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800434a:	f001 f8bd 	bl	80054c8 <xTaskResumeAll>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	f47f af62 	bne.w	800421a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <xQueueGenericSend+0x240>)
 8004358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	e758      	b.n	800421a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800436a:	f000 fd23 	bl	8004db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800436e:	f001 f8ab 	bl	80054c8 <xTaskResumeAll>
 8004372:	e752      	b.n	800421a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004376:	f000 fd1d 	bl	8004db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800437a:	f001 f8a5 	bl	80054c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe ff19 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	460b      	mov	r3, r1
 8004390:	4601      	mov	r1, r0
 8004392:	205a      	movs	r0, #90	; 0x5a
 8004394:	f7fe facc 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8004398:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800439a:	4618      	mov	r0, r3
 800439c:	3738      	adds	r7, #56	; 0x38
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08e      	sub	sp, #56	; 0x38
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <xQueueGenericSendFromISR+0x2c>
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e7fe      	b.n	80043d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <xQueueGenericSendFromISR+0x3a>
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <xQueueGenericSendFromISR+0x3e>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <xQueueGenericSendFromISR+0x40>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <xQueueGenericSendFromISR+0x58>
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	e7fe      	b.n	80043fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d103      	bne.n	800440e <xQueueGenericSendFromISR+0x66>
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <xQueueGenericSendFromISR+0x6a>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <xQueueGenericSendFromISR+0x6c>
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <xQueueGenericSendFromISR+0x84>
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e7fe      	b.n	800442a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800442c:	f002 fbba 	bl	8006ba4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004430:	f3ef 8211 	mrs	r2, BASEPRI
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	61ba      	str	r2, [r7, #24]
 8004446:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004448:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <xQueueGenericSendFromISR+0xb6>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d136      	bne.n	80044cc <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fea4 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004470:	4601      	mov	r1, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	461a      	mov	r2, r3
 8004476:	2060      	movs	r0, #96	; 0x60
 8004478:	f7fe f98a 	bl	8002790 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004482:	f000 fc07 	bl	8004c94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004486:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d112      	bne.n	80044b6 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d016      	beq.n	80044c6 <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	4618      	mov	r0, r3
 800449e:	f001 fa53 	bl	8005948 <xTaskRemoveFromEventList>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e007      	b.n	80044c6 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044ba:	3301      	adds	r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	b25a      	sxtb	r2, r3
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044c6:	2301      	movs	r3, #1
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80044ca:	e00b      	b.n	80044e4 <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fe72 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 80044d4:	4601      	mov	r1, r0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	461a      	mov	r2, r3
 80044da:	2060      	movs	r0, #96	; 0x60
 80044dc:	f7fe f958 	bl	8002790 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3738      	adds	r7, #56	; 0x38
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08e      	sub	sp, #56	; 0x38
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <xQueueGiveFromISR+0x28>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	e7fe      	b.n	800451e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <xQueueGiveFromISR+0x44>
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e7fe      	b.n	800453a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <xQueueGiveFromISR+0x54>
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <xQueueGiveFromISR+0x58>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <xQueueGiveFromISR+0x5a>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <xQueueGiveFromISR+0x72>
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e7fe      	b.n	8004568 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800456a:	f002 fb1b 	bl	8006ba4 <vPortValidateInterruptPriority>
	__asm volatile
 800456e:	f3ef 8211 	mrs	r2, BASEPRI
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	617a      	str	r2, [r7, #20]
 8004584:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004586:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004596:	429a      	cmp	r2, r3
 8004598:	d235      	bcs.n	8004606 <xQueueGiveFromISR+0x10e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fe06 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 80045ac:	4601      	mov	r1, r0
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	2060      	movs	r0, #96	; 0x60
 80045b4:	f7fe f8ec 	bl	8002790 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d112      	bne.n	80045f0 <xQueueGiveFromISR+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	3324      	adds	r3, #36	; 0x24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f9b6 	bl	8005948 <xTaskRemoveFromEventList>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e007      	b.n	8004600 <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f4:	3301      	adds	r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	b25a      	sxtb	r2, r3
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004600:	2301      	movs	r3, #1
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
 8004604:	e00b      	b.n	800461e <xQueueGiveFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fdd5 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 800460e:	4601      	mov	r1, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	2060      	movs	r0, #96	; 0x60
 8004616:	f7fe f8bb 	bl	8002790 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800462a:	4618      	mov	r0, r3
 800462c:	3738      	adds	r7, #56	; 0x38
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b08f      	sub	sp, #60	; 0x3c
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <xQueueReceive+0x2e>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	e7fe      	b.n	8004660 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <xQueueReceive+0x3c>
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <xQueueReceive+0x40>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <xQueueReceive+0x42>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <xQueueReceive+0x5a>
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e7fe      	b.n	800468c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800468e:	f001 fb4d 	bl	8005d2c <xTaskGetSchedulerState>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <xQueueReceive+0x6a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <xQueueReceive+0x6e>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <xQueueReceive+0x70>
 80046a2:	2300      	movs	r3, #0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <xQueueReceive+0x88>
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e7fe      	b.n	80046ba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046bc:	f002 f996 	bl	80069ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d031      	beq.n	8004730 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d0:	f000 fb4a 	bl	8004d68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fd6e 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 80046dc:	4604      	mov	r4, r0
 80046de:	2000      	movs	r0, #0
 80046e0:	f7fe fd6a 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 80046e4:	4601      	mov	r1, r0
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	2301      	movs	r3, #1
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	460a      	mov	r2, r1
 80046f0:	4621      	mov	r1, r4
 80046f2:	205c      	movs	r0, #92	; 0x5c
 80046f4:	f7fe f91c 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00f      	beq.n	8004728 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	3310      	adds	r3, #16
 800470c:	4618      	mov	r0, r3
 800470e:	f001 f91b 	bl	8005948 <xTaskRemoveFromEventList>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004718:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <xQueueReceive+0x224>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004728:	f002 f98e 	bl	8006a48 <vPortExitCritical>
				return pdPASS;
 800472c:	2301      	movs	r3, #1
 800472e:	e08e      	b.n	800484e <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d115      	bne.n	8004762 <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004736:	f002 f987 	bl	8006a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fd3b 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004742:	4604      	mov	r4, r0
 8004744:	2000      	movs	r0, #0
 8004746:	f7fe fd37 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 800474a:	4601      	mov	r1, r0
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	2301      	movs	r3, #1
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	460a      	mov	r2, r1
 8004756:	4621      	mov	r1, r4
 8004758:	205c      	movs	r0, #92	; 0x5c
 800475a:	f7fe f8e9 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800475e:	2300      	movs	r3, #0
 8004760:	e075      	b.n	800484e <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	4618      	mov	r0, r3
 800476e:	f001 f951 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004772:	2301      	movs	r3, #1
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004776:	f002 f967 	bl	8006a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800477a:	f000 fe97 	bl	80054ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800477e:	f002 f935 	bl	80069ec <vPortEnterCritical>
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004788:	b25b      	sxtb	r3, r3
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d103      	bne.n	8004798 <xQueueReceive+0x164>
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800479e:	b25b      	sxtb	r3, r3
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d103      	bne.n	80047ae <xQueueReceive+0x17a>
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ae:	f002 f94b 	bl	8006a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047b2:	1d3a      	adds	r2, r7, #4
 80047b4:	f107 0310 	add.w	r3, r7, #16
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 f940 	bl	8005a40 <xTaskCheckForTimeOut>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d124      	bne.n	8004810 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c8:	f000 fb46 	bl	8004e58 <prvIsQueueEmpty>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d018      	beq.n	8004804 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	3324      	adds	r3, #36	; 0x24
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 f862 	bl	80058a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e2:	f000 fae7 	bl	8004db4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047e6:	f000 fe6f 	bl	80054c8 <xTaskResumeAll>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f af65 	bne.w	80046bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80047f2:	4b19      	ldr	r3, [pc, #100]	; (8004858 <xQueueReceive+0x224>)
 80047f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	e75b      	b.n	80046bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004806:	f000 fad5 	bl	8004db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800480a:	f000 fe5d 	bl	80054c8 <xTaskResumeAll>
 800480e:	e755      	b.n	80046bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004812:	f000 facf 	bl	8004db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004816:	f000 fe57 	bl	80054c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800481a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481c:	f000 fb1c 	bl	8004e58 <prvIsQueueEmpty>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	f43f af4a 	beq.w	80046bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fcc4 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004830:	4604      	mov	r4, r0
 8004832:	2000      	movs	r0, #0
 8004834:	f7fe fcc0 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004838:	4601      	mov	r1, r0
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	2301      	movs	r3, #1
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	460a      	mov	r2, r1
 8004844:	4621      	mov	r1, r4
 8004846:	205c      	movs	r0, #92	; 0x5c
 8004848:	f7fe f872 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800484c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800484e:	4618      	mov	r0, r3
 8004850:	3734      	adds	r7, #52	; 0x34
 8004852:	46bd      	mov	sp, r7
 8004854:	bd90      	pop	{r4, r7, pc}
 8004856:	bf00      	nop
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b091      	sub	sp, #68	; 0x44
 8004860:	af02      	add	r7, sp, #8
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <xQueueSemaphoreTake+0x30>
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	e7fe      	b.n	800488a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <xQueueSemaphoreTake+0x4c>
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	e7fe      	b.n	80048a6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048a8:	f001 fa40 	bl	8005d2c <xTaskGetSchedulerState>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <xQueueSemaphoreTake+0x5c>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <xQueueSemaphoreTake+0x60>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <xQueueSemaphoreTake+0x62>
 80048bc:	2300      	movs	r3, #0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <xQueueSemaphoreTake+0x7a>
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	e7fe      	b.n	80048d4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048d6:	f002 f889 	bl	80069ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d036      	beq.n	8004954 <xQueueSemaphoreTake+0xf8>
			{
				traceQUEUE_RECEIVE( pxQueue );
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe fc65 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 80048ee:	4604      	mov	r4, r0
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fe fc61 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 80048f6:	4601      	mov	r1, r0
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	2301      	movs	r3, #1
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	460a      	mov	r2, r1
 8004902:	4621      	mov	r1, r4
 8004904:	205c      	movs	r0, #92	; 0x5c
 8004906:	f7fe f813 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	1e5a      	subs	r2, r3, #1
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <xQueueSemaphoreTake+0xc8>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800491a:	f001 fb93 	bl	8006044 <pvTaskIncrementMutexHeldCount>
 800491e:	4602      	mov	r2, r0
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00f      	beq.n	800494c <xQueueSemaphoreTake+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	3310      	adds	r3, #16
 8004930:	4618      	mov	r0, r3
 8004932:	f001 f809 	bl	8005948 <xTaskRemoveFromEventList>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <xQueueSemaphoreTake+0xf0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800493c:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <xQueueSemaphoreTake+0x278>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800494c:	f002 f87c 	bl	8006a48 <vPortExitCritical>
				return pdPASS;
 8004950:	2301      	movs	r3, #1
 8004952:	e0ba      	b.n	8004aca <xQueueSemaphoreTake+0x26e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d122      	bne.n	80049a0 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <xQueueSemaphoreTake+0x118>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e7fe      	b.n	8004972 <xQueueSemaphoreTake+0x116>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004974:	f002 f868 	bl	8006a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fc1c 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004980:	4604      	mov	r4, r0
 8004982:	2000      	movs	r0, #0
 8004984:	f7fe fc18 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004988:	4601      	mov	r1, r0
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	2301      	movs	r3, #1
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	460a      	mov	r2, r1
 8004994:	4621      	mov	r1, r4
 8004996:	205c      	movs	r0, #92	; 0x5c
 8004998:	f7fd ffca 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800499c:	2300      	movs	r3, #0
 800499e:	e094      	b.n	8004aca <xQueueSemaphoreTake+0x26e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049a6:	f107 030c 	add.w	r3, r7, #12
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f832 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049b4:	f002 f848 	bl	8006a48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049b8:	f000 fd78 	bl	80054ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049bc:	f002 f816 	bl	80069ec <vPortEnterCritical>
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d103      	bne.n	80049d6 <xQueueSemaphoreTake+0x17a>
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049dc:	b25b      	sxtb	r3, r3
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d103      	bne.n	80049ec <xQueueSemaphoreTake+0x190>
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ec:	f002 f82c 	bl	8006a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049f0:	463a      	mov	r2, r7
 80049f2:	f107 030c 	add.w	r3, r7, #12
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f821 	bl	8005a40 <xTaskCheckForTimeOut>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d132      	bne.n	8004a6a <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a06:	f000 fa27 	bl	8004e58 <prvIsQueueEmpty>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d026      	beq.n	8004a5e <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8004a18:	f001 ffe8 	bl	80069ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f9a1 	bl	8005d68 <xTaskPriorityInherit>
 8004a26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004a28:	f002 f80e 	bl	8006a48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 ff35 	bl	80058a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a3c:	f000 f9ba 	bl	8004db4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a40:	f000 fd42 	bl	80054c8 <xTaskResumeAll>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f47f af45 	bne.w	80048d6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <xQueueSemaphoreTake+0x278>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	e73b      	b.n	80048d6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a60:	f000 f9a8 	bl	8004db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a64:	f000 fd30 	bl	80054c8 <xTaskResumeAll>
 8004a68:	e735      	b.n	80048d6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a6c:	f000 f9a2 	bl	8004db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a70:	f000 fd2a 	bl	80054c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a76:	f000 f9ef 	bl	8004e58 <prvIsQueueEmpty>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f43f af2a 	beq.w	80048d6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8004a88:	f001 ffb0 	bl	80069ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a8e:	f000 f8e9 	bl	8004c64 <prvGetDisinheritPriorityAfterTimeout>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fa4a 	bl	8005f34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004aa0:	f001 ffd2 	bl	8006a48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fb86 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004aac:	4604      	mov	r4, r0
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f7fe fb82 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004ab4:	4601      	mov	r1, r0
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	460a      	mov	r2, r1
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	205c      	movs	r0, #92	; 0x5c
 8004ac4:	f7fd ff34 	bl	8002930 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004ac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	373c      	adds	r7, #60	; 0x3c
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b08f      	sub	sp, #60	; 0x3c
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <xQueueReceiveFromISR+0x2a>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	e7fe      	b.n	8004b00 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <xQueueReceiveFromISR+0x38>
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <xQueueReceiveFromISR+0x3c>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <xQueueReceiveFromISR+0x3e>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <xQueueReceiveFromISR+0x56>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	e7fe      	b.n	8004b2c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b2e:	f002 f839 	bl	8006ba4 <vPortValidateInterruptPriority>
	__asm volatile
 8004b32:	f3ef 8211 	mrs	r2, BASEPRI
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	61ba      	str	r2, [r7, #24]
 8004b48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004b4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03e      	beq.n	8004bd8 <xQueueReceiveFromISR+0x100>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fb26 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fb21 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	2062      	movs	r0, #98	; 0x62
 8004b7e:	f7fd fe61 	bl	8002844 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b86:	f000 f8ef 	bl	8004d68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	1e5a      	subs	r2, r3, #1
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d112      	bne.n	8004bc2 <xQueueReceiveFromISR+0xea>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d016      	beq.n	8004bd2 <xQueueReceiveFromISR+0xfa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	3310      	adds	r3, #16
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fecd 	bl	8005948 <xTaskRemoveFromEventList>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <xQueueReceiveFromISR+0xfa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <xQueueReceiveFromISR+0xfa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e007      	b.n	8004bd2 <xQueueReceiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	b25a      	sxtb	r2, r3
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd6:	e010      	b.n	8004bfa <xQueueReceiveFromISR+0x122>
		}
		else
		{
			xReturn = pdFAIL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe faea 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004be4:	4604      	mov	r4, r0
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fae5 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	2062      	movs	r0, #98	; 0x62
 8004bf6:	f7fd fe25 	bl	8002844 <SEGGER_SYSVIEW_RecordU32x3>
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	373c      	adds	r7, #60	; 0x3c
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}

08004c0e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <vQueueDelete+0x26>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	e7fe      	b.n	8004c32 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fabe 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4619      	mov	r1, r3
 8004c40:	205f      	movs	r0, #95	; 0x5f
 8004c42:	f7fd fd69 	bl	8002718 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f964 	bl	8004f14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <vQueueDelete+0x4e>
		{
			vPortFree( pxQueue );
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f002 f8ea 	bl	8006e30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e001      	b.n	8004c86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c86:	68fb      	ldr	r3, [r7, #12]
	}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14d      	bne.n	8004d56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f8c4 	bl	8005e4c <xTaskPriorityDisinherit>
 8004cc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	e043      	b.n	8004d56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d119      	bne.n	8004d08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6858      	ldr	r0, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	f002 f9ed 	bl	80070be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d32b      	bcc.n	8004d56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e026      	b.n	8004d56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68d8      	ldr	r0, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	461a      	mov	r2, r3
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	f002 f9d3 	bl	80070be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	425b      	negs	r3, r3
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d207      	bcs.n	8004d44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d105      	bne.n	8004d56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d5e:	697b      	ldr	r3, [r7, #20]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	441a      	add	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d303      	bcc.n	8004d9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68d9      	ldr	r1, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	461a      	mov	r2, r3
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f002 f989 	bl	80070be <memcpy>
	}
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dbc:	f001 fe16 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dc8:	e011      	b.n	8004dee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d012      	beq.n	8004df8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3324      	adds	r3, #36	; 0x24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fdb6 	bl	8005948 <xTaskRemoveFromEventList>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004de2:	f000 fe8d 	bl	8005b00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dce9      	bgt.n	8004dca <prvUnlockQueue+0x16>
 8004df6:	e000      	b.n	8004dfa <prvUnlockQueue+0x46>
					break;
 8004df8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	22ff      	movs	r2, #255	; 0xff
 8004dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e02:	f001 fe21 	bl	8006a48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e06:	f001 fdf1 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e12:	e011      	b.n	8004e38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3310      	adds	r3, #16
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fd91 	bl	8005948 <xTaskRemoveFromEventList>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e2c:	f000 fe68 	bl	8005b00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e30:	7bbb      	ldrb	r3, [r7, #14]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dce9      	bgt.n	8004e14 <prvUnlockQueue+0x60>
 8004e40:	e000      	b.n	8004e44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	22ff      	movs	r2, #255	; 0xff
 8004e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e4c:	f001 fdfc 	bl	8006a48 <vPortExitCritical>
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e60:	f001 fdc4 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e001      	b.n	8004e76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e76:	f001 fde7 	bl	8006a48 <vPortExitCritical>

	return xReturn;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e8c:	f001 fdae 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d102      	bne.n	8004ea2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e001      	b.n	8004ea6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ea6:	f001 fdcf 	bl	8006a48 <vPortExitCritical>

	return xReturn;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e01e      	b.n	8004f02 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ec4:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <vQueueAddToRegistry+0x5c>)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d115      	bne.n	8004efc <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ed0:	490f      	ldr	r1, [pc, #60]	; (8004f10 <vQueueAddToRegistry+0x5c>)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004eda:	4a0d      	ldr	r2, [pc, #52]	; (8004f10 <vQueueAddToRegistry+0x5c>)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe f965 	bl	80031b8 <SEGGER_SYSVIEW_ShrinkId>
 8004eee:	4601      	mov	r1, r0
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2071      	movs	r0, #113	; 0x71
 8004ef6:	f7fd fc4b 	bl	8002790 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8004efa:	e005      	b.n	8004f08 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b07      	cmp	r3, #7
 8004f06:	d9dd      	bls.n	8004ec4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20005908 	.word	0x20005908

08004f14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e016      	b.n	8004f50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004f22:	4a10      	ldr	r2, [pc, #64]	; (8004f64 <vQueueUnregisterQueue+0x50>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4413      	add	r3, r2
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d10b      	bne.n	8004f4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <vQueueUnregisterQueue+0x50>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2100      	movs	r1, #0
 8004f38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004f3c:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <vQueueUnregisterQueue+0x50>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4413      	add	r3, r2
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]
				break;
 8004f48:	e005      	b.n	8004f56 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b07      	cmp	r3, #7
 8004f54:	d9e5      	bls.n	8004f22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20005908 	.word	0x20005908

08004f68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f78:	f001 fd38 	bl	80069ec <vPortEnterCritical>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d103      	bne.n	8004f92 <vQueueWaitForMessageRestricted+0x2a>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d103      	bne.n	8004fa8 <vQueueWaitForMessageRestricted+0x40>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa8:	f001 fd4e 	bl	8006a48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3324      	adds	r3, #36	; 0x24
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fc95 	bl	80058ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f7ff fef6 	bl	8004db4 <prvUnlockQueue>
	}
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <xTaskCreateStatic+0x28>
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	e7fe      	b.n	8004ff6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <xTaskCreateStatic+0x42>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	e7fe      	b.n	8005010 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005012:	235c      	movs	r3, #92	; 0x5c
 8005014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b5c      	cmp	r3, #92	; 0x5c
 800501a:	d009      	beq.n	8005030 <xTaskCreateStatic+0x60>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e7fe      	b.n	800502e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01e      	beq.n	8005076 <xTaskCreateStatic+0xa6>
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01b      	beq.n	8005076 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005046:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005050:	2300      	movs	r3, #0
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	9302      	str	r3, [sp, #8]
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f850 	bl	800510e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800506e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005070:	f000 f8dc 	bl	800522c <prvAddNewTaskToReadyList>
 8005074:	e001      	b.n	800507a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800507a:	697b      	ldr	r3, [r7, #20]
	}
 800507c:	4618      	mov	r0, r3
 800507e:	3728      	adds	r7, #40	; 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08c      	sub	sp, #48	; 0x30
 8005088:	af04      	add	r7, sp, #16
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fe07 	bl	8006cac <pvPortMalloc>
 800509e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050a6:	205c      	movs	r0, #92	; 0x5c
 80050a8:	f001 fe00 	bl	8006cac <pvPortMalloc>
 80050ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
 80050ba:	e005      	b.n	80050c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050bc:	6978      	ldr	r0, [r7, #20]
 80050be:	f001 feb7 	bl	8006e30 <vPortFree>
 80050c2:	e001      	b.n	80050c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d017      	beq.n	80050fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	2300      	movs	r3, #0
 80050da:	9303      	str	r3, [sp, #12]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	9302      	str	r3, [sp, #8]
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f80e 	bl	800510e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050f2:	69f8      	ldr	r0, [r7, #28]
 80050f4:	f000 f89a 	bl	800522c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050f8:	2301      	movs	r3, #1
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	e002      	b.n	8005104 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005104:	69bb      	ldr	r3, [r7, #24]
	}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b088      	sub	sp, #32
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	461a      	mov	r2, r3
 8005126:	21a5      	movs	r1, #165	; 0xa5
 8005128:	f001 ffd4 	bl	80070d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005136:	3b01      	subs	r3, #1
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <prvInitialiseNewTask+0x56>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e7fe      	b.n	8005162 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01f      	beq.n	80051aa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e012      	b.n	8005196 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	7819      	ldrb	r1, [r3, #0]
 8005178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	3334      	adds	r3, #52	; 0x34
 8005180:	460a      	mov	r2, r1
 8005182:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d006      	beq.n	800519e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b0f      	cmp	r3, #15
 800519a:	d9e9      	bls.n	8005170 <prvInitialiseNewTask+0x62>
 800519c:	e000      	b.n	80051a0 <prvInitialiseNewTask+0x92>
			{
				break;
 800519e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a8:	e003      	b.n	80051b2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	2b37      	cmp	r3, #55	; 0x37
 80051b6:	d901      	bls.n	80051bc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051b8:	2337      	movs	r3, #55	; 0x37
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	3304      	adds	r3, #4
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fd88 	bl	8003ce8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	3318      	adds	r3, #24
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fd83 	bl	8003ce8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	2200      	movs	r2, #0
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	68f9      	ldr	r1, [r7, #12]
 800520a:	69b8      	ldr	r0, [r7, #24]
 800520c:	f001 fac8 	bl	80067a0 <pxPortInitialiseStack>
 8005210:	4602      	mov	r2, r0
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005222:	bf00      	nop
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800522c:	b5b0      	push	{r4, r5, r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af02      	add	r7, sp, #8
 8005232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005234:	f001 fbda 	bl	80069ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005238:	4b3c      	ldr	r3, [pc, #240]	; (800532c <prvAddNewTaskToReadyList+0x100>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	4a3b      	ldr	r2, [pc, #236]	; (800532c <prvAddNewTaskToReadyList+0x100>)
 8005240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005242:	4b3b      	ldr	r3, [pc, #236]	; (8005330 <prvAddNewTaskToReadyList+0x104>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800524a:	4a39      	ldr	r2, [pc, #228]	; (8005330 <prvAddNewTaskToReadyList+0x104>)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005250:	4b36      	ldr	r3, [pc, #216]	; (800532c <prvAddNewTaskToReadyList+0x100>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d110      	bne.n	800527a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005258:	f000 fc76 	bl	8005b48 <prvInitialiseTaskLists>
 800525c:	e00d      	b.n	800527a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800525e:	4b35      	ldr	r3, [pc, #212]	; (8005334 <prvAddNewTaskToReadyList+0x108>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005266:	4b32      	ldr	r3, [pc, #200]	; (8005330 <prvAddNewTaskToReadyList+0x104>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	429a      	cmp	r2, r3
 8005272:	d802      	bhi.n	800527a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005274:	4a2e      	ldr	r2, [pc, #184]	; (8005330 <prvAddNewTaskToReadyList+0x104>)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800527a:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <prvAddNewTaskToReadyList+0x10c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <prvAddNewTaskToReadyList+0x10c>)
 8005282:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <prvAddNewTaskToReadyList+0x10c>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <prvAddNewTaskToReadyList+0x94>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd fec3 	bl	8003020 <SEGGER_SYSVIEW_OnTaskCreate>
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	461d      	mov	r5, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461c      	mov	r4, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	1ae3      	subs	r3, r4, r3
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	462b      	mov	r3, r5
 80052bc:	f7fe f996 	bl	80035ec <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd ff34 	bl	8003130 <SEGGER_SYSVIEW_OnTaskStartReady>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <prvAddNewTaskToReadyList+0x110>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d903      	bls.n	80052dc <prvAddNewTaskToReadyList+0xb0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	4a18      	ldr	r2, [pc, #96]	; (800533c <prvAddNewTaskToReadyList+0x110>)
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a15      	ldr	r2, [pc, #84]	; (8005340 <prvAddNewTaskToReadyList+0x114>)
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f7fe fd05 	bl	8003d02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052f8:	f001 fba6 	bl	8006a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <prvAddNewTaskToReadyList+0x108>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <prvAddNewTaskToReadyList+0x104>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	429a      	cmp	r2, r3
 8005310:	d207      	bcs.n	8005322 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <prvAddNewTaskToReadyList+0x118>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bdb0      	pop	{r4, r5, r7, pc}
 800532a:	bf00      	nop
 800532c:	2000158c 	.word	0x2000158c
 8005330:	200010b8 	.word	0x200010b8
 8005334:	20001598 	.word	0x20001598
 8005338:	200015a8 	.word	0x200015a8
 800533c:	20001594 	.word	0x20001594
 8005340:	200010bc 	.word	0x200010bc
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01a      	beq.n	8005390 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <vTaskDelay+0x68>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <vTaskDelay+0x2e>
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	e7fe      	b.n	8005374 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005376:	f000 f899 	bl	80054ac <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	2023      	movs	r0, #35	; 0x23
 800537e:	f7fd f9cb 	bl	8002718 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005382:	2100      	movs	r1, #0
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fe71 	bl	800606c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800538a:	f000 f89d 	bl	80054c8 <xTaskResumeAll>
 800538e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <vTaskDelay+0x6c>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200015b4 	.word	0x200015b4
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053c6:	463a      	mov	r2, r7
 80053c8:	1d39      	adds	r1, r7, #4
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fc36 	bl	8003c40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	9202      	str	r2, [sp, #8]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	460a      	mov	r2, r1
 80053e6:	492a      	ldr	r1, [pc, #168]	; (8005490 <vTaskStartScheduler+0xd8>)
 80053e8:	482a      	ldr	r0, [pc, #168]	; (8005494 <vTaskStartScheduler+0xdc>)
 80053ea:	f7ff fdf1 	bl	8004fd0 <xTaskCreateStatic>
 80053ee:	4602      	mov	r2, r0
 80053f0:	4b29      	ldr	r3, [pc, #164]	; (8005498 <vTaskStartScheduler+0xe0>)
 80053f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053f4:	4b28      	ldr	r3, [pc, #160]	; (8005498 <vTaskStartScheduler+0xe0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053fc:	2301      	movs	r3, #1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e001      	b.n	8005406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d102      	bne.n	8005412 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800540c:	f000 fe82 	bl	8006114 <xTimerCreateTimerTask>
 8005410:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d128      	bne.n	800546a <vTaskStartScheduler+0xb2>
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800542a:	4b1c      	ldr	r3, [pc, #112]	; (800549c <vTaskStartScheduler+0xe4>)
 800542c:	f04f 32ff 	mov.w	r2, #4294967295
 8005430:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005432:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <vTaskStartScheduler+0xe8>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <vTaskStartScheduler+0xec>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800543e:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <vTaskStartScheduler+0xf0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3334      	adds	r3, #52	; 0x34
 8005444:	2205      	movs	r2, #5
 8005446:	4912      	ldr	r1, [pc, #72]	; (8005490 <vTaskStartScheduler+0xd8>)
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fe29 	bl	80070a0 <memcmp>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <vTaskStartScheduler+0xa8>
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <vTaskStartScheduler+0xf0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f7fd fe25 	bl	80030a8 <SEGGER_SYSVIEW_OnTaskStartExec>
 800545e:	e001      	b.n	8005464 <vTaskStartScheduler+0xac>
 8005460:	f7fd fdc2 	bl	8002fe8 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005464:	f001 fa24 	bl	80068b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005468:	e00d      	b.n	8005486 <vTaskStartScheduler+0xce>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d109      	bne.n	8005486 <vTaskStartScheduler+0xce>
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e7fe      	b.n	8005484 <vTaskStartScheduler+0xcc>
}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	08007240 	.word	0x08007240
 8005494:	08005b19 	.word	0x08005b19
 8005498:	200015b0 	.word	0x200015b0
 800549c:	200015ac 	.word	0x200015ac
 80054a0:	20001598 	.word	0x20001598
 80054a4:	20001590 	.word	0x20001590
 80054a8:	200010b8 	.word	0x200010b8

080054ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <vTaskSuspendAll+0x18>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	4a03      	ldr	r2, [pc, #12]	; (80054c4 <vTaskSuspendAll+0x18>)
 80054b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80054ba:	bf00      	nop
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	200015b4 	.word	0x200015b4

080054c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054d6:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <xTaskResumeAll+0x11c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <xTaskResumeAll+0x2a>
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	e7fe      	b.n	80054f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054f2:	f001 fa7b 	bl	80069ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054f6:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <xTaskResumeAll+0x11c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	4a39      	ldr	r2, [pc, #228]	; (80055e4 <xTaskResumeAll+0x11c>)
 80054fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005500:	4b38      	ldr	r3, [pc, #224]	; (80055e4 <xTaskResumeAll+0x11c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d166      	bne.n	80055d6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005508:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <xTaskResumeAll+0x120>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d062      	beq.n	80055d6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005510:	e033      	b.n	800557a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005512:	4b36      	ldr	r3, [pc, #216]	; (80055ec <xTaskResumeAll+0x124>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3318      	adds	r3, #24
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fc4c 	bl	8003dbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3304      	adds	r3, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe fc47 	bl	8003dbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fd fdfd 	bl	8003130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <xTaskResumeAll+0x128>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d903      	bls.n	800554a <xTaskResumeAll+0x82>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <xTaskResumeAll+0x128>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <xTaskResumeAll+0x12c>)
 8005558:	441a      	add	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7fe fbce 	bl	8003d02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <xTaskResumeAll+0x130>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005574:	4b21      	ldr	r3, [pc, #132]	; (80055fc <xTaskResumeAll+0x134>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <xTaskResumeAll+0x124>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1c7      	bne.n	8005512 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005588:	f000 fbb0 	bl	8005cec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800558c:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <xTaskResumeAll+0x138>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005598:	f000 f858 	bl	800564c <xTaskIncrementTick>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80055a2:	4b16      	ldr	r3, [pc, #88]	; (80055fc <xTaskResumeAll+0x134>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f1      	bne.n	8005598 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <xTaskResumeAll+0x138>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <xTaskResumeAll+0x134>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055c6:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <xTaskResumeAll+0x13c>)
 80055c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055d6:	f001 fa37 	bl	8006a48 <vPortExitCritical>

	return xAlreadyYielded;
 80055da:	68bb      	ldr	r3, [r7, #8]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	200015b4 	.word	0x200015b4
 80055e8:	2000158c 	.word	0x2000158c
 80055ec:	2000154c 	.word	0x2000154c
 80055f0:	20001594 	.word	0x20001594
 80055f4:	200010bc 	.word	0x200010bc
 80055f8:	200010b8 	.word	0x200010b8
 80055fc:	200015a0 	.word	0x200015a0
 8005600:	2000159c 	.word	0x2000159c
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <xTaskGetTickCount+0x1c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005614:	687b      	ldr	r3, [r7, #4]
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20001590 	.word	0x20001590

08005628 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800562e:	f001 fab9 	bl	8006ba4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005632:	2300      	movs	r3, #0
 8005634:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005636:	4b04      	ldr	r3, [pc, #16]	; (8005648 <xTaskGetTickCountFromISR+0x20>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800563c:	683b      	ldr	r3, [r7, #0]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20001590 	.word	0x20001590

0800564c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005656:	4b50      	ldr	r3, [pc, #320]	; (8005798 <xTaskIncrementTick+0x14c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 808c 	bne.w	8005778 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005660:	4b4e      	ldr	r3, [pc, #312]	; (800579c <xTaskIncrementTick+0x150>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005668:	4a4c      	ldr	r2, [pc, #304]	; (800579c <xTaskIncrementTick+0x150>)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11f      	bne.n	80056b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <xTaskIncrementTick+0x154>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <xTaskIncrementTick+0x46>
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	e7fe      	b.n	8005690 <xTaskIncrementTick+0x44>
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <xTaskIncrementTick+0x154>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	4b42      	ldr	r3, [pc, #264]	; (80057a4 <xTaskIncrementTick+0x158>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a40      	ldr	r2, [pc, #256]	; (80057a0 <xTaskIncrementTick+0x154>)
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <xTaskIncrementTick+0x158>)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b40      	ldr	r3, [pc, #256]	; (80057a8 <xTaskIncrementTick+0x15c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	4a3e      	ldr	r2, [pc, #248]	; (80057a8 <xTaskIncrementTick+0x15c>)
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	f000 fb1c 	bl	8005cec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056b4:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <xTaskIncrementTick+0x160>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d34d      	bcc.n	800575a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056be:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <xTaskIncrementTick+0x154>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c8:	4b38      	ldr	r3, [pc, #224]	; (80057ac <xTaskIncrementTick+0x160>)
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295
 80056ce:	601a      	str	r2, [r3, #0]
					break;
 80056d0:	e043      	b.n	800575a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d2:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <xTaskIncrementTick+0x154>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d203      	bcs.n	80056f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056ea:	4a30      	ldr	r2, [pc, #192]	; (80057ac <xTaskIncrementTick+0x160>)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056f0:	e033      	b.n	800575a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe fb60 	bl	8003dbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3318      	adds	r3, #24
 8005708:	4618      	mov	r0, r3
 800570a:	f7fe fb57 	bl	8003dbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f7fd fd0d 	bl	8003130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571a:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <xTaskIncrementTick+0x164>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d903      	bls.n	800572a <xTaskIncrementTick+0xde>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <xTaskIncrementTick+0x164>)
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <xTaskIncrementTick+0x168>)
 8005738:	441a      	add	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7fe fade 	bl	8003d02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <xTaskIncrementTick+0x16c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d3b4      	bcc.n	80056be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005758:	e7b1      	b.n	80056be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <xTaskIncrementTick+0x16c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4914      	ldr	r1, [pc, #80]	; (80057b4 <xTaskIncrementTick+0x168>)
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d907      	bls.n	8005782 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e004      	b.n	8005782 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <xTaskIncrementTick+0x170>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <xTaskIncrementTick+0x170>)
 8005780:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005782:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <xTaskIncrementTick+0x174>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200015b4 	.word	0x200015b4
 800579c:	20001590 	.word	0x20001590
 80057a0:	20001544 	.word	0x20001544
 80057a4:	20001548 	.word	0x20001548
 80057a8:	200015a4 	.word	0x200015a4
 80057ac:	200015ac 	.word	0x200015ac
 80057b0:	20001594 	.word	0x20001594
 80057b4:	200010bc 	.word	0x200010bc
 80057b8:	200010b8 	.word	0x200010b8
 80057bc:	2000159c 	.word	0x2000159c
 80057c0:	200015a0 	.word	0x200015a0

080057c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ca:	4b30      	ldr	r3, [pc, #192]	; (800588c <vTaskSwitchContext+0xc8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057d2:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <vTaskSwitchContext+0xcc>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057d8:	e053      	b.n	8005882 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 80057da:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <vTaskSwitchContext+0xcc>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e0:	4b2c      	ldr	r3, [pc, #176]	; (8005894 <vTaskSwitchContext+0xd0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e00f      	b.n	8005808 <vTaskSwitchContext+0x44>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <vTaskSwitchContext+0x3e>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
 8005800:	e7fe      	b.n	8005800 <vTaskSwitchContext+0x3c>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b01      	subs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	4923      	ldr	r1, [pc, #140]	; (8005898 <vTaskSwitchContext+0xd4>)
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0e5      	beq.n	80057e8 <vTaskSwitchContext+0x24>
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <vTaskSwitchContext+0xd4>)
 8005828:	4413      	add	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	3308      	adds	r3, #8
 800583e:	429a      	cmp	r2, r3
 8005840:	d104      	bne.n	800584c <vTaskSwitchContext+0x88>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	4a12      	ldr	r2, [pc, #72]	; (800589c <vTaskSwitchContext+0xd8>)
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <vTaskSwitchContext+0xd0>)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800585c:	4b0f      	ldr	r3, [pc, #60]	; (800589c <vTaskSwitchContext+0xd8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3334      	adds	r3, #52	; 0x34
 8005862:	2205      	movs	r2, #5
 8005864:	490e      	ldr	r1, [pc, #56]	; (80058a0 <vTaskSwitchContext+0xdc>)
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fc1a 	bl	80070a0 <memcmp>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <vTaskSwitchContext+0xba>
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <vTaskSwitchContext+0xd8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fd fc16 	bl	80030a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800587c:	e001      	b.n	8005882 <vTaskSwitchContext+0xbe>
		traceTASK_SWITCHED_IN();
 800587e:	f7fd fbb3 	bl	8002fe8 <SEGGER_SYSVIEW_OnIdle>
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200015b4 	.word	0x200015b4
 8005890:	200015a0 	.word	0x200015a0
 8005894:	20001594 	.word	0x20001594
 8005898:	200010bc 	.word	0x200010bc
 800589c:	200010b8 	.word	0x200010b8
 80058a0:	08007240 	.word	0x08007240

080058a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <vTaskPlaceOnEventList+0x24>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	e7fe      	b.n	80058c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058c8:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <vTaskPlaceOnEventList+0x44>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3318      	adds	r3, #24
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fe fa3a 	bl	8003d4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058d6:	2101      	movs	r1, #1
 80058d8:	6838      	ldr	r0, [r7, #0]
 80058da:	f000 fbc7 	bl	800606c <prvAddCurrentTaskToDelayedList>
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200010b8 	.word	0x200010b8

080058ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <vTaskPlaceOnEventListRestricted+0x26>
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e7fe      	b.n	8005910 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <vTaskPlaceOnEventListRestricted+0x58>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3318      	adds	r3, #24
 8005918:	4619      	mov	r1, r3
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7fe f9f1 	bl	8003d02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005926:	f04f 33ff 	mov.w	r3, #4294967295
 800592a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800592c:	2024      	movs	r0, #36	; 0x24
 800592e:	f7fc fed5 	bl	80026dc <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	68b8      	ldr	r0, [r7, #8]
 8005936:	f000 fb99 	bl	800606c <prvAddCurrentTaskToDelayedList>
	}
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200010b8 	.word	0x200010b8

08005948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <xTaskRemoveFromEventList+0x2a>
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e7fe      	b.n	8005970 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	3318      	adds	r3, #24
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fa20 	bl	8003dbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597c:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <xTaskRemoveFromEventList+0xb4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d121      	bne.n	80059c8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	3304      	adds	r3, #4
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe fa17 	bl	8003dbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fd fbcd 	bl	8003130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <xTaskRemoveFromEventList+0xb8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d903      	bls.n	80059aa <xTaskRemoveFromEventList+0x62>
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <xTaskRemoveFromEventList+0xb8>)
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <xTaskRemoveFromEventList+0xbc>)
 80059b8:	441a      	add	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7fe f99e 	bl	8003d02 <vListInsertEnd>
 80059c6:	e005      	b.n	80059d4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3318      	adds	r3, #24
 80059cc:	4619      	mov	r1, r3
 80059ce:	480e      	ldr	r0, [pc, #56]	; (8005a08 <xTaskRemoveFromEventList+0xc0>)
 80059d0:	f7fe f997 	bl	8003d02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <xTaskRemoveFromEventList+0xc4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d905      	bls.n	80059ee <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <xTaskRemoveFromEventList+0xc8>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e001      	b.n	80059f2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059f2:	697b      	ldr	r3, [r7, #20]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	200015b4 	.word	0x200015b4
 8005a00:	20001594 	.word	0x20001594
 8005a04:	200010bc 	.word	0x200010bc
 8005a08:	2000154c 	.word	0x2000154c
 8005a0c:	200010b8 	.word	0x200010b8
 8005a10:	200015a0 	.word	0x200015a0

08005a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <vTaskInternalSetTimeOutState+0x24>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <vTaskInternalSetTimeOutState+0x28>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	200015a4 	.word	0x200015a4
 8005a3c:	20001590 	.word	0x20001590

08005a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <xTaskCheckForTimeOut+0x24>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	e7fe      	b.n	8005a62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <xTaskCheckForTimeOut+0x3e>
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e7fe      	b.n	8005a7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a7e:	f000 ffb5 	bl	80069ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <xTaskCheckForTimeOut+0xb8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d102      	bne.n	8005aa2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e023      	b.n	8005aea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <xTaskCheckForTimeOut+0xbc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d007      	beq.n	8005abe <xTaskCheckForTimeOut+0x7e>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d302      	bcc.n	8005abe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	e015      	b.n	8005aea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d20b      	bcs.n	8005ae0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	1ad2      	subs	r2, r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ff9d 	bl	8005a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	e004      	b.n	8005aea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aea:	f000 ffad 	bl	8006a48 <vPortExitCritical>

	return xReturn;
 8005aee:	69fb      	ldr	r3, [r7, #28]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20001590 	.word	0x20001590
 8005afc:	200015a4 	.word	0x200015a4

08005b00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <vTaskMissedYield+0x14>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	200015a0 	.word	0x200015a0

08005b18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b20:	f000 f852 	bl	8005bc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <prvIdleTask+0x28>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d9f9      	bls.n	8005b20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <prvIdleTask+0x2c>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b3c:	e7f0      	b.n	8005b20 <prvIdleTask+0x8>
 8005b3e:	bf00      	nop
 8005b40:	200010bc 	.word	0x200010bc
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	e00c      	b.n	8005b6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <prvInitialiseTaskLists+0x60>)
 8005b60:	4413      	add	r3, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe f8a0 	bl	8003ca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b37      	cmp	r3, #55	; 0x37
 8005b72:	d9ef      	bls.n	8005b54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b74:	480d      	ldr	r0, [pc, #52]	; (8005bac <prvInitialiseTaskLists+0x64>)
 8005b76:	f7fe f897 	bl	8003ca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b7a:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <prvInitialiseTaskLists+0x68>)
 8005b7c:	f7fe f894 	bl	8003ca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b80:	480c      	ldr	r0, [pc, #48]	; (8005bb4 <prvInitialiseTaskLists+0x6c>)
 8005b82:	f7fe f891 	bl	8003ca8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b86:	480c      	ldr	r0, [pc, #48]	; (8005bb8 <prvInitialiseTaskLists+0x70>)
 8005b88:	f7fe f88e 	bl	8003ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b8c:	480b      	ldr	r0, [pc, #44]	; (8005bbc <prvInitialiseTaskLists+0x74>)
 8005b8e:	f7fe f88b 	bl	8003ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <prvInitialiseTaskLists+0x78>)
 8005b94:	4a05      	ldr	r2, [pc, #20]	; (8005bac <prvInitialiseTaskLists+0x64>)
 8005b96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <prvInitialiseTaskLists+0x7c>)
 8005b9a:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <prvInitialiseTaskLists+0x68>)
 8005b9c:	601a      	str	r2, [r3, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200010bc 	.word	0x200010bc
 8005bac:	2000151c 	.word	0x2000151c
 8005bb0:	20001530 	.word	0x20001530
 8005bb4:	2000154c 	.word	0x2000154c
 8005bb8:	20001560 	.word	0x20001560
 8005bbc:	20001578 	.word	0x20001578
 8005bc0:	20001544 	.word	0x20001544
 8005bc4:	20001548 	.word	0x20001548

08005bc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bce:	e019      	b.n	8005c04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bd0:	f000 ff0c 	bl	80069ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <prvCheckTasksWaitingTermination+0x4c>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe f8eb 	bl	8003dbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <prvCheckTasksWaitingTermination+0x50>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <prvCheckTasksWaitingTermination+0x50>)
 8005bee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <prvCheckTasksWaitingTermination+0x54>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <prvCheckTasksWaitingTermination+0x54>)
 8005bf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bfa:	f000 ff25 	bl	8006a48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f846 	bl	8005c90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <prvCheckTasksWaitingTermination+0x54>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e1      	bne.n	8005bd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20001560 	.word	0x20001560
 8005c18:	2000158c 	.word	0x2000158c
 8005c1c:	20001574 	.word	0x20001574

08005c20 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c2c:	e005      	b.n	8005c3a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3301      	adds	r3, #1
 8005c32:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2ba5      	cmp	r3, #165	; 0xa5
 8005c40:	d0f5      	beq.n	8005c2e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	b29b      	uxth	r3, r3
	}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <uxTaskGetStackHighWaterMark+0x14>
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <uxTaskGetStackHighWaterMark+0x34>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	e000      	b.n	8005c6e <uxTaskGetStackHighWaterMark+0x16>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005c76:	6938      	ldr	r0, [r7, #16]
 8005c78:	f7ff ffd2 	bl	8005c20 <prvTaskCheckFreeStackSpace>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005c80:	68fb      	ldr	r3, [r7, #12]
	}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	200010b8 	.word	0x200010b8

08005c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f8c2 	bl	8006e30 <vPortFree>
				vPortFree( pxTCB );
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 f8bf 	bl	8006e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cb2:	e017      	b.n	8005ce4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d103      	bne.n	8005cc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 f8b6 	bl	8006e30 <vPortFree>
	}
 8005cc4:	e00e      	b.n	8005ce4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d009      	beq.n	8005ce4 <prvDeleteTCB+0x54>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e7fe      	b.n	8005ce2 <prvDeleteTCB+0x52>
	}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <prvResetNextTaskUnblockTime+0x38>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <prvResetNextTaskUnblockTime+0x3c>)
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d04:	e008      	b.n	8005d18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <prvResetNextTaskUnblockTime+0x38>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <prvResetNextTaskUnblockTime+0x3c>)
 8005d16:	6013      	str	r3, [r2, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	20001544 	.word	0x20001544
 8005d28:	200015ac 	.word	0x200015ac

08005d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d32:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <xTaskGetSchedulerState+0x34>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	e008      	b.n	8005d52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <xTaskGetSchedulerState+0x38>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	e001      	b.n	8005d52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d52:	687b      	ldr	r3, [r7, #4]
	}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	20001598 	.word	0x20001598
 8005d64:	200015b4 	.word	0x200015b4

08005d68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d05a      	beq.n	8005e34 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <xTaskPriorityInherit+0xd8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d24a      	bcs.n	8005e22 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db06      	blt.n	8005da2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d94:	4b2a      	ldr	r3, [pc, #168]	; (8005e40 <xTaskPriorityInherit+0xd8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a24      	ldr	r2, [pc, #144]	; (8005e44 <xTaskPriorityInherit+0xdc>)
 8005db4:	4413      	add	r3, r2
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d126      	bne.n	8005e08 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fd fffc 	bl	8003dbc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dc4:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <xTaskPriorityInherit+0xd8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fd f9ad 	bl	8003130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <xTaskPriorityInherit+0xe0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d903      	bls.n	8005dea <xTaskPriorityInherit+0x82>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <xTaskPriorityInherit+0xe0>)
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <xTaskPriorityInherit+0xdc>)
 8005df8:	441a      	add	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f7fd ff7e 	bl	8003d02 <vListInsertEnd>
 8005e06:	e004      	b.n	8005e12 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e08:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <xTaskPriorityInherit+0xd8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4619      	mov	r1, r3
 8005e16:	2049      	movs	r0, #73	; 0x49
 8005e18:	f7fc fc7e 	bl	8002718 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e008      	b.n	8005e34 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <xTaskPriorityInherit+0xd8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d201      	bcs.n	8005e34 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e34:	68fb      	ldr	r3, [r7, #12]
	}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	200010b8 	.word	0x200010b8
 8005e44:	200010bc 	.word	0x200010bc
 8005e48:	20001594 	.word	0x20001594

08005e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d05d      	beq.n	8005f1e <xTaskPriorityDisinherit+0xd2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e62:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <xTaskPriorityDisinherit+0xdc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d009      	beq.n	8005e80 <xTaskPriorityDisinherit+0x34>
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e7fe      	b.n	8005e7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <xTaskPriorityDisinherit+0x50>
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	e7fe      	b.n	8005e9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d035      	beq.n	8005f1e <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d131      	bne.n	8005f1e <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd ff7c 	bl	8003dbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	204a      	movs	r0, #74	; 0x4a
 8005eca:	f7fc fc25 	bl	8002718 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fd f923 	bl	8003130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eee:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <xTaskPriorityDisinherit+0xe0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d903      	bls.n	8005efe <xTaskPriorityDisinherit+0xb2>
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <xTaskPriorityDisinherit+0xe0>)
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <xTaskPriorityDisinherit+0xe4>)
 8005f0c:	441a      	add	r2, r3
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7fd fef4 	bl	8003d02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f1e:	697b      	ldr	r3, [r7, #20]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200010b8 	.word	0x200010b8
 8005f2c:	20001594 	.word	0x20001594
 8005f30:	200010bc 	.word	0x200010bc

08005f34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f42:	2301      	movs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d071      	beq.n	8006030 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e7fe      	b.n	8005f66 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d902      	bls.n	8005f78 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e002      	b.n	8005f7e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d053      	beq.n	8006030 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d14e      	bne.n	8006030 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f92:	4b29      	ldr	r3, [pc, #164]	; (8006038 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d109      	bne.n	8005fb0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	e7fe      	b.n	8005fae <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	204a      	movs	r0, #74	; 0x4a
 8005fb6:	f7fc fbaf 	bl	8002718 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	db04      	blt.n	8005fd8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	6959      	ldr	r1, [r3, #20]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4a15      	ldr	r2, [pc, #84]	; (800603c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	4299      	cmp	r1, r3
 8005fec:	d120      	bne.n	8006030 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fd fee2 	bl	8003dbc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd f898 	bl	8003130 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d903      	bls.n	8006014 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4a06      	ldr	r2, [pc, #24]	; (800603c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006022:	441a      	add	r2, r3
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f7fd fe69 	bl	8003d02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006030:	bf00      	nop
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	200010b8 	.word	0x200010b8
 800603c:	200010bc 	.word	0x200010bc
 8006040:	20001594 	.word	0x20001594

08006044 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006048:	4b07      	ldr	r3, [pc, #28]	; (8006068 <pvTaskIncrementMutexHeldCount+0x24>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <pvTaskIncrementMutexHeldCount+0x24>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006056:	3201      	adds	r2, #1
 8006058:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800605a:	4b03      	ldr	r3, [pc, #12]	; (8006068 <pvTaskIncrementMutexHeldCount+0x24>)
 800605c:	681b      	ldr	r3, [r3, #0]
	}
 800605e:	4618      	mov	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200010b8 	.word	0x200010b8

0800606c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006076:	4b21      	ldr	r3, [pc, #132]	; (80060fc <prvAddCurrentTaskToDelayedList+0x90>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800607c:	4b20      	ldr	r3, [pc, #128]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3304      	adds	r3, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd fe9a 	bl	8003dbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d10a      	bne.n	80060a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4819      	ldr	r0, [pc, #100]	; (8006104 <prvAddCurrentTaskToDelayedList+0x98>)
 80060a0:	f7fd fe2f 	bl	8003d02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060a4:	e026      	b.n	80060f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ae:	4b14      	ldr	r3, [pc, #80]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d209      	bcs.n	80060d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fd fe3d 	bl	8003d4a <vListInsert>
}
 80060d0:	e010      	b.n	80060f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <prvAddCurrentTaskToDelayedList+0xa0>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fd fe33 	bl	8003d4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d202      	bcs.n	80060f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060ee:	4a08      	ldr	r2, [pc, #32]	; (8006110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6013      	str	r3, [r2, #0]
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20001590 	.word	0x20001590
 8006100:	200010b8 	.word	0x200010b8
 8006104:	20001578 	.word	0x20001578
 8006108:	20001548 	.word	0x20001548
 800610c:	20001544 	.word	0x20001544
 8006110:	200015ac 	.word	0x200015ac

08006114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	; 0x28
 8006118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800611e:	f000 faff 	bl	8006720 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <xTimerCreateTimerTask+0x80>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d021      	beq.n	800616e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006132:	1d3a      	adds	r2, r7, #4
 8006134:	f107 0108 	add.w	r1, r7, #8
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	4618      	mov	r0, r3
 800613e:	f7fd fd99 	bl	8003c74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	9202      	str	r2, [sp, #8]
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	2302      	movs	r3, #2
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2300      	movs	r3, #0
 8006152:	460a      	mov	r2, r1
 8006154:	4910      	ldr	r1, [pc, #64]	; (8006198 <xTimerCreateTimerTask+0x84>)
 8006156:	4811      	ldr	r0, [pc, #68]	; (800619c <xTimerCreateTimerTask+0x88>)
 8006158:	f7fe ff3a 	bl	8004fd0 <xTaskCreateStatic>
 800615c:	4602      	mov	r2, r0
 800615e:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <xTimerCreateTimerTask+0x8c>)
 8006160:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006162:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <xTimerCreateTimerTask+0x8c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <xTimerCreateTimerTask+0x74>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	e7fe      	b.n	8006186 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006188:	697b      	ldr	r3, [r7, #20]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200015e8 	.word	0x200015e8
 8006198:	08007248 	.word	0x08007248
 800619c:	080062d5 	.word	0x080062d5
 80061a0:	200015ec 	.word	0x200015ec

080061a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <xTimerGenericCommand+0x2c>
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	623b      	str	r3, [r7, #32]
 80061ce:	e7fe      	b.n	80061ce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061d0:	4b19      	ldr	r3, [pc, #100]	; (8006238 <xTimerGenericCommand+0x94>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d02a      	beq.n	800622e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	dc18      	bgt.n	800621c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061ea:	f7ff fd9f 	bl	8005d2c <xTaskGetSchedulerState>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d109      	bne.n	8006208 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061f4:	4b10      	ldr	r3, [pc, #64]	; (8006238 <xTimerGenericCommand+0x94>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	f107 0110 	add.w	r1, r7, #16
 80061fc:	2300      	movs	r3, #0
 80061fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006200:	f7fd ffb0 	bl	8004164 <xQueueGenericSend>
 8006204:	6278      	str	r0, [r7, #36]	; 0x24
 8006206:	e012      	b.n	800622e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <xTimerGenericCommand+0x94>)
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	f107 0110 	add.w	r1, r7, #16
 8006210:	2300      	movs	r3, #0
 8006212:	2200      	movs	r2, #0
 8006214:	f7fd ffa6 	bl	8004164 <xQueueGenericSend>
 8006218:	6278      	str	r0, [r7, #36]	; 0x24
 800621a:	e008      	b.n	800622e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <xTimerGenericCommand+0x94>)
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	f107 0110 	add.w	r1, r7, #16
 8006224:	2300      	movs	r3, #0
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	f7fe f8be 	bl	80043a8 <xQueueGenericSendFromISR>
 800622c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006230:	4618      	mov	r0, r3
 8006232:	3728      	adds	r7, #40	; 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	200015e8 	.word	0x200015e8

0800623c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006246:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <prvProcessExpiredTimer+0x94>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	3304      	adds	r3, #4
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd fdb1 	bl	8003dbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d021      	beq.n	80062ac <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	18d1      	adds	r1, r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	6978      	ldr	r0, [r7, #20]
 8006276:	f000 f8d1 	bl	800641c <prvInsertTimerInActiveList>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01e      	beq.n	80062be <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006280:	2300      	movs	r3, #0
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	2100      	movs	r1, #0
 800628a:	6978      	ldr	r0, [r7, #20]
 800628c:	f7ff ff8a 	bl	80061a4 <xTimerGenericCommand>
 8006290:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d112      	bne.n	80062be <prvProcessExpiredTimer+0x82>
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	e7fe      	b.n	80062aa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	6978      	ldr	r0, [r7, #20]
 80062c4:	4798      	blx	r3
}
 80062c6:	bf00      	nop
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200015e0 	.word	0x200015e0

080062d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f857 	bl	8006394 <prvGetNextExpireTime>
 80062e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f803 	bl	80062f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062f2:	f000 f8d5 	bl	80064a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062f6:	e7f1      	b.n	80062dc <prvTimerTask+0x8>

080062f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006302:	f7ff f8d3 	bl	80054ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006306:	f107 0308 	add.w	r3, r7, #8
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f866 	bl	80063dc <prvSampleTimeNow>
 8006310:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d130      	bne.n	800637a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <prvProcessTimerOrBlockTask+0x3c>
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	429a      	cmp	r2, r3
 8006324:	d806      	bhi.n	8006334 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006326:	f7ff f8cf 	bl	80054c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff85 	bl	800623c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006332:	e024      	b.n	800637e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800633a:	4b13      	ldr	r3, [pc, #76]	; (8006388 <prvProcessTimerOrBlockTask+0x90>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <prvProcessTimerOrBlockTask+0x50>
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <prvProcessTimerOrBlockTask+0x52>
 8006348:	2300      	movs	r3, #0
 800634a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <prvProcessTimerOrBlockTask+0x94>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	4619      	mov	r1, r3
 800635a:	f7fe fe05 	bl	8004f68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800635e:	f7ff f8b3 	bl	80054c8 <xTaskResumeAll>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <prvProcessTimerOrBlockTask+0x98>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
}
 8006378:	e001      	b.n	800637e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800637a:	f7ff f8a5 	bl	80054c8 <xTaskResumeAll>
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200015e4 	.word	0x200015e4
 800638c:	200015e8 	.word	0x200015e8
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <prvGetNextExpireTime+0x44>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <prvGetNextExpireTime+0x16>
 80063a6:	2201      	movs	r2, #1
 80063a8:	e000      	b.n	80063ac <prvGetNextExpireTime+0x18>
 80063aa:	2200      	movs	r2, #0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d105      	bne.n	80063c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063b8:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <prvGetNextExpireTime+0x44>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e001      	b.n	80063c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	200015e0 	.word	0x200015e0

080063dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063e4:	f7ff f910 	bl	8005608 <xTaskGetTickCount>
 80063e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <prvSampleTimeNow+0x3c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d205      	bcs.n	8006400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063f4:	f000 f930 	bl	8006658 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e002      	b.n	8006406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006406:	4a04      	ldr	r2, [pc, #16]	; (8006418 <prvSampleTimeNow+0x3c>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	200015f0 	.word	0x200015f0

0800641c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	d812      	bhi.n	8006468 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	429a      	cmp	r2, r3
 800644e:	d302      	bcc.n	8006456 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e01b      	b.n	800648e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <prvInsertTimerInActiveList+0x7c>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3304      	adds	r3, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7fd fc72 	bl	8003d4a <vListInsert>
 8006466:	e012      	b.n	800648e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d206      	bcs.n	800647e <prvInsertTimerInActiveList+0x62>
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d302      	bcc.n	800647e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e007      	b.n	800648e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800647e:	4b07      	ldr	r3, [pc, #28]	; (800649c <prvInsertTimerInActiveList+0x80>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3304      	adds	r3, #4
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f7fd fc5e 	bl	8003d4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800648e:	697b      	ldr	r3, [r7, #20]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	200015e4 	.word	0x200015e4
 800649c:	200015e0 	.word	0x200015e0

080064a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08e      	sub	sp, #56	; 0x38
 80064a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064a6:	e0c6      	b.n	8006636 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da17      	bge.n	80064de <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	3304      	adds	r3, #4
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <prvProcessReceivedCommands+0x2e>
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	e7fe      	b.n	80064cc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d4:	6850      	ldr	r0, [r2, #4]
 80064d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d8:	6892      	ldr	r2, [r2, #8]
 80064da:	4611      	mov	r1, r2
 80064dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f2c0 80a7 	blt.w	8006634 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	3304      	adds	r3, #4
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fd fc60 	bl	8003dbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064fc:	463b      	mov	r3, r7
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ff6c 	bl	80063dc <prvSampleTimeNow>
 8006504:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b09      	cmp	r3, #9
 800650a:	f200 8094 	bhi.w	8006636 <prvProcessReceivedCommands+0x196>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <prvProcessReceivedCommands+0x74>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	0800653d 	.word	0x0800653d
 8006518:	0800653d 	.word	0x0800653d
 800651c:	0800653d 	.word	0x0800653d
 8006520:	080065af 	.word	0x080065af
 8006524:	080065c3 	.word	0x080065c3
 8006528:	0800660b 	.word	0x0800660b
 800652c:	0800653d 	.word	0x0800653d
 8006530:	0800653d 	.word	0x0800653d
 8006534:	080065af 	.word	0x080065af
 8006538:	080065c3 	.word	0x080065c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	18d1      	adds	r1, r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655c:	f7ff ff5e 	bl	800641c <prvInsertTimerInActiveList>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d067      	beq.n	8006636 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d05c      	beq.n	8006636 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	441a      	add	r2, r3
 8006584:	2300      	movs	r3, #0
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2300      	movs	r3, #0
 800658a:	2100      	movs	r1, #0
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f7ff fe09 	bl	80061a4 <xTimerGenericCommand>
 8006592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d14d      	bne.n	8006636 <prvProcessReceivedCommands+0x196>
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e7fe      	b.n	80065ac <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065c0:	e039      	b.n	8006636 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <prvProcessReceivedCommands+0x156>
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e7fe      	b.n	80065f4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	18d1      	adds	r1, r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006604:	f7ff ff0a 	bl	800641c <prvInsertTimerInActiveList>
					break;
 8006608:	e015      	b.n	8006636 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d103      	bne.n	8006620 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661a:	f000 fc09 	bl	8006e30 <vPortFree>
 800661e:	e00a      	b.n	8006636 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006632:	e000      	b.n	8006636 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006634:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006636:	4b07      	ldr	r3, [pc, #28]	; (8006654 <prvProcessReceivedCommands+0x1b4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	1d39      	adds	r1, r7, #4
 800663c:	2200      	movs	r2, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f7fd fff8 	bl	8004634 <xQueueReceive>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	f47f af2e 	bne.w	80064a8 <prvProcessReceivedCommands+0x8>
	}
}
 800664c:	bf00      	nop
 800664e:	3730      	adds	r7, #48	; 0x30
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	200015e8 	.word	0x200015e8

08006658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800665e:	e047      	b.n	80066f0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006660:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <prvSwitchTimerLists+0xc0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666a:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <prvSwitchTimerLists+0xc0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3304      	adds	r3, #4
 8006678:	4618      	mov	r0, r3
 800667a:	f7fd fb9f 	bl	8003dbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d02d      	beq.n	80066f0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d90e      	bls.n	80066c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066b2:	4b19      	ldr	r3, [pc, #100]	; (8006718 <prvSwitchTimerLists+0xc0>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7fd fb44 	bl	8003d4a <vListInsert>
 80066c2:	e015      	b.n	80066f0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066c4:	2300      	movs	r3, #0
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	2100      	movs	r1, #0
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff fd68 	bl	80061a4 <xTimerGenericCommand>
 80066d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <prvSwitchTimerLists+0x98>
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	e7fe      	b.n	80066ee <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <prvSwitchTimerLists+0xc0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1b2      	bne.n	8006660 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <prvSwitchTimerLists+0xc0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006700:	4b06      	ldr	r3, [pc, #24]	; (800671c <prvSwitchTimerLists+0xc4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a04      	ldr	r2, [pc, #16]	; (8006718 <prvSwitchTimerLists+0xc0>)
 8006706:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006708:	4a04      	ldr	r2, [pc, #16]	; (800671c <prvSwitchTimerLists+0xc4>)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	6013      	str	r3, [r2, #0]
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200015e0 	.word	0x200015e0
 800671c:	200015e4 	.word	0x200015e4

08006720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006726:	f000 f961 	bl	80069ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <prvCheckForValidListAndQueue+0x60>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d120      	bne.n	8006774 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006732:	4814      	ldr	r0, [pc, #80]	; (8006784 <prvCheckForValidListAndQueue+0x64>)
 8006734:	f7fd fab8 	bl	8003ca8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006738:	4813      	ldr	r0, [pc, #76]	; (8006788 <prvCheckForValidListAndQueue+0x68>)
 800673a:	f7fd fab5 	bl	8003ca8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <prvCheckForValidListAndQueue+0x6c>)
 8006740:	4a10      	ldr	r2, [pc, #64]	; (8006784 <prvCheckForValidListAndQueue+0x64>)
 8006742:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006744:	4b12      	ldr	r3, [pc, #72]	; (8006790 <prvCheckForValidListAndQueue+0x70>)
 8006746:	4a10      	ldr	r2, [pc, #64]	; (8006788 <prvCheckForValidListAndQueue+0x68>)
 8006748:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800674a:	2300      	movs	r3, #0
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	4b11      	ldr	r3, [pc, #68]	; (8006794 <prvCheckForValidListAndQueue+0x74>)
 8006750:	4a11      	ldr	r2, [pc, #68]	; (8006798 <prvCheckForValidListAndQueue+0x78>)
 8006752:	2110      	movs	r1, #16
 8006754:	200a      	movs	r0, #10
 8006756:	f7fd fbc3 	bl	8003ee0 <xQueueGenericCreateStatic>
 800675a:	4602      	mov	r2, r0
 800675c:	4b08      	ldr	r3, [pc, #32]	; (8006780 <prvCheckForValidListAndQueue+0x60>)
 800675e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <prvCheckForValidListAndQueue+0x60>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <prvCheckForValidListAndQueue+0x60>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	490b      	ldr	r1, [pc, #44]	; (800679c <prvCheckForValidListAndQueue+0x7c>)
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fba0 	bl	8004eb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006774:	f000 f968 	bl	8006a48 <vPortExitCritical>
}
 8006778:	bf00      	nop
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200015e8 	.word	0x200015e8
 8006784:	200015b8 	.word	0x200015b8
 8006788:	200015cc 	.word	0x200015cc
 800678c:	200015e0 	.word	0x200015e0
 8006790:	200015e4 	.word	0x200015e4
 8006794:	20001694 	.word	0x20001694
 8006798:	200015f4 	.word	0x200015f4
 800679c:	08007250 	.word	0x08007250

080067a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3b04      	subs	r3, #4
 80067b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3b04      	subs	r3, #4
 80067be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f023 0201 	bic.w	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3b04      	subs	r3, #4
 80067ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067d0:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <pxPortInitialiseStack+0x64>)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3b14      	subs	r3, #20
 80067da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3b04      	subs	r3, #4
 80067e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f06f 0202 	mvn.w	r2, #2
 80067ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3b20      	subs	r3, #32
 80067f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	08006809 	.word	0x08006809

08006808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006812:	4b11      	ldr	r3, [pc, #68]	; (8006858 <prvTaskExitError+0x50>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d009      	beq.n	8006830 <prvTaskExitError+0x28>
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e7fe      	b.n	800682e <prvTaskExitError+0x26>
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006842:	bf00      	nop
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0fc      	beq.n	8006844 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800684a:	bf00      	nop
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	2000000c 	.word	0x2000000c
 800685c:	00000000 	.word	0x00000000

08006860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <pxCurrentTCBConst2>)
 8006862:	6819      	ldr	r1, [r3, #0]
 8006864:	6808      	ldr	r0, [r1, #0]
 8006866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686a:	f380 8809 	msr	PSP, r0
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8811 	msr	BASEPRI, r0
 800687a:	4770      	bx	lr
 800687c:	f3af 8000 	nop.w

08006880 <pxCurrentTCBConst2>:
 8006880:	200010b8 	.word	0x200010b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop

08006888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006888:	4808      	ldr	r0, [pc, #32]	; (80068ac <prvPortStartFirstTask+0x24>)
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	6800      	ldr	r0, [r0, #0]
 800688e:	f380 8808 	msr	MSP, r0
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f380 8814 	msr	CONTROL, r0
 800689a:	b662      	cpsie	i
 800689c:	b661      	cpsie	f
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	df00      	svc	0
 80068a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068aa:	bf00      	nop
 80068ac:	e000ed08 	.word	0xe000ed08

080068b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068b6:	4b44      	ldr	r3, [pc, #272]	; (80069c8 <xPortStartScheduler+0x118>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a44      	ldr	r2, [pc, #272]	; (80069cc <xPortStartScheduler+0x11c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d109      	bne.n	80068d4 <xPortStartScheduler+0x24>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	e7fe      	b.n	80068d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068d4:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <xPortStartScheduler+0x118>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a3d      	ldr	r2, [pc, #244]	; (80069d0 <xPortStartScheduler+0x120>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d109      	bne.n	80068f2 <xPortStartScheduler+0x42>
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e7fe      	b.n	80068f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068f2:	4b38      	ldr	r3, [pc, #224]	; (80069d4 <xPortStartScheduler+0x124>)
 80068f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	22ff      	movs	r2, #255	; 0xff
 8006902:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006914:	b2da      	uxtb	r2, r3
 8006916:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <xPortStartScheduler+0x128>)
 8006918:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800691a:	4b30      	ldr	r3, [pc, #192]	; (80069dc <xPortStartScheduler+0x12c>)
 800691c:	2207      	movs	r2, #7
 800691e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006920:	e009      	b.n	8006936 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006922:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <xPortStartScheduler+0x12c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3b01      	subs	r3, #1
 8006928:	4a2c      	ldr	r2, [pc, #176]	; (80069dc <xPortStartScheduler+0x12c>)
 800692a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	2b80      	cmp	r3, #128	; 0x80
 8006940:	d0ef      	beq.n	8006922 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <xPortStartScheduler+0x12c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f1c3 0307 	rsb	r3, r3, #7
 800694a:	2b04      	cmp	r3, #4
 800694c:	d009      	beq.n	8006962 <xPortStartScheduler+0xb2>
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	e7fe      	b.n	8006960 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006962:	4b1e      	ldr	r3, [pc, #120]	; (80069dc <xPortStartScheduler+0x12c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	4a1c      	ldr	r2, [pc, #112]	; (80069dc <xPortStartScheduler+0x12c>)
 800696a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <xPortStartScheduler+0x12c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <xPortStartScheduler+0x12c>)
 8006976:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006980:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <xPortStartScheduler+0x130>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <xPortStartScheduler+0x130>)
 8006986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800698a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800698c:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <xPortStartScheduler+0x130>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <xPortStartScheduler+0x130>)
 8006992:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006996:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006998:	f000 f8d6 	bl	8006b48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <xPortStartScheduler+0x134>)
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069a2:	f000 f8f5 	bl	8006b90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <xPortStartScheduler+0x138>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <xPortStartScheduler+0x138>)
 80069ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069b2:	f7ff ff69 	bl	8006888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069b6:	f7fe ff05 	bl	80057c4 <vTaskSwitchContext>
	prvTaskExitError();
 80069ba:	f7ff ff25 	bl	8006808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed00 	.word	0xe000ed00
 80069cc:	410fc271 	.word	0x410fc271
 80069d0:	410fc270 	.word	0x410fc270
 80069d4:	e000e400 	.word	0xe000e400
 80069d8:	200016e4 	.word	0x200016e4
 80069dc:	200016e8 	.word	0x200016e8
 80069e0:	e000ed20 	.word	0xe000ed20
 80069e4:	2000000c 	.word	0x2000000c
 80069e8:	e000ef34 	.word	0xe000ef34

080069ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <vPortEnterCritical+0x54>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	4a0d      	ldr	r2, [pc, #52]	; (8006a40 <vPortEnterCritical+0x54>)
 8006a0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a0e:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <vPortEnterCritical+0x54>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10e      	bne.n	8006a34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <vPortEnterCritical+0x58>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <vPortEnterCritical+0x48>
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	e7fe      	b.n	8006a32 <vPortEnterCritical+0x46>
	}
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	2000000c 	.word	0x2000000c
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <vPortExitCritical+0x4c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <vPortExitCritical+0x22>
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	607b      	str	r3, [r7, #4]
 8006a68:	e7fe      	b.n	8006a68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <vPortExitCritical+0x4c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <vPortExitCritical+0x4c>)
 8006a72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a74:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <vPortExitCritical+0x4c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <vPortExitCritical+0x3e>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	2000000c 	.word	0x2000000c
	...

08006aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <pxCurrentTCBConst>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f01e 0f10 	tst.w	lr, #16
 8006ab0:	bf08      	it	eq
 8006ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	6010      	str	r0, [r2, #0]
 8006abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ac4:	f380 8811 	msr	BASEPRI, r0
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f7fe fe78 	bl	80057c4 <vTaskSwitchContext>
 8006ad4:	f04f 0000 	mov.w	r0, #0
 8006ad8:	f380 8811 	msr	BASEPRI, r0
 8006adc:	bc09      	pop	{r0, r3}
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	6808      	ldr	r0, [r1, #0]
 8006ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae6:	f01e 0f10 	tst.w	lr, #16
 8006aea:	bf08      	it	eq
 8006aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006af0:	f380 8809 	msr	PSP, r0
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst>:
 8006b00:	200010b8 	.word	0x200010b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b20:	f7fe fd94 	bl	800564c <xTaskIncrementTick>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <SysTick_Handler+0x3c>)
 8006b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	2300      	movs	r3, #0
 8006b34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	e000ed04 	.word	0xe000ed04

08006b48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <vPortSetupTimerInterrupt+0x34>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <vPortSetupTimerInterrupt+0x38>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <vPortSetupTimerInterrupt+0x3c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <vPortSetupTimerInterrupt+0x40>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	099b      	lsrs	r3, r3, #6
 8006b64:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <vPortSetupTimerInterrupt+0x44>)
 8006b66:	3b01      	subs	r3, #1
 8006b68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <vPortSetupTimerInterrupt+0x34>)
 8006b6c:	2207      	movs	r2, #7
 8006b6e:	601a      	str	r2, [r3, #0]
}
 8006b70:	bf00      	nop
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	e000e010 	.word	0xe000e010
 8006b80:	e000e018 	.word	0xe000e018
 8006b84:	20000000 	.word	0x20000000
 8006b88:	10624dd3 	.word	0x10624dd3
 8006b8c:	e000e014 	.word	0xe000e014

08006b90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ba0 <vPortEnableVFP+0x10>
 8006b94:	6801      	ldr	r1, [r0, #0]
 8006b96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b9a:	6001      	str	r1, [r0, #0]
 8006b9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b9e:	bf00      	nop
 8006ba0:	e000ed88 	.word	0xe000ed88

08006ba4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	    vSetVarulMaxPRIGROUPValue();
 8006baa:	f000 f839 	bl	8006c20 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bae:	f3ef 8305 	mrs	r3, IPSR
 8006bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d913      	bls.n	8006be2 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <vPortValidateInterruptPriority+0x6c>)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bc4:	4b13      	ldr	r3, [pc, #76]	; (8006c14 <vPortValidateInterruptPriority+0x70>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	7afa      	ldrb	r2, [r7, #11]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d209      	bcs.n	8006be2 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	e7fe      	b.n	8006be0 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <vPortValidateInterruptPriority+0x74>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <vPortValidateInterruptPriority+0x78>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d909      	bls.n	8006c06 <vPortValidateInterruptPriority+0x62>
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	e7fe      	b.n	8006c04 <vPortValidateInterruptPriority+0x60>
	}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	e000e3f0 	.word	0xe000e3f0
 8006c14:	200016e4 	.word	0x200016e4
 8006c18:	e000ed0c 	.word	0xe000ed0c
 8006c1c:	200016e8 	.word	0x200016e8

08006c20 <vSetVarulMaxPRIGROUPValue>:

//###########################################################
// Add function below in file port.c
#if( configASSERT_DEFINED == 1 )
	void vSetVarulMaxPRIGROUPValue( void )
	{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c26:	4b1f      	ldr	r3, [pc, #124]	; (8006ca4 <vSetVarulMaxPRIGROUPValue+0x84>)
 8006c28:	60fb      	str	r3, [r7, #12]
		volatile uint8_t ucMaxPriorityValue;
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	22ff      	movs	r2, #255	; 0xff
 8006c2e:	701a      	strb	r2, [r3, #0]
		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	71fb      	strb	r3, [r7, #7]
		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c38:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c3a:	2207      	movs	r2, #7
 8006c3c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c3e:	e009      	b.n	8006c54 <vSetVarulMaxPRIGROUPValue+0x34>
		{
			ulMaxPRIGROUPValue--;
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c48:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5c:	2b80      	cmp	r3, #128	; 0x80
 8006c5e:	d0ef      	beq.n	8006c40 <vSetVarulMaxPRIGROUPValue+0x20>
	#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c60:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f1c3 0307 	rsb	r3, r3, #7
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d009      	beq.n	8006c80 <vSetVarulMaxPRIGROUPValue+0x60>
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	e7fe      	b.n	8006c7e <vSetVarulMaxPRIGROUPValue+0x5e>
		}
	#endif
		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c80:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c8a:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c92:	4a05      	ldr	r2, [pc, #20]	; (8006ca8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8006c94:	6013      	str	r3, [r2, #0]
	}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	e000e400 	.word	0xe000e400
 8006ca8:	200016e8 	.word	0x200016e8

08006cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cb8:	f7fe fbf8 	bl	80054ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cbc:	4b57      	ldr	r3, [pc, #348]	; (8006e1c <pvPortMalloc+0x170>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cc4:	f000 f90c 	bl	8006ee0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cc8:	4b55      	ldr	r3, [pc, #340]	; (8006e20 <pvPortMalloc+0x174>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 808c 	bne.w	8006dee <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01c      	beq.n	8006d16 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006cdc:	2208      	movs	r2, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d013      	beq.n	8006d16 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f023 0307 	bic.w	r3, r3, #7
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <pvPortMalloc+0x6a>
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e7fe      	b.n	8006d14 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d068      	beq.n	8006dee <pvPortMalloc+0x142>
 8006d1c:	4b41      	ldr	r3, [pc, #260]	; (8006e24 <pvPortMalloc+0x178>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d863      	bhi.n	8006dee <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d26:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <pvPortMalloc+0x17c>)
 8006d28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d2a:	4b3f      	ldr	r3, [pc, #252]	; (8006e28 <pvPortMalloc+0x17c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d30:	e004      	b.n	8006d3c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d903      	bls.n	8006d4e <pvPortMalloc+0xa2>
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f1      	bne.n	8006d32 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d4e:	4b33      	ldr	r3, [pc, #204]	; (8006e1c <pvPortMalloc+0x170>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d04a      	beq.n	8006dee <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	4413      	add	r3, r2
 8006d60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	1ad2      	subs	r2, r2, r3
 8006d72:	2308      	movs	r3, #8
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d91e      	bls.n	8006db8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4413      	add	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <pvPortMalloc+0xf4>
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	e7fe      	b.n	8006d9e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006db2:	69b8      	ldr	r0, [r7, #24]
 8006db4:	f000 f8f6 	bl	8006fa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <pvPortMalloc+0x178>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <pvPortMalloc+0x178>)
 8006dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dc6:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <pvPortMalloc+0x178>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <pvPortMalloc+0x180>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d203      	bcs.n	8006dda <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dd2:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <pvPortMalloc+0x178>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <pvPortMalloc+0x180>)
 8006dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <pvPortMalloc+0x174>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dee:	f7fe fb6b 	bl	80054c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <pvPortMalloc+0x164>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e7fe      	b.n	8006e0e <pvPortMalloc+0x162>
	return pvReturn;
 8006e10:	69fb      	ldr	r3, [r7, #28]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3728      	adds	r7, #40	; 0x28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200052f4 	.word	0x200052f4
 8006e20:	20005300 	.word	0x20005300
 8006e24:	200052f8 	.word	0x200052f8
 8006e28:	200052ec 	.word	0x200052ec
 8006e2c:	200052fc 	.word	0x200052fc

08006e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d046      	beq.n	8006ed0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e42:	2308      	movs	r3, #8
 8006e44:	425b      	negs	r3, r3
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4413      	add	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <vPortFree+0xa8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <vPortFree+0x42>
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e7fe      	b.n	8006e70 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <vPortFree+0x5e>
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	e7fe      	b.n	8006e8c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <vPortFree+0xa8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d019      	beq.n	8006ed0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d115      	bne.n	8006ed0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	4b0b      	ldr	r3, [pc, #44]	; (8006ed8 <vPortFree+0xa8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	43db      	mvns	r3, r3
 8006eae:	401a      	ands	r2, r3
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006eb4:	f7fe fafa 	bl	80054ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	4b07      	ldr	r3, [pc, #28]	; (8006edc <vPortFree+0xac>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	4a06      	ldr	r2, [pc, #24]	; (8006edc <vPortFree+0xac>)
 8006ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ec6:	6938      	ldr	r0, [r7, #16]
 8006ec8:	f000 f86c 	bl	8006fa4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ecc:	f7fe fafc 	bl	80054c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ed0:	bf00      	nop
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20005300 	.word	0x20005300
 8006edc:	200052f8 	.word	0x200052f8

08006ee0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ee6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006eea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006eec:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <prvHeapInit+0xac>)
 8006eee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00c      	beq.n	8006f14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3307      	adds	r3, #7
 8006efe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	4a1f      	ldr	r2, [pc, #124]	; (8006f8c <prvHeapInit+0xac>)
 8006f10:	4413      	add	r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f18:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <prvHeapInit+0xb0>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f1e:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <prvHeapInit+0xb0>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	4413      	add	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <prvHeapInit+0xb4>)
 8006f40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f42:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <prvHeapInit+0xb4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2200      	movs	r2, #0
 8006f48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f4a:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <prvHeapInit+0xb4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <prvHeapInit+0xb4>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	; (8006f98 <prvHeapInit+0xb8>)
 8006f6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <prvHeapInit+0xbc>)
 8006f76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f78:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <prvHeapInit+0xc0>)
 8006f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f7e:	601a      	str	r2, [r3, #0]
}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	200016ec 	.word	0x200016ec
 8006f90:	200052ec 	.word	0x200052ec
 8006f94:	200052f4 	.word	0x200052f4
 8006f98:	200052fc 	.word	0x200052fc
 8006f9c:	200052f8 	.word	0x200052f8
 8006fa0:	20005300 	.word	0x20005300

08006fa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fac:	4b28      	ldr	r3, [pc, #160]	; (8007050 <prvInsertBlockIntoFreeList+0xac>)
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e002      	b.n	8006fb8 <prvInsertBlockIntoFreeList+0x14>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d8f7      	bhi.n	8006fb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4413      	add	r3, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d108      	bne.n	8006fe6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d118      	bne.n	800702c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4b15      	ldr	r3, [pc, #84]	; (8007054 <prvInsertBlockIntoFreeList+0xb0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d00d      	beq.n	8007022 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	441a      	add	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e008      	b.n	8007034 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <prvInsertBlockIntoFreeList+0xb0>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e003      	b.n	8007034 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	429a      	cmp	r2, r3
 800703a:	d002      	beq.n	8007042 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	200052ec 	.word	0x200052ec
 8007054:	200052f4 	.word	0x200052f4

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4e0d      	ldr	r6, [pc, #52]	; (8007090 <__libc_init_array+0x38>)
 800705c:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 800705e:	1ba4      	subs	r4, r4, r6
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	2500      	movs	r5, #0
 8007064:	42a5      	cmp	r5, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	4e0b      	ldr	r6, [pc, #44]	; (8007098 <__libc_init_array+0x40>)
 800706a:	4c0c      	ldr	r4, [pc, #48]	; (800709c <__libc_init_array+0x44>)
 800706c:	f000 f83a 	bl	80070e4 <_init>
 8007070:	1ba4      	subs	r4, r4, r6
 8007072:	10a4      	asrs	r4, r4, #2
 8007074:	2500      	movs	r5, #0
 8007076:	42a5      	cmp	r5, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007080:	4798      	blx	r3
 8007082:	3501      	adds	r5, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800708a:	4798      	blx	r3
 800708c:	3501      	adds	r5, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	08007308 	.word	0x08007308
 8007094:	08007308 	.word	0x08007308
 8007098:	08007308 	.word	0x08007308
 800709c:	0800730c 	.word	0x0800730c

080070a0 <memcmp>:
 80070a0:	b530      	push	{r4, r5, lr}
 80070a2:	2400      	movs	r4, #0
 80070a4:	42a2      	cmp	r2, r4
 80070a6:	d101      	bne.n	80070ac <memcmp+0xc>
 80070a8:	2000      	movs	r0, #0
 80070aa:	e007      	b.n	80070bc <memcmp+0x1c>
 80070ac:	5d03      	ldrb	r3, [r0, r4]
 80070ae:	3401      	adds	r4, #1
 80070b0:	190d      	adds	r5, r1, r4
 80070b2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80070b6:	42ab      	cmp	r3, r5
 80070b8:	d0f4      	beq.n	80070a4 <memcmp+0x4>
 80070ba:	1b58      	subs	r0, r3, r5
 80070bc:	bd30      	pop	{r4, r5, pc}

080070be <memcpy>:
 80070be:	b510      	push	{r4, lr}
 80070c0:	1e43      	subs	r3, r0, #1
 80070c2:	440a      	add	r2, r1
 80070c4:	4291      	cmp	r1, r2
 80070c6:	d100      	bne.n	80070ca <memcpy+0xc>
 80070c8:	bd10      	pop	{r4, pc}
 80070ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d2:	e7f7      	b.n	80070c4 <memcpy+0x6>

080070d4 <memset>:
 80070d4:	4402      	add	r2, r0
 80070d6:	4603      	mov	r3, r0
 80070d8:	4293      	cmp	r3, r2
 80070da:	d100      	bne.n	80070de <memset+0xa>
 80070dc:	4770      	bx	lr
 80070de:	f803 1b01 	strb.w	r1, [r3], #1
 80070e2:	e7f9      	b.n	80070d8 <memset+0x4>

080070e4 <_init>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr

080070f0 <_fini>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr
