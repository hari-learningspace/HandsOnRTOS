
uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f0  080070f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f8  080070f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070fc  080070fc  000170fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059c8  20000010  08007110  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200059d8  08007110  000259d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d128  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000365f  00000000  00000000  0003d168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d0  00000000  00000000  000407c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001528  00000000  00000000  00041e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023733  00000000  00000000  000433c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012bef  00000000  00000000  00066af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d81b4  00000000  00000000  000796e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff0  00000000  00000000  00151914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f14 	.word	0x08006f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006f14 	.word	0x08006f14

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart2_BytesReceived */
  uart2_BytesReceivedHandle = osMessageQueueNew (8, sizeof(uint16_t), &uart2_BytesReceived_attributes);
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <MX_FREERTOS_Init+0x48>)
 80004d6:	2102      	movs	r1, #2
 80004d8:	2008      	movs	r0, #8
 80004da:	f003 fe97 	bl	800420c <osMessageQueueNew>
 80004de:	4602      	mov	r2, r0
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_FREERTOS_Init+0x4c>)
 80004e2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <MX_FREERTOS_Init+0x50>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480e      	ldr	r0, [pc, #56]	; (8000524 <MX_FREERTOS_Init+0x54>)
 80004ea:	f003 fdbb 	bl	8004064 <osThreadNew>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <MX_FREERTOS_Init+0x58>)
 80004f2:	601a      	str	r2, [r3, #0]

  /* creation of mypolledUartRec */
  mypolledUartRecHandle = osThreadNew(polledUartReceive, NULL, &mypolledUartRec_attributes);
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <MX_FREERTOS_Init+0x5c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <MX_FREERTOS_Init+0x60>)
 80004fa:	f003 fdb3 	bl	8004064 <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_FREERTOS_Init+0x64>)
 8000502:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(uartPrintOutTask, NULL, &myTask03_attributes);
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <MX_FREERTOS_Init+0x68>)
 8000506:	2100      	movs	r1, #0
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <MX_FREERTOS_Init+0x6c>)
 800050a:	f003 fdab 	bl	8004064 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_FREERTOS_Init+0x70>)
 8000512:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	080070ac 	.word	0x080070ac
 800051c:	20005368 	.word	0x20005368
 8000520:	08007040 	.word	0x08007040
 8000524:	08000545 	.word	0x08000545
 8000528:	20005304 	.word	0x20005304
 800052c:	08007064 	.word	0x08007064
 8000530:	08000555 	.word	0x08000555
 8000534:	20005364 	.word	0x20005364
 8000538:	08007088 	.word	0x08007088
 800053c:	0800058d 	.word	0x0800058d
 8000540:	200055cc 	.word	0x200055cc

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f003 fe2f 	bl	80041b0 <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0x8>

08000554 <polledUartReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_polledUartReceive */
void polledUartReceive(void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN polledUartReceive */
	uint8_t nextByte;
  /* Infinite loop */
  for(;;)
  {
	  while(!(USART2->SR & USART_SR_RXNE_Msk));
 800055c:	bf00      	nop
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <polledUartReceive+0x30>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f003 0320 	and.w	r3, r3, #32
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <polledUartReceive+0xa>
	  nextByte = USART2->DR;
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <polledUartReceive+0x30>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	73fb      	strb	r3, [r7, #15]
	  xQueueSend(uart2_BytesReceivedHandle, &nextByte, 0);
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <polledUartReceive+0x34>)
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	f107 010f 	add.w	r1, r7, #15
 800057a:	2300      	movs	r3, #0
 800057c:	2200      	movs	r2, #0
 800057e:	f004 f8f7 	bl	8004770 <xQueueGenericSend>
	  while(!(USART2->SR & USART_SR_RXNE_Msk));
 8000582:	e7eb      	b.n	800055c <polledUartReceive+0x8>
 8000584:	40004400 	.word	0x40004400
 8000588:	20005368 	.word	0x20005368

0800058c <uartPrintOutTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartPrintOutTask */
void uartPrintOutTask(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartPrintOutTask */
  char nextByte;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(uart2_BytesReceivedHandle, &nextByte, 5000);
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <uartPrintOutTask+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f107 010f 	add.w	r1, r7, #15
 800059c:	f241 3288 	movw	r2, #5000	; 0x1388
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 faaf 	bl	8004b04 <xQueueReceive>
	  SEGGER_SYSVIEW_PrintfHost("%c", nextByte);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <uartPrintOutTask+0x2c>)
 80005ac:	f003 fb34 	bl	8003c18 <SEGGER_SYSVIEW_PrintfHost>
	  xQueueReceive(uart2_BytesReceivedHandle, &nextByte, 5000);
 80005b0:	e7f0      	b.n	8000594 <uartPrintOutTask+0x8>
 80005b2:	bf00      	nop
 80005b4:	20005368 	.word	0x20005368
 80005b8:	08006f68 	.word	0x08006f68

080005bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_GPIO_Init+0x30>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <MX_GPIO_Init+0x30>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_GPIO_Init+0x30>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fa40 	bl	8000a78 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 80005f8:	f003 fb8c 	bl	8003d14 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005fc:	f002 fe6c 	bl	80032d8 <SEGGER_SYSVIEW_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f80e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f7ff ffda 	bl	80005bc <MX_GPIO_Init>
  MX_UART4_Init();
 8000608:	f000 f93c 	bl	8000884 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f964 	bl	80008d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000610:	f003 fcbe 	bl	8003f90 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000614:	f7ff ff5c 	bl	80004d0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000618:	f003 fcee 	bl	8003ff8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x2c>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 fc68 	bl	8006f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xb4>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <SystemClock_Config+0xb8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fcaf 	bl	8000ff4 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800069c:	f000 f830 	bl	8000700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 ff0a 	bl	80014d4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c6:	f000 f81b 	bl	8000700 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d101      	bne.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ee:	f000 f9e5 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40001400 	.word	0x40001400

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2037      	movs	r0, #55	; 0x37
 8000776:	f000 fa79 	bl	8000c6c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800077a:	2037      	movs	r0, #55	; 0x37
 800077c:	f000 fa92 	bl	8000ca4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_InitTick+0xa0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <HAL_InitTick+0xa0>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_InitTick+0xa0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 0320 	and.w	r3, r3, #32
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800079c:	f107 0210 	add.w	r2, r7, #16
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f860 	bl	800186c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ac:	f001 f836 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 80007b0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <HAL_InitTick+0xa4>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	0c9b      	lsrs	r3, r3, #18
 80007bc:	3b01      	subs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_InitTick+0xa8>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <HAL_InitTick+0xac>)
 80007c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_InitTick+0xa8>)
 80007c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007cc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_InitTick+0xa8>)
 80007d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_InitTick+0xa8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_InitTick+0xa8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <HAL_InitTick+0xa8>)
 80007e2:	f001 f875 	bl	80018d0 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d104      	bne.n	80007f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <HAL_InitTick+0xa8>)
 80007ee:	f001 f8a4 	bl	800193a <HAL_TIM_Base_Start_IT>
 80007f2:	4603      	mov	r3, r0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3730      	adds	r7, #48	; 0x30
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	431bde83 	.word	0x431bde83
 8000808:	2000582c 	.word	0x2000582c
 800080c:	40001400 	.word	0x40001400

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <TIM7_IRQHandler+0x10>)
 800084a:	f001 f89a 	bl	8001982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000582c 	.word	0x2000582c

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <SystemInit+0x28>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <SystemInit+0x28>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SystemInit+0x28>)
 800086e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000872:	609a      	str	r2, [r3, #8]
#endif
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_UART4_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_UART4_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_UART4_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_UART4_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_UART4_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_UART4_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_UART4_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_UART4_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_UART4_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_UART4_Init+0x4c>)
 80008bc:	f001 fa46 	bl	8001d4c <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80008c6:	f7ff ff1b 	bl	8000700 <Error_Handler>
  }

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000586c 	.word	0x2000586c
 80008d4:	40004c00 	.word	0x40004c00

080008d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f001 fa1c 	bl	8001d4c <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f7ff fef1 	bl	8000700 <Error_Handler>
  }

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200058ac 	.word	0x200058ac
 8000928:	40004400 	.word	0x40004400

0800092c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a32      	ldr	r2, [pc, #200]	; (8000a14 <HAL_UART_MspInit+0xe8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d12c      	bne.n	80009a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <HAL_UART_MspInit+0xec>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <HAL_UART_MspInit+0xec>)
 8000958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <HAL_UART_MspInit+0xec>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <HAL_UART_MspInit+0xec>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <HAL_UART_MspInit+0xec>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <HAL_UART_MspInit+0xec>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000986:	2303      	movs	r3, #3
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000996:	2308      	movs	r3, #8
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	481e      	ldr	r0, [pc, #120]	; (8000a1c <HAL_UART_MspInit+0xf0>)
 80009a2:	f000 f98d 	bl	8000cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a6:	e030      	b.n	8000a0a <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12b      	bne.n	8000a0a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_UART_MspInit+0xec>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0xec>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_MspInit+0xec>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_UART_MspInit+0xec>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_UART_MspInit+0xec>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_UART_MspInit+0xec>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ea:	230c      	movs	r3, #12
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fa:	2307      	movs	r3, #7
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_UART_MspInit+0xf0>)
 8000a06:	f000 f95b 	bl	8000cc0 <HAL_GPIO_Init>
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	; 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40004c00 	.word	0x40004c00
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40004400 	.word	0x40004400

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a2a:	e003      	b.n	8000a34 <LoopCopyDataInit>

08000a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a32:	3104      	adds	r1, #4

08000a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a3c:	d3f6      	bcc.n	8000a2c <CopyDataInit>
  ldr  r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a40:	e002      	b.n	8000a48 <LoopFillZerobss>

08000a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a44:	f842 3b04 	str.w	r3, [r2], #4

08000a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a4c:	d3f9      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ff03 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f006 fa19 	bl	8006e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fdcb 	bl	80005f0 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a60:	08007100 	.word	0x08007100
  ldr  r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a68:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a6c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a70:	200059d8 	.word	0x200059d8

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d8 	bl	8000c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fe5a 	bl	8000760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe30 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200058ec 	.word	0x200058ec

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200058ec 	.word	0x200058ec

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4c 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7e:	f7ff ff61 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff ffb1 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff80 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff54 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e16b      	b.n	8000fb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 815a 	bne.w	8000fae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00b      	beq.n	8000d1a <HAL_GPIO_Init+0x5a>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d007      	beq.n	8000d1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0e:	2b11      	cmp	r3, #17
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b12      	cmp	r3, #18
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0xfc>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b12      	cmp	r3, #18
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80b4 	beq.w	8000fae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	; (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a5a      	ldr	r2, [pc, #360]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d025      	beq.n	8000ee2 <HAL_GPIO_Init+0x222>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01f      	beq.n	8000ede <HAL_GPIO_Init+0x21e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4d      	ldr	r2, [pc, #308]	; (8000fe0 <HAL_GPIO_Init+0x320>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <HAL_GPIO_Init+0x328>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4a      	ldr	r2, [pc, #296]	; (8000fec <HAL_GPIO_Init+0x32c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x20a>
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	e00e      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eca:	2308      	movs	r3, #8
 8000ecc:	e00c      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef8:	4934      	ldr	r1, [pc, #208]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2a:	4a31      	ldr	r2, [pc, #196]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	f67f ae90 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3724      	adds	r7, #36	; 0x24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40021800 	.word	0x40021800
 8000fec:	40021c00 	.word	0x40021c00
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e25b      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d075      	beq.n	80010fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001012:	4ba3      	ldr	r3, [pc, #652]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b04      	cmp	r3, #4
 800101c:	d00c      	beq.n	8001038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101e:	4ba0      	ldr	r3, [pc, #640]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001026:	2b08      	cmp	r3, #8
 8001028:	d112      	bne.n	8001050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102a:	4b9d      	ldr	r3, [pc, #628]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001036:	d10b      	bne.n	8001050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d05b      	beq.n	80010fc <HAL_RCC_OscConfig+0x108>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d157      	bne.n	80010fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e236      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x74>
 800105a:	4b91      	ldr	r3, [pc, #580]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a90      	ldr	r2, [pc, #576]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e01d      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x98>
 8001072:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a8a      	ldr	r2, [pc, #552]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0xb0>
 800108c:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a83      	ldr	r2, [pc, #524]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a80      	ldr	r2, [pc, #512]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800109e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d013      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fd1a 	bl	8000ae4 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fd16 	bl	8000ae4 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	; 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e1fb      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0xc0>
 80010d2:	e014      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fd06 	bl	8000ae4 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fd02 	bl	8000ae4 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e1e7      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0xe8>
 80010fa:	e000      	b.n	80010fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d063      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110a:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001116:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111e:	2b08      	cmp	r3, #8
 8001120:	d11c      	bne.n	800115c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d116      	bne.n	800115c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HAL_RCC_OscConfig+0x152>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d001      	beq.n	8001146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e1bb      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4952      	ldr	r1, [pc, #328]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	e03a      	b.n	80011d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d020      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001164:	4b4f      	ldr	r3, [pc, #316]	; (80012a4 <HAL_RCC_OscConfig+0x2b0>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116a:	f7ff fcbb 	bl	8000ae4 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff fcb7 	bl	8000ae4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e19c      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4940      	ldr	r1, [pc, #256]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	600b      	str	r3, [r1, #0]
 80011a4:	e015      	b.n	80011d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <HAL_RCC_OscConfig+0x2b0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc9a 	bl	8000ae4 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc96 	bl	8000ae4 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e17b      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d030      	beq.n	8001240 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d016      	beq.n	8001214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_RCC_OscConfig+0x2b4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ec:	f7ff fc7a 	bl	8000ae4 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc76 	bl	8000ae4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e15b      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x200>
 8001212:	e015      	b.n	8001240 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_RCC_OscConfig+0x2b4>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fc63 	bl	8000ae4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fc5f 	bl	8000ae4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e144      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a0 	beq.w	800138e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10f      	bne.n	800127e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_RCC_OscConfig+0x2b8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	2b00      	cmp	r3, #0
 8001288:	d121      	bne.n	80012ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_RCC_OscConfig+0x2b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_RCC_OscConfig+0x2b8>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001296:	f7ff fc25 	bl	8000ae4 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129c:	e011      	b.n	80012c2 <HAL_RCC_OscConfig+0x2ce>
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	42470000 	.word	0x42470000
 80012a8:	42470e80 	.word	0x42470e80
 80012ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b0:	f7ff fc18 	bl	8000ae4 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e0fd      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b81      	ldr	r3, [pc, #516]	; (80014c8 <HAL_RCC_OscConfig+0x4d4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d106      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2f0>
 80012d6:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012da:	4a7c      	ldr	r2, [pc, #496]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6713      	str	r3, [r2, #112]	; 0x70
 80012e2:	e01c      	b.n	800131e <HAL_RCC_OscConfig+0x32a>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d10c      	bne.n	8001306 <HAL_RCC_OscConfig+0x312>
 80012ec:	4b77      	ldr	r3, [pc, #476]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80012ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f0:	4a76      	ldr	r2, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6713      	str	r3, [r2, #112]	; 0x70
 80012f8:	4b74      	ldr	r3, [pc, #464]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fc:	4a73      	ldr	r2, [pc, #460]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6713      	str	r3, [r2, #112]	; 0x70
 8001304:	e00b      	b.n	800131e <HAL_RCC_OscConfig+0x32a>
 8001306:	4b71      	ldr	r3, [pc, #452]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130a:	4a70      	ldr	r2, [pc, #448]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	6713      	str	r3, [r2, #112]	; 0x70
 8001312:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	4a6d      	ldr	r2, [pc, #436]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d015      	beq.n	8001352 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	f7ff fbdd 	bl	8000ae4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff fbd9 	bl	8000ae4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f241 3288 	movw	r2, #5000	; 0x1388
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e0bc      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0ee      	beq.n	800132e <HAL_RCC_OscConfig+0x33a>
 8001350:	e014      	b.n	800137c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fbc7 	bl	8000ae4 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	e00a      	b.n	8001370 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fbc3 	bl	8000ae4 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0a6      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001370:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ee      	bne.n	800135a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d105      	bne.n	800138e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001382:	4b52      	ldr	r3, [pc, #328]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a51      	ldr	r2, [pc, #324]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8092 	beq.w	80014bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d05c      	beq.n	800145e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d141      	bne.n	8001430 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <HAL_RCC_OscConfig+0x4dc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb97 	bl	8000ae4 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fb93 	bl	8000ae4 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e078      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013cc:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69da      	ldr	r2, [r3, #28]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	019b      	lsls	r3, r3, #6
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	3b01      	subs	r3, #1
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	061b      	lsls	r3, r3, #24
 80013fc:	4933      	ldr	r1, [pc, #204]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <HAL_RCC_OscConfig+0x4dc>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fb6c 	bl	8000ae4 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff fb68 	bl	8000ae4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e04d      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x41c>
 800142e:	e045      	b.n	80014bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x4dc>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fb55 	bl	8000ae4 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fb51 	bl	8000ae4 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e036      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x44a>
 800145c:	e02e      	b.n	80014bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e029      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_RCC_OscConfig+0x4d8>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	429a      	cmp	r2, r3
 800147c:	d11c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d115      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001492:	4013      	ands	r3, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001498:	4293      	cmp	r3, r2
 800149a:	d10d      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d106      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40007000 	.word	0x40007000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470060 	.word	0x42470060

080014d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0cc      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e8:	4b68      	ldr	r3, [pc, #416]	; (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d90c      	bls.n	8001510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b65      	ldr	r3, [pc, #404]	; (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b8      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001528:	4b59      	ldr	r3, [pc, #356]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4a58      	ldr	r2, [pc, #352]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800154a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b50      	ldr	r3, [pc, #320]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	494d      	ldr	r1, [pc, #308]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d044      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b47      	ldr	r3, [pc, #284]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e07f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d003      	beq.n	8001592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	2b03      	cmp	r3, #3
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e067      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 0203 	bic.w	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4934      	ldr	r1, [pc, #208]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c4:	f7ff fa8e 	bl	8000ae4 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015cc:	f7ff fa8a 	bl	8000ae4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e04f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 020c 	and.w	r2, r3, #12
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1eb      	bne.n	80015cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d20c      	bcs.n	800161c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e032      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4916      	ldr	r1, [pc, #88]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	490e      	ldr	r1, [pc, #56]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800165a:	f000 f821 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 800165e:	4601      	mov	r1, r0
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	fa21 f303 	lsr.w	r3, r1, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f870 	bl	8000760 <HAL_InitTick>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00
 8001690:	40023800 	.word	0x40023800
 8001694:	080070c4 	.word	0x080070c4
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b6:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d007      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x32>
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d008      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x38>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 808d 	bne.w	80017e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016cc:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80016ce:	60bb      	str	r3, [r7, #8]
       break;
 80016d0:	e08c      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d2:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_RCC_GetSysClockFreq+0x160>)
 80016d4:	60bb      	str	r3, [r7, #8]
      break;
 80016d6:	e089      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e2:	4b45      	ldr	r3, [pc, #276]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d023      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ee:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	099b      	lsrs	r3, r3, #6
 80016f4:	f04f 0400 	mov.w	r4, #0
 80016f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	ea03 0501 	and.w	r5, r3, r1
 8001704:	ea04 0602 	and.w	r6, r4, r2
 8001708:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <HAL_RCC_GetSysClockFreq+0x160>)
 800170a:	fb02 f106 	mul.w	r1, r2, r6
 800170e:	2200      	movs	r2, #0
 8001710:	fb02 f205 	mul.w	r2, r2, r5
 8001714:	440a      	add	r2, r1
 8001716:	493a      	ldr	r1, [pc, #232]	; (8001800 <HAL_RCC_GetSysClockFreq+0x160>)
 8001718:	fba5 0101 	umull	r0, r1, r5, r1
 800171c:	1853      	adds	r3, r2, r1
 800171e:	4619      	mov	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f04f 0400 	mov.w	r4, #0
 8001726:	461a      	mov	r2, r3
 8001728:	4623      	mov	r3, r4
 800172a:	f7fe fd51 	bl	80001d0 <__aeabi_uldivmod>
 800172e:	4603      	mov	r3, r0
 8001730:	460c      	mov	r4, r1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e049      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	099b      	lsrs	r3, r3, #6
 800173c:	f04f 0400 	mov.w	r4, #0
 8001740:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	ea03 0501 	and.w	r5, r3, r1
 800174c:	ea04 0602 	and.w	r6, r4, r2
 8001750:	4629      	mov	r1, r5
 8001752:	4632      	mov	r2, r6
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	f04f 0400 	mov.w	r4, #0
 800175c:	0154      	lsls	r4, r2, #5
 800175e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001762:	014b      	lsls	r3, r1, #5
 8001764:	4619      	mov	r1, r3
 8001766:	4622      	mov	r2, r4
 8001768:	1b49      	subs	r1, r1, r5
 800176a:	eb62 0206 	sbc.w	r2, r2, r6
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	f04f 0400 	mov.w	r4, #0
 8001776:	0194      	lsls	r4, r2, #6
 8001778:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800177c:	018b      	lsls	r3, r1, #6
 800177e:	1a5b      	subs	r3, r3, r1
 8001780:	eb64 0402 	sbc.w	r4, r4, r2
 8001784:	f04f 0100 	mov.w	r1, #0
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	00e2      	lsls	r2, r4, #3
 800178e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001792:	00d9      	lsls	r1, r3, #3
 8001794:	460b      	mov	r3, r1
 8001796:	4614      	mov	r4, r2
 8001798:	195b      	adds	r3, r3, r5
 800179a:	eb44 0406 	adc.w	r4, r4, r6
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	02a2      	lsls	r2, r4, #10
 80017a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017ac:	0299      	lsls	r1, r3, #10
 80017ae:	460b      	mov	r3, r1
 80017b0:	4614      	mov	r4, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f04f 0400 	mov.w	r4, #0
 80017bc:	461a      	mov	r2, r3
 80017be:	4623      	mov	r3, r4
 80017c0:	f7fe fd06 	bl	80001d0 <__aeabi_uldivmod>
 80017c4:	4603      	mov	r3, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	3301      	adds	r3, #1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	60bb      	str	r3, [r7, #8]
      break;
 80017e4:	e002      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80017e8:	60bb      	str	r3, [r7, #8]
      break;
 80017ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ec:	68bb      	ldr	r3, [r7, #8]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	017d7840 	.word	0x017d7840

08001804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_RCC_GetHCLKFreq+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000

0800181c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001820:	f7ff fff0 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001824:	4601      	mov	r1, r0
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	0a9b      	lsrs	r3, r3, #10
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	4a03      	ldr	r2, [pc, #12]	; (8001840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	080070d4 	.word	0x080070d4

08001844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001848:	f7ff ffdc 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 800184c:	4601      	mov	r1, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	0b5b      	lsrs	r3, r3, #13
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	080070d4 	.word	0x080070d4

0800186c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	220f      	movs	r2, #15
 800187a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	08db      	lsrs	r3, r3, #3
 80018a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_RCC_GetClockConfig+0x60>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 020f 	and.w	r2, r3, #15
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	601a      	str	r2, [r3, #0]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e01d      	b.n	800191e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f815 	bl	8001926 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f000 f968 	bl	8001be4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b06      	cmp	r3, #6
 8001962:	d007      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b02      	cmp	r3, #2
 8001996:	d122      	bne.n	80019de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d11b      	bne.n	80019de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f06f 0202 	mvn.w	r2, #2
 80019ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8ee 	bl	8001ba6 <HAL_TIM_IC_CaptureCallback>
 80019ca:	e005      	b.n	80019d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f8e0 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8f1 	bl	8001bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d122      	bne.n	8001a32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d11b      	bne.n	8001a32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f06f 0204 	mvn.w	r2, #4
 8001a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8c4 	bl	8001ba6 <HAL_TIM_IC_CaptureCallback>
 8001a1e:	e005      	b.n	8001a2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f8b6 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f8c7 	bl	8001bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d122      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d11b      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f06f 0208 	mvn.w	r2, #8
 8001a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f89a 	bl	8001ba6 <HAL_TIM_IC_CaptureCallback>
 8001a72:	e005      	b.n	8001a80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f88c 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f89d 	bl	8001bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b10      	cmp	r3, #16
 8001a92:	d122      	bne.n	8001ada <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d11b      	bne.n	8001ada <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0210 	mvn.w	r2, #16
 8001aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2208      	movs	r2, #8
 8001ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f870 	bl	8001ba6 <HAL_TIM_IC_CaptureCallback>
 8001ac6:	e005      	b.n	8001ad4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f862 	bl	8001b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f873 	bl	8001bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d10e      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0201 	mvn.w	r2, #1
 8001afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fdeb 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	d10e      	bne.n	8001b32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b80      	cmp	r3, #128	; 0x80
 8001b20:	d107      	bne.n	8001b32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f903 	bl	8001d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d10e      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	2b40      	cmp	r3, #64	; 0x40
 8001b4c:	d107      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f838 	bl	8001bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d10e      	bne.n	8001b8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d107      	bne.n	8001b8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0220 	mvn.w	r2, #32
 8001b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8cd 	bl	8001d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a40      	ldr	r2, [pc, #256]	; (8001cf8 <TIM_Base_SetConfig+0x114>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d013      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d00f      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3d      	ldr	r2, [pc, #244]	; (8001cfc <TIM_Base_SetConfig+0x118>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00b      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <TIM_Base_SetConfig+0x11c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <TIM_Base_SetConfig+0x120>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3a      	ldr	r2, [pc, #232]	; (8001d08 <TIM_Base_SetConfig+0x124>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d108      	bne.n	8001c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <TIM_Base_SetConfig+0x114>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c44:	d027      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <TIM_Base_SetConfig+0x118>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d023      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <TIM_Base_SetConfig+0x11c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <TIM_Base_SetConfig+0x120>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01b      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <TIM_Base_SetConfig+0x124>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d017      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <TIM_Base_SetConfig+0x128>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <TIM_Base_SetConfig+0x12c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <TIM_Base_SetConfig+0x130>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00b      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <TIM_Base_SetConfig+0x134>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <TIM_Base_SetConfig+0x138>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <TIM_Base_SetConfig+0x13c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d108      	bne.n	8001ca8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <TIM_Base_SetConfig+0x114>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d003      	beq.n	8001cdc <TIM_Base_SetConfig+0xf8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <TIM_Base_SetConfig+0x124>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d103      	bne.n	8001ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	615a      	str	r2, [r3, #20]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40010400 	.word	0x40010400
 8001d0c:	40014000 	.word	0x40014000
 8001d10:	40014400 	.word	0x40014400
 8001d14:	40014800 	.word	0x40014800
 8001d18:	40001800 	.word	0x40001800
 8001d1c:	40001c00 	.word	0x40001c00
 8001d20:	40002000 	.word	0x40002000

08001d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e03f      	b.n	8001dde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fdda 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f829 	bl	8001de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e2a:	f023 030c 	bic.w	r3, r3, #12
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e56:	f040 818b 	bne.w	8002170 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4ac1      	ldr	r2, [pc, #772]	; (8002164 <UART_SetConfig+0x37c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d005      	beq.n	8001e70 <UART_SetConfig+0x88>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4abf      	ldr	r2, [pc, #764]	; (8002168 <UART_SetConfig+0x380>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	f040 80bd 	bne.w	8001fea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e70:	f7ff fce8 	bl	8001844 <HAL_RCC_GetPCLK2Freq>
 8001e74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	461d      	mov	r5, r3
 8001e7a:	f04f 0600 	mov.w	r6, #0
 8001e7e:	46a8      	mov	r8, r5
 8001e80:	46b1      	mov	r9, r6
 8001e82:	eb18 0308 	adds.w	r3, r8, r8
 8001e86:	eb49 0409 	adc.w	r4, r9, r9
 8001e8a:	4698      	mov	r8, r3
 8001e8c:	46a1      	mov	r9, r4
 8001e8e:	eb18 0805 	adds.w	r8, r8, r5
 8001e92:	eb49 0906 	adc.w	r9, r9, r6
 8001e96:	f04f 0100 	mov.w	r1, #0
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ea2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ea6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001eaa:	4688      	mov	r8, r1
 8001eac:	4691      	mov	r9, r2
 8001eae:	eb18 0005 	adds.w	r0, r8, r5
 8001eb2:	eb49 0106 	adc.w	r1, r9, r6
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	461d      	mov	r5, r3
 8001ebc:	f04f 0600 	mov.w	r6, #0
 8001ec0:	196b      	adds	r3, r5, r5
 8001ec2:	eb46 0406 	adc.w	r4, r6, r6
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4623      	mov	r3, r4
 8001eca:	f7fe f981 	bl	80001d0 <__aeabi_uldivmod>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4ba5      	ldr	r3, [pc, #660]	; (800216c <UART_SetConfig+0x384>)
 8001ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	f04f 0600 	mov.w	r6, #0
 8001ee8:	46a9      	mov	r9, r5
 8001eea:	46b2      	mov	sl, r6
 8001eec:	eb19 0309 	adds.w	r3, r9, r9
 8001ef0:	eb4a 040a 	adc.w	r4, sl, sl
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	46a2      	mov	sl, r4
 8001ef8:	eb19 0905 	adds.w	r9, r9, r5
 8001efc:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f14:	4689      	mov	r9, r1
 8001f16:	4692      	mov	sl, r2
 8001f18:	eb19 0005 	adds.w	r0, r9, r5
 8001f1c:	eb4a 0106 	adc.w	r1, sl, r6
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	461d      	mov	r5, r3
 8001f26:	f04f 0600 	mov.w	r6, #0
 8001f2a:	196b      	adds	r3, r5, r5
 8001f2c:	eb46 0406 	adc.w	r4, r6, r6
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	f7fe f94c 	bl	80001d0 <__aeabi_uldivmod>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <UART_SetConfig+0x384>)
 8001f40:	fba3 1302 	umull	r1, r3, r3, r2
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	2164      	movs	r1, #100	; 0x64
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	3332      	adds	r3, #50	; 0x32
 8001f52:	4a86      	ldr	r2, [pc, #536]	; (800216c <UART_SetConfig+0x384>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f60:	4498      	add	r8, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	461d      	mov	r5, r3
 8001f66:	f04f 0600 	mov.w	r6, #0
 8001f6a:	46a9      	mov	r9, r5
 8001f6c:	46b2      	mov	sl, r6
 8001f6e:	eb19 0309 	adds.w	r3, r9, r9
 8001f72:	eb4a 040a 	adc.w	r4, sl, sl
 8001f76:	4699      	mov	r9, r3
 8001f78:	46a2      	mov	sl, r4
 8001f7a:	eb19 0905 	adds.w	r9, r9, r5
 8001f7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f82:	f04f 0100 	mov.w	r1, #0
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f96:	4689      	mov	r9, r1
 8001f98:	4692      	mov	sl, r2
 8001f9a:	eb19 0005 	adds.w	r0, r9, r5
 8001f9e:	eb4a 0106 	adc.w	r1, sl, r6
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	461d      	mov	r5, r3
 8001fa8:	f04f 0600 	mov.w	r6, #0
 8001fac:	196b      	adds	r3, r5, r5
 8001fae:	eb46 0406 	adc.w	r4, r6, r6
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	f7fe f90b 	bl	80001d0 <__aeabi_uldivmod>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	; (800216c <UART_SetConfig+0x384>)
 8001fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2164      	movs	r1, #100	; 0x64
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	3332      	adds	r3, #50	; 0x32
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <UART_SetConfig+0x384>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	f003 0207 	and.w	r2, r3, #7
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4442      	add	r2, r8
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e26f      	b.n	80024ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fea:	f7ff fc17 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 8001fee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	f04f 0600 	mov.w	r6, #0
 8001ff8:	46a8      	mov	r8, r5
 8001ffa:	46b1      	mov	r9, r6
 8001ffc:	eb18 0308 	adds.w	r3, r8, r8
 8002000:	eb49 0409 	adc.w	r4, r9, r9
 8002004:	4698      	mov	r8, r3
 8002006:	46a1      	mov	r9, r4
 8002008:	eb18 0805 	adds.w	r8, r8, r5
 800200c:	eb49 0906 	adc.w	r9, r9, r6
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800201c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002020:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002024:	4688      	mov	r8, r1
 8002026:	4691      	mov	r9, r2
 8002028:	eb18 0005 	adds.w	r0, r8, r5
 800202c:	eb49 0106 	adc.w	r1, r9, r6
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	461d      	mov	r5, r3
 8002036:	f04f 0600 	mov.w	r6, #0
 800203a:	196b      	adds	r3, r5, r5
 800203c:	eb46 0406 	adc.w	r4, r6, r6
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	f7fe f8c4 	bl	80001d0 <__aeabi_uldivmod>
 8002048:	4603      	mov	r3, r0
 800204a:	460c      	mov	r4, r1
 800204c:	461a      	mov	r2, r3
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <UART_SetConfig+0x384>)
 8002050:	fba3 2302 	umull	r2, r3, r3, r2
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	461d      	mov	r5, r3
 800205e:	f04f 0600 	mov.w	r6, #0
 8002062:	46a9      	mov	r9, r5
 8002064:	46b2      	mov	sl, r6
 8002066:	eb19 0309 	adds.w	r3, r9, r9
 800206a:	eb4a 040a 	adc.w	r4, sl, sl
 800206e:	4699      	mov	r9, r3
 8002070:	46a2      	mov	sl, r4
 8002072:	eb19 0905 	adds.w	r9, r9, r5
 8002076:	eb4a 0a06 	adc.w	sl, sl, r6
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002086:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800208a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800208e:	4689      	mov	r9, r1
 8002090:	4692      	mov	sl, r2
 8002092:	eb19 0005 	adds.w	r0, r9, r5
 8002096:	eb4a 0106 	adc.w	r1, sl, r6
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	461d      	mov	r5, r3
 80020a0:	f04f 0600 	mov.w	r6, #0
 80020a4:	196b      	adds	r3, r5, r5
 80020a6:	eb46 0406 	adc.w	r4, r6, r6
 80020aa:	461a      	mov	r2, r3
 80020ac:	4623      	mov	r3, r4
 80020ae:	f7fe f88f 	bl	80001d0 <__aeabi_uldivmod>
 80020b2:	4603      	mov	r3, r0
 80020b4:	460c      	mov	r4, r1
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <UART_SetConfig+0x384>)
 80020ba:	fba3 1302 	umull	r1, r3, r3, r2
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2164      	movs	r1, #100	; 0x64
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	3332      	adds	r3, #50	; 0x32
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <UART_SetConfig+0x384>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020da:	4498      	add	r8, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	461d      	mov	r5, r3
 80020e0:	f04f 0600 	mov.w	r6, #0
 80020e4:	46a9      	mov	r9, r5
 80020e6:	46b2      	mov	sl, r6
 80020e8:	eb19 0309 	adds.w	r3, r9, r9
 80020ec:	eb4a 040a 	adc.w	r4, sl, sl
 80020f0:	4699      	mov	r9, r3
 80020f2:	46a2      	mov	sl, r4
 80020f4:	eb19 0905 	adds.w	r9, r9, r5
 80020f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800210c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002110:	4689      	mov	r9, r1
 8002112:	4692      	mov	sl, r2
 8002114:	eb19 0005 	adds.w	r0, r9, r5
 8002118:	eb4a 0106 	adc.w	r1, sl, r6
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	461d      	mov	r5, r3
 8002122:	f04f 0600 	mov.w	r6, #0
 8002126:	196b      	adds	r3, r5, r5
 8002128:	eb46 0406 	adc.w	r4, r6, r6
 800212c:	461a      	mov	r2, r3
 800212e:	4623      	mov	r3, r4
 8002130:	f7fe f84e 	bl	80001d0 <__aeabi_uldivmod>
 8002134:	4603      	mov	r3, r0
 8002136:	460c      	mov	r4, r1
 8002138:	461a      	mov	r2, r3
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <UART_SetConfig+0x384>)
 800213c:	fba3 1302 	umull	r1, r3, r3, r2
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	2164      	movs	r1, #100	; 0x64
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	3332      	adds	r3, #50	; 0x32
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <UART_SetConfig+0x384>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	f003 0207 	and.w	r2, r3, #7
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4442      	add	r2, r8
 8002160:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002162:	e1b2      	b.n	80024ca <UART_SetConfig+0x6e2>
 8002164:	40011000 	.word	0x40011000
 8002168:	40011400 	.word	0x40011400
 800216c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4ad7      	ldr	r2, [pc, #860]	; (80024d4 <UART_SetConfig+0x6ec>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d005      	beq.n	8002186 <UART_SetConfig+0x39e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4ad6      	ldr	r2, [pc, #856]	; (80024d8 <UART_SetConfig+0x6f0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	f040 80d1 	bne.w	8002328 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002186:	f7ff fb5d 	bl	8001844 <HAL_RCC_GetPCLK2Freq>
 800218a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	469a      	mov	sl, r3
 8002190:	f04f 0b00 	mov.w	fp, #0
 8002194:	46d0      	mov	r8, sl
 8002196:	46d9      	mov	r9, fp
 8002198:	eb18 0308 	adds.w	r3, r8, r8
 800219c:	eb49 0409 	adc.w	r4, r9, r9
 80021a0:	4698      	mov	r8, r3
 80021a2:	46a1      	mov	r9, r4
 80021a4:	eb18 080a 	adds.w	r8, r8, sl
 80021a8:	eb49 090b 	adc.w	r9, r9, fp
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021c0:	4688      	mov	r8, r1
 80021c2:	4691      	mov	r9, r2
 80021c4:	eb1a 0508 	adds.w	r5, sl, r8
 80021c8:	eb4b 0609 	adc.w	r6, fp, r9
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	f04f 0400 	mov.w	r4, #0
 80021de:	0094      	lsls	r4, r2, #2
 80021e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021e4:	008b      	lsls	r3, r1, #2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4623      	mov	r3, r4
 80021ea:	4628      	mov	r0, r5
 80021ec:	4631      	mov	r1, r6
 80021ee:	f7fd ffef 	bl	80001d0 <__aeabi_uldivmod>
 80021f2:	4603      	mov	r3, r0
 80021f4:	460c      	mov	r4, r1
 80021f6:	461a      	mov	r2, r3
 80021f8:	4bb8      	ldr	r3, [pc, #736]	; (80024dc <UART_SetConfig+0x6f4>)
 80021fa:	fba3 2302 	umull	r2, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	469b      	mov	fp, r3
 8002208:	f04f 0c00 	mov.w	ip, #0
 800220c:	46d9      	mov	r9, fp
 800220e:	46e2      	mov	sl, ip
 8002210:	eb19 0309 	adds.w	r3, r9, r9
 8002214:	eb4a 040a 	adc.w	r4, sl, sl
 8002218:	4699      	mov	r9, r3
 800221a:	46a2      	mov	sl, r4
 800221c:	eb19 090b 	adds.w	r9, r9, fp
 8002220:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002230:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002234:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002238:	4689      	mov	r9, r1
 800223a:	4692      	mov	sl, r2
 800223c:	eb1b 0509 	adds.w	r5, fp, r9
 8002240:	eb4c 060a 	adc.w	r6, ip, sl
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f04f 0400 	mov.w	r4, #0
 8002256:	0094      	lsls	r4, r2, #2
 8002258:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800225c:	008b      	lsls	r3, r1, #2
 800225e:	461a      	mov	r2, r3
 8002260:	4623      	mov	r3, r4
 8002262:	4628      	mov	r0, r5
 8002264:	4631      	mov	r1, r6
 8002266:	f7fd ffb3 	bl	80001d0 <__aeabi_uldivmod>
 800226a:	4603      	mov	r3, r0
 800226c:	460c      	mov	r4, r1
 800226e:	461a      	mov	r2, r3
 8002270:	4b9a      	ldr	r3, [pc, #616]	; (80024dc <UART_SetConfig+0x6f4>)
 8002272:	fba3 1302 	umull	r1, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2164      	movs	r1, #100	; 0x64
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	3332      	adds	r3, #50	; 0x32
 8002284:	4a95      	ldr	r2, [pc, #596]	; (80024dc <UART_SetConfig+0x6f4>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002290:	4498      	add	r8, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	469b      	mov	fp, r3
 8002296:	f04f 0c00 	mov.w	ip, #0
 800229a:	46d9      	mov	r9, fp
 800229c:	46e2      	mov	sl, ip
 800229e:	eb19 0309 	adds.w	r3, r9, r9
 80022a2:	eb4a 040a 	adc.w	r4, sl, sl
 80022a6:	4699      	mov	r9, r3
 80022a8:	46a2      	mov	sl, r4
 80022aa:	eb19 090b 	adds.w	r9, r9, fp
 80022ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022c6:	4689      	mov	r9, r1
 80022c8:	4692      	mov	sl, r2
 80022ca:	eb1b 0509 	adds.w	r5, fp, r9
 80022ce:	eb4c 060a 	adc.w	r6, ip, sl
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	f04f 0400 	mov.w	r4, #0
 80022e4:	0094      	lsls	r4, r2, #2
 80022e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022ea:	008b      	lsls	r3, r1, #2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	4628      	mov	r0, r5
 80022f2:	4631      	mov	r1, r6
 80022f4:	f7fd ff6c 	bl	80001d0 <__aeabi_uldivmod>
 80022f8:	4603      	mov	r3, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b77      	ldr	r3, [pc, #476]	; (80024dc <UART_SetConfig+0x6f4>)
 8002300:	fba3 1302 	umull	r1, r3, r3, r2
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	2164      	movs	r1, #100	; 0x64
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	3332      	adds	r3, #50	; 0x32
 8002312:	4a72      	ldr	r2, [pc, #456]	; (80024dc <UART_SetConfig+0x6f4>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4442      	add	r2, r8
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	e0d0      	b.n	80024ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002328:	f7ff fa78 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 800232c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	469a      	mov	sl, r3
 8002332:	f04f 0b00 	mov.w	fp, #0
 8002336:	46d0      	mov	r8, sl
 8002338:	46d9      	mov	r9, fp
 800233a:	eb18 0308 	adds.w	r3, r8, r8
 800233e:	eb49 0409 	adc.w	r4, r9, r9
 8002342:	4698      	mov	r8, r3
 8002344:	46a1      	mov	r9, r4
 8002346:	eb18 080a 	adds.w	r8, r8, sl
 800234a:	eb49 090b 	adc.w	r9, r9, fp
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800235a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800235e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002362:	4688      	mov	r8, r1
 8002364:	4691      	mov	r9, r2
 8002366:	eb1a 0508 	adds.w	r5, sl, r8
 800236a:	eb4b 0609 	adc.w	r6, fp, r9
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4619      	mov	r1, r3
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	f04f 0400 	mov.w	r4, #0
 8002380:	0094      	lsls	r4, r2, #2
 8002382:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002386:	008b      	lsls	r3, r1, #2
 8002388:	461a      	mov	r2, r3
 800238a:	4623      	mov	r3, r4
 800238c:	4628      	mov	r0, r5
 800238e:	4631      	mov	r1, r6
 8002390:	f7fd ff1e 	bl	80001d0 <__aeabi_uldivmod>
 8002394:	4603      	mov	r3, r0
 8002396:	460c      	mov	r4, r1
 8002398:	461a      	mov	r2, r3
 800239a:	4b50      	ldr	r3, [pc, #320]	; (80024dc <UART_SetConfig+0x6f4>)
 800239c:	fba3 2302 	umull	r2, r3, r3, r2
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	469b      	mov	fp, r3
 80023aa:	f04f 0c00 	mov.w	ip, #0
 80023ae:	46d9      	mov	r9, fp
 80023b0:	46e2      	mov	sl, ip
 80023b2:	eb19 0309 	adds.w	r3, r9, r9
 80023b6:	eb4a 040a 	adc.w	r4, sl, sl
 80023ba:	4699      	mov	r9, r3
 80023bc:	46a2      	mov	sl, r4
 80023be:	eb19 090b 	adds.w	r9, r9, fp
 80023c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023da:	4689      	mov	r9, r1
 80023dc:	4692      	mov	sl, r2
 80023de:	eb1b 0509 	adds.w	r5, fp, r9
 80023e2:	eb4c 060a 	adc.w	r6, ip, sl
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f04f 0400 	mov.w	r4, #0
 80023f8:	0094      	lsls	r4, r2, #2
 80023fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023fe:	008b      	lsls	r3, r1, #2
 8002400:	461a      	mov	r2, r3
 8002402:	4623      	mov	r3, r4
 8002404:	4628      	mov	r0, r5
 8002406:	4631      	mov	r1, r6
 8002408:	f7fd fee2 	bl	80001d0 <__aeabi_uldivmod>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	461a      	mov	r2, r3
 8002412:	4b32      	ldr	r3, [pc, #200]	; (80024dc <UART_SetConfig+0x6f4>)
 8002414:	fba3 1302 	umull	r1, r3, r3, r2
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	2164      	movs	r1, #100	; 0x64
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	3332      	adds	r3, #50	; 0x32
 8002426:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <UART_SetConfig+0x6f4>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002432:	4498      	add	r8, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	469b      	mov	fp, r3
 8002438:	f04f 0c00 	mov.w	ip, #0
 800243c:	46d9      	mov	r9, fp
 800243e:	46e2      	mov	sl, ip
 8002440:	eb19 0309 	adds.w	r3, r9, r9
 8002444:	eb4a 040a 	adc.w	r4, sl, sl
 8002448:	4699      	mov	r9, r3
 800244a:	46a2      	mov	sl, r4
 800244c:	eb19 090b 	adds.w	r9, r9, fp
 8002450:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002468:	4689      	mov	r9, r1
 800246a:	4692      	mov	sl, r2
 800246c:	eb1b 0509 	adds.w	r5, fp, r9
 8002470:	eb4c 060a 	adc.w	r6, ip, sl
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	f04f 0400 	mov.w	r4, #0
 8002486:	0094      	lsls	r4, r2, #2
 8002488:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800248c:	008b      	lsls	r3, r1, #2
 800248e:	461a      	mov	r2, r3
 8002490:	4623      	mov	r3, r4
 8002492:	4628      	mov	r0, r5
 8002494:	4631      	mov	r1, r6
 8002496:	f7fd fe9b 	bl	80001d0 <__aeabi_uldivmod>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	461a      	mov	r2, r3
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <UART_SetConfig+0x6f4>)
 80024a2:	fba3 1302 	umull	r1, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2164      	movs	r1, #100	; 0x64
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	3332      	adds	r3, #50	; 0x32
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <UART_SetConfig+0x6f4>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4442      	add	r2, r8
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	e7ff      	b.n	80024ca <UART_SetConfig+0x6e2>
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024d4:	40011000 	.word	0x40011000
 80024d8:	40011400 	.word	0x40011400
 80024dc:	51eb851f 	.word	0x51eb851f

080024e0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <_DoInit+0x8c>)
 80024e8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <_DoInit+0x90>)
 80024fa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <_DoInit+0x94>)
 8002500:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002508:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <_DoInit+0x90>)
 8002520:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_DoInit+0x98>)
 8002526:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2210      	movs	r2, #16
 800252c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3307      	adds	r3, #7
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <_DoInit+0x9c>)
 8002546:	6810      	ldr	r0, [r2, #0]
 8002548:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <_DoInit+0xa0>)
 800254e:	6810      	ldr	r0, [r2, #0]
 8002550:	6018      	str	r0, [r3, #0]
 8002552:	8891      	ldrh	r1, [r2, #4]
 8002554:	7992      	ldrb	r2, [r2, #6]
 8002556:	8099      	strh	r1, [r3, #4]
 8002558:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	719a      	strb	r2, [r3, #6]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	200058f0 	.word	0x200058f0
 8002570:	08006f6c 	.word	0x08006f6c
 8002574:	2000002c 	.word	0x2000002c
 8002578:	2000042c 	.word	0x2000042c
 800257c:	08006f78 	.word	0x08006f78
 8002580:	08006f7c 	.word	0x08006f7c

08002584 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002590:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <SEGGER_RTT_ReadNoLock+0x100>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <SEGGER_RTT_ReadNoLock+0x18>
 8002598:	f7ff ffa2 	bl	80024e0 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	4a36      	ldr	r2, [pc, #216]	; (8002684 <SEGGER_RTT_ReadNoLock+0x100>)
 80025aa:	4413      	add	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80025c2:	6a3a      	ldr	r2, [r7, #32]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d92a      	bls.n	8002620 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4293      	cmp	r3, r2
 80025da:	bf28      	it	cs
 80025dc:	4613      	movcs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	4413      	add	r3, r2
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4619      	mov	r1, r3
 80025ec:	69f8      	ldr	r0, [r7, #28]
 80025ee:	f004 fc7e 	bl	8006eee <memcpy>
    NumBytesRead += NumBytesRem;
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	6a3a      	ldr	r2, [r7, #32]
 8002618:	429a      	cmp	r2, r3
 800261a:	d101      	bne.n	8002620 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4293      	cmp	r3, r2
 800262e:	bf28      	it	cs
 8002630:	4613      	movcs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	4413      	add	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4619      	mov	r1, r3
 8002646:	69f8      	ldr	r0, [r7, #28]
 8002648:	f004 fc51 	bl	8006eee <memcpy>
    NumBytesRead += NumBytesRem;
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800267a:	4618      	mov	r0, r3
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200058f0 	.word	0x200058f0

08002688 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4a3f      	ldr	r2, [pc, #252]	; (80027a4 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80026a6:	4413      	add	r3, r2
 80026a8:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d854      	bhi.n	8002768 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d30f      	bcc.n	80026f2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4413      	add	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 fc05 	bl	8006eee <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	441a      	add	r2, r3
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e054      	b.n	800279c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d34b      	bcc.n	800279a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	d90e      	bls.n	8002732 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4413      	add	r3, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002720:	4618      	mov	r0, r3
 8002722:	f004 fbe4 	bl	8006eee <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	441a      	add	r2, r3
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	e018      	b.n	8002764 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4413      	add	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fbd5 	bl	8006eee <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	6858      	ldr	r0, [r3, #4]
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	18d1      	adds	r1, r2, r3
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	461a      	mov	r2, r3
 8002756:	f004 fbca 	bl	8006eee <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad2      	subs	r2, r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002764:	2301      	movs	r3, #1
 8002766:	e019      	b.n	800279c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d30f      	bcc.n	800279a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4413      	add	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fbb1 	bl	8006eee <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	441a      	add	r2, r3
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200058f0 	.word	0x200058f0

080027a8 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80027be:	f7ff fe8f 	bl	80024e0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d24c      	bcs.n	8002868 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80027ce:	f3ef 8311 	mrs	r3, BASEPRI
 80027d2:	f04f 0120 	mov.w	r1, #32
 80027d6:	f381 8811 	msr	BASEPRI, r1
 80027da:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d032      	beq.n	8002848 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80027e2:	4925      	ldr	r1, [pc, #148]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80027f6:	4920      	ldr	r1, [pc, #128]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3304      	adds	r3, #4
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800280c:	491a      	ldr	r1, [pc, #104]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	3320      	adds	r3, #32
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002820:	4915      	ldr	r1, [pc, #84]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	3328      	adds	r3, #40	; 0x28
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002834:	4910      	ldr	r1, [pc, #64]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	3324      	adds	r3, #36	; 0x24
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002848:	490b      	ldr	r1, [pc, #44]	; (8002878 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	332c      	adds	r3, #44	; 0x2c
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e002      	b.n	800286e <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
 800286c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800286e:	697b      	ldr	r3, [r7, #20]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200058f0 	.word	0x200058f0

0800287c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002892:	f7ff fe25 	bl	80024e0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4293      	cmp	r3, r2
 80028a0:	d24b      	bcs.n	800293a <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80028a2:	f3ef 8311 	mrs	r3, BASEPRI
 80028a6:	f04f 0120 	mov.w	r1, #32
 80028aa:	f381 8811 	msr	BASEPRI, r1
 80028ae:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d031      	beq.n	800291a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80028b6:	4925      	ldr	r1, [pc, #148]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80028ca:	4920      	ldr	r1, [pc, #128]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3364      	adds	r3, #100	; 0x64
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80028de:	491b      	ldr	r1, [pc, #108]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	3368      	adds	r3, #104	; 0x68
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80028f2:	4916      	ldr	r1, [pc, #88]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3370      	adds	r3, #112	; 0x70
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002906:	4911      	ldr	r1, [pc, #68]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	336c      	adds	r3, #108	; 0x6c
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800291a:	490c      	ldr	r1, [pc, #48]	; (800294c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3374      	adds	r3, #116	; 0x74
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e002      	b.n	8002940 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002940:	697b      	ldr	r3, [r7, #20]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200058f0 	.word	0x200058f0

08002950 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002960:	e002      	b.n	8002968 <_EncodeStr+0x18>
    Len++;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	3301      	adds	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f6      	bne.n	8002962 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	d901      	bls.n	8002980 <_EncodeStr+0x30>
    Len = Limit;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2bfe      	cmp	r3, #254	; 0xfe
 8002984:	d806      	bhi.n	8002994 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e011      	b.n	80029b8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60fa      	str	r2, [r7, #12]
 800299a:	22ff      	movs	r2, #255	; 0xff
 800299c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	60fa      	str	r2, [r7, #12]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	0a19      	lsrs	r1, r3, #8
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	60fa      	str	r2, [r7, #12]
 80029b4:	b2ca      	uxtb	r2, r1
 80029b6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029bc:	e00a      	b.n	80029d4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	1c53      	adds	r3, r2, #1
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1c59      	adds	r1, r3, #1
 80029c8:	60f9      	str	r1, [r7, #12]
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	701a      	strb	r2, [r3, #0]
    n++;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3f0      	bcc.n	80029be <_EncodeStr+0x6e>
  }
  return pPayload;
 80029dc:	68fb      	ldr	r3, [r7, #12]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002a08:	1cfb      	adds	r3, r7, #3
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7ff fdb8 	bl	8002584 <SEGGER_RTT_ReadNoLock>
 8002a14:	4603      	mov	r3, r0
 8002a16:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	dd44      	ble.n	8002aa8 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d01a      	beq.n	8002a5a <_HandleIncomingPacket+0x58>
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	dc06      	bgt.n	8002a36 <_HandleIncomingPacket+0x34>
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d010      	beq.n	8002a4e <_HandleIncomingPacket+0x4c>
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	dc11      	bgt.n	8002a54 <_HandleIncomingPacket+0x52>
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d009      	beq.n	8002a48 <_HandleIncomingPacket+0x46>
 8002a34:	e02d      	b.n	8002a92 <_HandleIncomingPacket+0x90>
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d015      	beq.n	8002a66 <_HandleIncomingPacket+0x64>
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	db10      	blt.n	8002a60 <_HandleIncomingPacket+0x5e>
 8002a3e:	2b07      	cmp	r3, #7
 8002a40:	d014      	beq.n	8002a6c <_HandleIncomingPacket+0x6a>
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d015      	beq.n	8002a72 <_HandleIncomingPacket+0x70>
 8002a46:	e024      	b.n	8002a92 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002a48:	f000 fc46 	bl	80032d8 <SEGGER_SYSVIEW_Start>
      break;
 8002a4c:	e031      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002a4e:	f000 fcff 	bl	8003450 <SEGGER_SYSVIEW_Stop>
      break;
 8002a52:	e02e      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002a54:	f000 feda 	bl	800380c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002a58:	e02b      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002a5a:	f000 fe9f 	bl	800379c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002a5e:	e028      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002a60:	f000 fd1c 	bl	800349c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002a64:	e025      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002a66:	f001 f899 	bl	8003b9c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002a6a:	e022      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002a6c:	f001 f878 	bl	8003b60 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002a70:	e01f      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002a72:	1cfb      	adds	r3, r7, #3
 8002a74:	2201      	movs	r2, #1
 8002a76:	4619      	mov	r1, r3
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f7ff fd83 	bl	8002584 <SEGGER_RTT_ReadNoLock>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	dd11      	ble.n	8002aac <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 ffe8 	bl	8003a60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002a90:	e00c      	b.n	8002aac <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da0a      	bge.n	8002ab0 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002a9a:	1cfb      	adds	r3, r7, #3
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7ff fd6f 	bl	8002584 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002aa6:	e003      	b.n	8002ab0 <_HandleIncomingPacket+0xae>
    }
  }
 8002aa8:	bf00      	nop
 8002aaa:	e002      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
      break;
 8002aac:	bf00      	nop
 8002aae:	e000      	b.n	8002ab2 <_HandleIncomingPacket+0xb0>
      break;
 8002ab0:	bf00      	nop
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <_TrySendOverflowPacket+0xd8>)
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad6:	e00b      	b.n	8002af0 <_TrySendOverflowPacket+0x34>
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	1c59      	adds	r1, r3, #1
 8002ae0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	09db      	lsrs	r3, r3, #7
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	2b7f      	cmp	r3, #127	; 0x7f
 8002af4:	d8f0      	bhi.n	8002ad8 <_TrySendOverflowPacket+0x1c>
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <_TrySendOverflowPacket+0xdc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <_TrySendOverflowPacket+0xd8>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	e00b      	b.n	8002b38 <_TrySendOverflowPacket+0x7c>
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	1c59      	adds	r1, r3, #1
 8002b28:	6279      	str	r1, [r7, #36]	; 0x24
 8002b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	09db      	lsrs	r3, r3, #7
 8002b36:	623b      	str	r3, [r7, #32]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b3c:	d8f0      	bhi.n	8002b20 <_TrySendOverflowPacket+0x64>
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	627a      	str	r2, [r7, #36]	; 0x24
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f7ff fd94 	bl	8002688 <SEGGER_RTT_WriteSkipNoLock>
 8002b60:	4603      	mov	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <_TrySendOverflowPacket+0xd8>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_TrySendOverflowPacket+0xd8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <_TrySendOverflowPacket+0xd8>)
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e004      	b.n	8002b88 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <_TrySendOverflowPacket+0xd8>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <_TrySendOverflowPacket+0xd8>)
 8002b86:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002b88:	693b      	ldr	r3, [r7, #16]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3730      	adds	r7, #48	; 0x30
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000844 	.word	0x20000844
 8002b98:	e0001004 	.word	0xe0001004

08002b9c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002ba8:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <_SendPacket+0x19c>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d010      	beq.n	8002bd2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002bb0:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <_SendPacket+0x19c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a1 	beq.w	8002cfc <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002bba:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <_SendPacket+0x19c>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d109      	bne.n	8002bd6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002bc2:	f7ff ff7b 	bl	8002abc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <_SendPacket+0x19c>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	f040 8098 	bne.w	8002d00 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002bd0:	e001      	b.n	8002bd6 <_SendPacket+0x3a>
    goto Send;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <_SendPacket+0x3c>
Send:
 8002bd6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b1f      	cmp	r3, #31
 8002bdc:	d809      	bhi.n	8002bf2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002bde:	4b56      	ldr	r3, [pc, #344]	; (8002d38 <_SendPacket+0x19c>)
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 8089 	bne.w	8002d04 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b17      	cmp	r3, #23
 8002bf6:	d807      	bhi.n	8002c08 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e03d      	b.n	8002c84 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b7f      	cmp	r3, #127	; 0x7f
 8002c14:	d912      	bls.n	8002c3c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	09da      	lsrs	r2, r3, #7
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	3a01      	subs	r2, #1
 8002c2e:	60fa      	str	r2, [r7, #12]
 8002c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e006      	b.n	8002c4a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c4e:	d912      	bls.n	8002c76 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	09da      	lsrs	r2, r3, #7
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	3a01      	subs	r2, #1
 8002c68:	60fa      	str	r2, [r7, #12]
 8002c6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e006      	b.n	8002c84 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <_SendPacket+0x1a0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <_SendPacket+0x19c>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	e00b      	b.n	8002cb6 <_SendPacket+0x11a>
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	1c59      	adds	r1, r3, #1
 8002ca6:	6279      	str	r1, [r7, #36]	; 0x24
 8002ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	09db      	lsrs	r3, r3, #7
 8002cb4:	623b      	str	r3, [r7, #32]
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cba:	d8f0      	bhi.n	8002c9e <_SendPacket+0x102>
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8002cc2:	6a3a      	ldr	r2, [r7, #32]
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f7ff fcd6 	bl	8002688 <SEGGER_RTT_WriteSkipNoLock>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002ce6:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <_SendPacket+0x19c>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	60d3      	str	r3, [r2, #12]
 8002cec:	e00b      	b.n	8002d06 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <_SendPacket+0x19c>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <_SendPacket+0x19c>)
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e004      	b.n	8002d06 <_SendPacket+0x16a>
    goto SendDone;
 8002cfc:	bf00      	nop
 8002cfe:	e002      	b.n	8002d06 <_SendPacket+0x16a>
      goto SendDone;
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <_SendPacket+0x16a>
      goto SendDone;
 8002d04:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <_SendPacket+0x1a4>)
 8002d08:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <_SendPacket+0x1a4>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d00b      	beq.n	8002d2e <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <_SendPacket+0x19c>)
 8002d18:	789b      	ldrb	r3, [r3, #2]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <_SendPacket+0x19c>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002d24:	f7ff fe6d 	bl	8002a02 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <_SendPacket+0x19c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	; 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000844 	.word	0x20000844
 8002d3c:	e0001004 	.word	0xe0001004
 8002d40:	200058f0 	.word	0x200058f0

08002d44 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0a2      	sub	sp, #136	; 0x88
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8002d5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8002d66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01e      	beq.n	8002dac <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 8002d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d72:	2b25      	cmp	r3, #37	; 0x25
 8002d74:	d1f1      	bne.n	8002d5a <_VPrintHost+0x16>
      c = *p;
 8002d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1d19      	adds	r1, r3, #4
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6011      	str	r1, [r2, #0]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d94:	460a      	mov	r2, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8002da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d002      	beq.n	8002db0 <_VPrintHost+0x6c>
    c = *p++;
 8002daa:	e7d6      	b.n	8002d5a <_VPrintHost+0x16>
      break;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <_VPrintHost+0x6e>
        break;
 8002db0:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8002db2:	f3ef 8311 	mrs	r3, BASEPRI
 8002db6:	f04f 0120 	mov.w	r1, #32
 8002dba:	f381 8811 	msr	BASEPRI, r1
 8002dbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dc0:	483f      	ldr	r0, [pc, #252]	; (8002ec0 <_VPrintHost+0x17c>)
 8002dc2:	f7ff fe12 	bl	80029ea <_PreparePacket>
 8002dc6:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002dce:	f7ff fdbf 	bl	8002950 <_EncodeStr>
 8002dd2:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8002dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd6:	677b      	str	r3, [r7, #116]	; 0x74
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	673b      	str	r3, [r7, #112]	; 0x70
 8002ddc:	e00b      	b.n	8002df6 <_VPrintHost+0xb2>
 8002dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de4:	1c59      	adds	r1, r3, #1
 8002de6:	6779      	str	r1, [r7, #116]	; 0x74
 8002de8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df2:	09db      	lsrs	r3, r3, #7
 8002df4:	673b      	str	r3, [r7, #112]	; 0x70
 8002df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dfa:	d8f0      	bhi.n	8002dde <_VPrintHost+0x9a>
 8002dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	677a      	str	r2, [r7, #116]	; 0x74
 8002e02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0a:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8002e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e16:	e00b      	b.n	8002e30 <_VPrintHost+0xec>
 8002e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1e:	1c59      	adds	r1, r3, #1
 8002e20:	66f9      	str	r1, [r7, #108]	; 0x6c
 8002e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2c:	09db      	lsrs	r3, r3, #7
 8002e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e32:	2b7f      	cmp	r3, #127	; 0x7f
 8002e34:	d8f0      	bhi.n	8002e18 <_VPrintHost+0xd4>
 8002e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8002e4e:	e022      	b.n	8002e96 <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 8002e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e52:	667b      	str	r3, [r7, #100]	; 0x64
 8002e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e5c:	e00b      	b.n	8002e76 <_VPrintHost+0x132>
 8002e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e64:	1c59      	adds	r1, r3, #1
 8002e66:	6679      	str	r1, [r7, #100]	; 0x64
 8002e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e72:	09db      	lsrs	r3, r3, #7
 8002e74:	663b      	str	r3, [r7, #96]	; 0x60
 8002e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e78:	2b7f      	cmp	r3, #127	; 0x7f
 8002e7a:	d8f0      	bhi.n	8002e5e <_VPrintHost+0x11a>
 8002e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	667a      	str	r2, [r7, #100]	; 0x64
 8002e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e8a:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8002e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e90:	3304      	adds	r3, #4
 8002e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8002e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e9a:	1e5a      	subs	r2, r3, #1
 8002e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1d5      	bne.n	8002e50 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002ea4:	221a      	movs	r2, #26
 8002ea6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002ea8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002eaa:	f7ff fe77 	bl	8002b9c <_SendPacket>
    RECORD_END();
 8002eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb0:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3788      	adds	r7, #136	; 0x88
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000874 	.word	0x20000874

08002ec4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <SEGGER_SYSVIEW_Init+0x68>)
 8002edc:	4914      	ldr	r1, [pc, #80]	; (8002f30 <SEGGER_SYSVIEW_Init+0x6c>)
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7ff fc62 	bl	80027a8 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2308      	movs	r3, #8
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <SEGGER_SYSVIEW_Init+0x70>)
 8002eec:	4910      	ldr	r1, [pc, #64]	; (8002f30 <SEGGER_SYSVIEW_Init+0x6c>)
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f7ff fcc4 	bl	800287c <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <SEGGER_SYSVIEW_Init+0x74>)
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <SEGGER_SYSVIEW_Init+0x78>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <SEGGER_SYSVIEW_Init+0x74>)
 8002f02:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <SEGGER_SYSVIEW_Init+0x74>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <SEGGER_SYSVIEW_Init+0x74>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002f10:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <SEGGER_SYSVIEW_Init+0x74>)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <SEGGER_SYSVIEW_Init+0x74>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <SEGGER_SYSVIEW_Init+0x74>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000043c 	.word	0x2000043c
 8002f30:	08006f84 	.word	0x08006f84
 8002f34:	2000083c 	.word	0x2000083c
 8002f38:	20000844 	.word	0x20000844
 8002f3c:	e0001004 	.word	0xe0001004

08002f40 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6113      	str	r3, [r2, #16]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000844 	.word	0x20000844

08002f60 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002f68:	f3ef 8311 	mrs	r3, BASEPRI
 8002f6c:	f04f 0120 	mov.w	r1, #32
 8002f70:	f381 8811 	msr	BASEPRI, r1
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4808      	ldr	r0, [pc, #32]	; (8002f98 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002f78:	f7ff fd37 	bl	80029ea <_PreparePacket>
 8002f7c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68b8      	ldr	r0, [r7, #8]
 8002f84:	f7ff fe0a 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f383 8811 	msr	BASEPRI, r3
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000874 	.word	0x20000874

08002f9c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8002faa:	f04f 0120 	mov.w	r1, #32
 8002fae:	f381 8811 	msr	BASEPRI, r1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	4816      	ldr	r0, [pc, #88]	; (8003010 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002fb6:	f7ff fd18 	bl	80029ea <_PreparePacket>
 8002fba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e00b      	b.n	8002fe2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	1c59      	adds	r1, r3, #1
 8002fd2:	61f9      	str	r1, [r7, #28]
 8002fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	09db      	lsrs	r3, r3, #7
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe6:	d8f0      	bhi.n	8002fca <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	61fa      	str	r2, [r7, #28]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	6938      	ldr	r0, [r7, #16]
 8002ffe:	f7ff fdcd 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f383 8811 	msr	BASEPRI, r3
}
 8003008:	bf00      	nop
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000874 	.word	0x20000874

08003014 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003020:	f3ef 8311 	mrs	r3, BASEPRI
 8003024:	f04f 0120 	mov.w	r1, #32
 8003028:	f381 8811 	msr	BASEPRI, r1
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	4825      	ldr	r0, [pc, #148]	; (80030c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003030:	f7ff fcdb 	bl	80029ea <_PreparePacket>
 8003034:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
 8003042:	e00b      	b.n	800305c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	1c59      	adds	r1, r3, #1
 800304c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800304e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	09db      	lsrs	r3, r3, #7
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2b7f      	cmp	r3, #127	; 0x7f
 8003060:	d8f0      	bhi.n	8003044 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	623b      	str	r3, [r7, #32]
 800307a:	e00b      	b.n	8003094 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	6279      	str	r1, [r7, #36]	; 0x24
 8003086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	09db      	lsrs	r3, r3, #7
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2b7f      	cmp	r3, #127	; 0x7f
 8003098:	d8f0      	bhi.n	800307c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	627a      	str	r2, [r7, #36]	; 0x24
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	69b8      	ldr	r0, [r7, #24]
 80030b0:	f7ff fd74 	bl	8002b9c <_SendPacket>
  RECORD_END();
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f383 8811 	msr	BASEPRI, r3
}
 80030ba:	bf00      	nop
 80030bc:	3730      	adds	r7, #48	; 0x30
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000874 	.word	0x20000874

080030c8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08e      	sub	sp, #56	; 0x38
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80030d6:	f3ef 8311 	mrs	r3, BASEPRI
 80030da:	f04f 0120 	mov.w	r1, #32
 80030de:	f381 8811 	msr	BASEPRI, r1
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	4832      	ldr	r0, [pc, #200]	; (80031b0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80030e6:	f7ff fc80 	bl	80029ea <_PreparePacket>
 80030ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
 80030f8:	e00b      	b.n	8003112 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	1c59      	adds	r1, r3, #1
 8003102:	6379      	str	r1, [r7, #52]	; 0x34
 8003104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	09db      	lsrs	r3, r3, #7
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	2b7f      	cmp	r3, #127	; 0x7f
 8003116:	d8f0      	bhi.n	80030fa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	637a      	str	r2, [r7, #52]	; 0x34
 800311e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003130:	e00b      	b.n	800314a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	b2da      	uxtb	r2, r3
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	1c59      	adds	r1, r3, #1
 800313a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800313c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	09db      	lsrs	r3, r3, #7
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	2b7f      	cmp	r3, #127	; 0x7f
 800314e:	d8f0      	bhi.n	8003132 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	e00b      	b.n	8003182 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1c59      	adds	r1, r3, #1
 8003172:	6279      	str	r1, [r7, #36]	; 0x24
 8003174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	09db      	lsrs	r3, r3, #7
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	2b7f      	cmp	r3, #127	; 0x7f
 8003186:	d8f0      	bhi.n	800316a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	627a      	str	r2, [r7, #36]	; 0x24
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	69b8      	ldr	r0, [r7, #24]
 800319e:	f7ff fcfd 	bl	8002b9c <_SendPacket>
  RECORD_END();
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f383 8811 	msr	BASEPRI, r3
}
 80031a8:	bf00      	nop
 80031aa:	3738      	adds	r7, #56	; 0x38
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000874 	.word	0x20000874

080031b4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b090      	sub	sp, #64	; 0x40
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80031c2:	f3ef 8311 	mrs	r3, BASEPRI
 80031c6:	f04f 0120 	mov.w	r1, #32
 80031ca:	f381 8811 	msr	BASEPRI, r1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	4840      	ldr	r0, [pc, #256]	; (80032d4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80031d2:	f7ff fc0a 	bl	80029ea <_PreparePacket>
 80031d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e4:	e00b      	b.n	80031fe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	1c59      	adds	r1, r3, #1
 80031ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80031f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	09db      	lsrs	r3, r3, #7
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	2b7f      	cmp	r3, #127	; 0x7f
 8003202:	d8f0      	bhi.n	80031e6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800320a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003212:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
 800321c:	e00b      	b.n	8003236 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	b2da      	uxtb	r2, r3
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	1c59      	adds	r1, r3, #1
 8003226:	6379      	str	r1, [r7, #52]	; 0x34
 8003228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	09db      	lsrs	r3, r3, #7
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	2b7f      	cmp	r3, #127	; 0x7f
 800323a:	d8f0      	bhi.n	800321e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	637a      	str	r2, [r7, #52]	; 0x34
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
 8003254:	e00b      	b.n	800326e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	1c59      	adds	r1, r3, #1
 800325e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	09db      	lsrs	r3, r3, #7
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b7f      	cmp	r3, #127	; 0x7f
 8003272:	d8f0      	bhi.n	8003256 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800327a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	e00b      	b.n	80032a6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	6279      	str	r1, [r7, #36]	; 0x24
 8003298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	09db      	lsrs	r3, r3, #7
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	2b7f      	cmp	r3, #127	; 0x7f
 80032aa:	d8f0      	bhi.n	800328e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	627a      	str	r2, [r7, #36]	; 0x24
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	69b8      	ldr	r0, [r7, #24]
 80032c2:	f7ff fc6b 	bl	8002b9c <_SendPacket>
  RECORD_END();
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f383 8811 	msr	BASEPRI, r3
}
 80032cc:	bf00      	nop
 80032ce:	3740      	adds	r7, #64	; 0x40
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000874 	.word	0x20000874

080032d8 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80032de:	4b59      	ldr	r3, [pc, #356]	; (8003444 <SEGGER_SYSVIEW_Start+0x16c>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 80aa 	bne.w	800343c <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80032e8:	4b56      	ldr	r3, [pc, #344]	; (8003444 <SEGGER_SYSVIEW_Start+0x16c>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80032ee:	f3ef 8311 	mrs	r3, BASEPRI
 80032f2:	f04f 0120 	mov.w	r1, #32
 80032f6:	f381 8811 	msr	BASEPRI, r1
 80032fa:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80032fc:	220a      	movs	r2, #10
 80032fe:	4952      	ldr	r1, [pc, #328]	; (8003448 <SEGGER_SYSVIEW_Start+0x170>)
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff f9c1 	bl	8002688 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800330c:	200a      	movs	r0, #10
 800330e:	f7ff fe27 	bl	8002f60 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003312:	f3ef 8311 	mrs	r3, BASEPRI
 8003316:	f04f 0120 	mov.w	r1, #32
 800331a:	f381 8811 	msr	BASEPRI, r1
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	484a      	ldr	r0, [pc, #296]	; (800344c <SEGGER_SYSVIEW_Start+0x174>)
 8003322:	f7ff fb62 	bl	80029ea <_PreparePacket>
 8003326:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003330:	4b44      	ldr	r3, [pc, #272]	; (8003444 <SEGGER_SYSVIEW_Start+0x16c>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
 8003336:	e00b      	b.n	8003350 <SEGGER_SYSVIEW_Start+0x78>
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	b2da      	uxtb	r2, r3
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	09db      	lsrs	r3, r3, #7
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	2b7f      	cmp	r3, #127	; 0x7f
 8003354:	d8f0      	bhi.n	8003338 <SEGGER_SYSVIEW_Start+0x60>
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	4b36      	ldr	r3, [pc, #216]	; (8003444 <SEGGER_SYSVIEW_Start+0x16c>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	e00b      	b.n	800338a <SEGGER_SYSVIEW_Start+0xb2>
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	6279      	str	r1, [r7, #36]	; 0x24
 800337c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	09db      	lsrs	r3, r3, #7
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	2b7f      	cmp	r3, #127	; 0x7f
 800338e:	d8f0      	bhi.n	8003372 <SEGGER_SYSVIEW_Start+0x9a>
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	627a      	str	r2, [r7, #36]	; 0x24
 8003396:	6a3a      	ldr	r2, [r7, #32]
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <SEGGER_SYSVIEW_Start+0x16c>)
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e00b      	b.n	80033c4 <SEGGER_SYSVIEW_Start+0xec>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	61f9      	str	r1, [r7, #28]
 80033b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	09db      	lsrs	r3, r3, #7
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b7f      	cmp	r3, #127	; 0x7f
 80033c8:	d8f0      	bhi.n	80033ac <SEGGER_SYSVIEW_Start+0xd4>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	61fa      	str	r2, [r7, #28]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	2302      	movs	r3, #2
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e00b      	b.n	80033fc <SEGGER_SYSVIEW_Start+0x124>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	6179      	str	r1, [r7, #20]
 80033ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	09db      	lsrs	r3, r3, #7
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003400:	d8f0      	bhi.n	80033e4 <SEGGER_SYSVIEW_Start+0x10c>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	617a      	str	r2, [r7, #20]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003412:	2218      	movs	r2, #24
 8003414:	6839      	ldr	r1, [r7, #0]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fbc0 	bl	8002b9c <_SendPacket>
      RECORD_END();
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <SEGGER_SYSVIEW_Start+0x16c>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <SEGGER_SYSVIEW_Start+0x16c>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003430:	f000 f9ec 	bl	800380c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003434:	f000 f9b2 	bl	800379c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003438:	f000 fbb0 	bl	8003b9c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 800343c:	bf00      	nop
 800343e:	3730      	adds	r7, #48	; 0x30
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000844 	.word	0x20000844
 8003448:	080070dc 	.word	0x080070dc
 800344c:	20000874 	.word	0x20000874

08003450 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003456:	f3ef 8311 	mrs	r3, BASEPRI
 800345a:	f04f 0120 	mov.w	r1, #32
 800345e:	f381 8811 	msr	BASEPRI, r1
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	480b      	ldr	r0, [pc, #44]	; (8003494 <SEGGER_SYSVIEW_Stop+0x44>)
 8003466:	f7ff fac0 	bl	80029ea <_PreparePacket>
 800346a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <SEGGER_SYSVIEW_Stop+0x48>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003474:	220b      	movs	r2, #11
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f7ff fb8f 	bl	8002b9c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <SEGGER_SYSVIEW_Stop+0x48>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f383 8811 	msr	BASEPRI, r3
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000874 	.word	0x20000874
 8003498:	20000844 	.word	0x20000844

0800349c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80034a2:	f3ef 8311 	mrs	r3, BASEPRI
 80034a6:	f04f 0120 	mov.w	r1, #32
 80034aa:	f381 8811 	msr	BASEPRI, r1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	4845      	ldr	r0, [pc, #276]	; (80035c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80034b2:	f7ff fa9a 	bl	80029ea <_PreparePacket>
 80034b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c6:	e00b      	b.n	80034e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	09db      	lsrs	r3, r3, #7
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	2b7f      	cmp	r3, #127	; 0x7f
 80034e4:	d8f0      	bhi.n	80034c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	623b      	str	r3, [r7, #32]
 8003500:	e00b      	b.n	800351a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	1c59      	adds	r1, r3, #1
 800350a:	6279      	str	r1, [r7, #36]	; 0x24
 800350c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	09db      	lsrs	r3, r3, #7
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	2b7f      	cmp	r3, #127	; 0x7f
 800351e:	d8f0      	bhi.n	8003502 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	627a      	str	r2, [r7, #36]	; 0x24
 8003526:	6a3a      	ldr	r2, [r7, #32]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e00b      	b.n	8003554 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	1c59      	adds	r1, r3, #1
 8003544:	61f9      	str	r1, [r7, #28]
 8003546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	09db      	lsrs	r3, r3, #7
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b7f      	cmp	r3, #127	; 0x7f
 8003558:	d8f0      	bhi.n	800353c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	61fa      	str	r2, [r7, #28]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	2302      	movs	r3, #2
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	e00b      	b.n	800358c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	6179      	str	r1, [r7, #20]
 800357e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	09db      	lsrs	r3, r3, #7
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b7f      	cmp	r3, #127	; 0x7f
 8003590:	d8f0      	bhi.n	8003574 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	617a      	str	r2, [r7, #20]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80035a2:	2218      	movs	r2, #24
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68b8      	ldr	r0, [r7, #8]
 80035a8:	f7ff faf8 	bl	8002b9c <_SendPacket>
  RECORD_END();
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80035ba:	4b04      	ldr	r3, [pc, #16]	; (80035cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	4798      	blx	r3
  }
}
 80035c0:	bf00      	nop
 80035c2:	3730      	adds	r7, #48	; 0x30
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000874 	.word	0x20000874
 80035cc:	20000844 	.word	0x20000844

080035d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b092      	sub	sp, #72	; 0x48
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80035d8:	f3ef 8311 	mrs	r3, BASEPRI
 80035dc:	f04f 0120 	mov.w	r1, #32
 80035e0:	f381 8811 	msr	BASEPRI, r1
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	486b      	ldr	r0, [pc, #428]	; (8003794 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80035e8:	f7ff f9ff 	bl	80029ea <_PreparePacket>
 80035ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	643b      	str	r3, [r7, #64]	; 0x40
 8003604:	e00b      	b.n	800361e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003608:	b2da      	uxtb	r2, r3
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	6479      	str	r1, [r7, #68]	; 0x44
 8003610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361a:	09db      	lsrs	r3, r3, #7
 800361c:	643b      	str	r3, [r7, #64]	; 0x40
 800361e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003620:	2b7f      	cmp	r3, #127	; 0x7f
 8003622:	d8f0      	bhi.n	8003606 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	647a      	str	r2, [r7, #68]	; 0x44
 800362a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003632:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
 800363e:	e00b      	b.n	8003658 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	b2da      	uxtb	r2, r3
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	1c59      	adds	r1, r3, #1
 8003648:	63f9      	str	r1, [r7, #60]	; 0x3c
 800364a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	09db      	lsrs	r3, r3, #7
 8003656:	63bb      	str	r3, [r7, #56]	; 0x38
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	2b7f      	cmp	r3, #127	; 0x7f
 800365c:	d8f0      	bhi.n	8003640 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	4619      	mov	r1, r3
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff f96a 	bl	8002950 <_EncodeStr>
 800367c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800367e:	2209      	movs	r2, #9
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	6938      	ldr	r0, [r7, #16]
 8003684:	f7ff fa8a 	bl	8002b9c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	e00b      	b.n	80036b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	6379      	str	r1, [r7, #52]	; 0x34
 80036aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	09db      	lsrs	r3, r3, #7
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	2b7f      	cmp	r3, #127	; 0x7f
 80036bc:	d8f0      	bhi.n	80036a0 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	637a      	str	r2, [r7, #52]	; 0x34
 80036c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d8:	e00b      	b.n	80036f2 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	1c59      	adds	r1, r3, #1
 80036e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80036e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	09db      	lsrs	r3, r3, #7
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	2b7f      	cmp	r3, #127	; 0x7f
 80036f6:	d8f0      	bhi.n	80036da <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	e00b      	b.n	800372c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	6279      	str	r1, [r7, #36]	; 0x24
 800371e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	09db      	lsrs	r3, r3, #7
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b7f      	cmp	r3, #127	; 0x7f
 8003730:	d8f0      	bhi.n	8003714 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	627a      	str	r2, [r7, #36]	; 0x24
 8003738:	6a3a      	ldr	r2, [r7, #32]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e00b      	b.n	8003764 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	1c59      	adds	r1, r3, #1
 8003754:	61f9      	str	r1, [r7, #28]
 8003756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	09db      	lsrs	r3, r3, #7
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b7f      	cmp	r3, #127	; 0x7f
 8003768:	d8f0      	bhi.n	800374c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	61fa      	str	r2, [r7, #28]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800377a:	2215      	movs	r2, #21
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	6938      	ldr	r0, [r7, #16]
 8003780:	f7ff fa0c 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f383 8811 	msr	BASEPRI, r3
}
 800378a:	bf00      	nop
 800378c:	3748      	adds	r7, #72	; 0x48
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000874 	.word	0x20000874
 8003798:	20000844 	.word	0x20000844

0800379c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80037b2:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4798      	blx	r3
  }
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000844 	.word	0x20000844

080037c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80037cc:	f3ef 8311 	mrs	r3, BASEPRI
 80037d0:	f04f 0120 	mov.w	r1, #32
 80037d4:	f381 8811 	msr	BASEPRI, r1
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	480b      	ldr	r0, [pc, #44]	; (8003808 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80037dc:	f7ff f905 	bl	80029ea <_PreparePacket>
 80037e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	6938      	ldr	r0, [r7, #16]
 80037e8:	f7ff f8b2 	bl	8002950 <_EncodeStr>
 80037ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80037ee:	220e      	movs	r2, #14
 80037f0:	68f9      	ldr	r1, [r7, #12]
 80037f2:	6938      	ldr	r0, [r7, #16]
 80037f4:	f7ff f9d2 	bl	8002b9c <_SendPacket>
  RECORD_END();
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f383 8811 	msr	BASEPRI, r3
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000874 	.word	0x20000874

0800380c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d019      	beq.n	800384e <SEGGER_SYSVIEW_RecordSystime+0x42>
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d014      	beq.n	800384e <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4798      	blx	r3
 800382c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003830:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003832:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	f04f 0400 	mov.w	r4, #0
 800383e:	0013      	movs	r3, r2
 8003840:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003842:	461a      	mov	r2, r3
 8003844:	4601      	mov	r1, r0
 8003846:	200d      	movs	r0, #13
 8003848:	f7ff fbe4 	bl	8003014 <SEGGER_SYSVIEW_RecordU32x2>
 800384c:	e005      	b.n	800385a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4619      	mov	r1, r3
 8003854:	200c      	movs	r0, #12
 8003856:	f7ff fba1 	bl	8002f9c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bd90      	pop	{r4, r7, pc}
 8003862:	bf00      	nop
 8003864:	20000844 	.word	0x20000844
 8003868:	e0001004 	.word	0xe0001004

0800386c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003872:	f3ef 8311 	mrs	r3, BASEPRI
 8003876:	f04f 0120 	mov.w	r1, #32
 800387a:	f381 8811 	msr	BASEPRI, r1
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	4807      	ldr	r0, [pc, #28]	; (80038a0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003882:	f7ff f8b2 	bl	80029ea <_PreparePacket>
 8003886:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003888:	2211      	movs	r2, #17
 800388a:	6839      	ldr	r1, [r7, #0]
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	f7ff f985 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f383 8811 	msr	BASEPRI, r3
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000874 	.word	0x20000874

080038a4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80038ac:	f3ef 8311 	mrs	r3, BASEPRI
 80038b0:	f04f 0120 	mov.w	r1, #32
 80038b4:	f381 8811 	msr	BASEPRI, r1
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	481a      	ldr	r0, [pc, #104]	; (8003924 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80038bc:	f7ff f895 	bl	80029ea <_PreparePacket>
 80038c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	e00b      	b.n	80038f4 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	1c59      	adds	r1, r3, #1
 80038e4:	61f9      	str	r1, [r7, #28]
 80038e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	09db      	lsrs	r3, r3, #7
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b7f      	cmp	r3, #127	; 0x7f
 80038f8:	d8f0      	bhi.n	80038dc <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	61fa      	str	r2, [r7, #28]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800390a:	2208      	movs	r2, #8
 800390c:	68f9      	ldr	r1, [r7, #12]
 800390e:	6938      	ldr	r0, [r7, #16]
 8003910:	f7ff f944 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f383 8811 	msr	BASEPRI, r3
}
 800391a:	bf00      	nop
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000874 	.word	0x20000874
 8003928:	20000844 	.word	0x20000844

0800392c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003934:	f3ef 8311 	mrs	r3, BASEPRI
 8003938:	f04f 0120 	mov.w	r1, #32
 800393c:	f381 8811 	msr	BASEPRI, r1
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	481a      	ldr	r0, [pc, #104]	; (80039ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003944:	f7ff f851 	bl	80029ea <_PreparePacket>
 8003948:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e00b      	b.n	800397c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	61f9      	str	r1, [r7, #28]
 800396e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	09db      	lsrs	r3, r3, #7
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b7f      	cmp	r3, #127	; 0x7f
 8003980:	d8f0      	bhi.n	8003964 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	61fa      	str	r2, [r7, #28]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003992:	2204      	movs	r2, #4
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	6938      	ldr	r0, [r7, #16]
 8003998:	f7ff f900 	bl	8002b9c <_SendPacket>
  RECORD_END();
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f383 8811 	msr	BASEPRI, r3
}
 80039a2:	bf00      	nop
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000874 	.word	0x20000874
 80039b0:	20000844 	.word	0x20000844

080039b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039bc:	f3ef 8311 	mrs	r3, BASEPRI
 80039c0:	f04f 0120 	mov.w	r1, #32
 80039c4:	f381 8811 	msr	BASEPRI, r1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	481a      	ldr	r0, [pc, #104]	; (8003a34 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80039cc:	f7ff f80d 	bl	80029ea <_PreparePacket>
 80039d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	e00b      	b.n	8003a04 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	1c59      	adds	r1, r3, #1
 80039f4:	61f9      	str	r1, [r7, #28]
 80039f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	09db      	lsrs	r3, r3, #7
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b7f      	cmp	r3, #127	; 0x7f
 8003a08:	d8f0      	bhi.n	80039ec <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	61fa      	str	r2, [r7, #28]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003a1a:	2206      	movs	r2, #6
 8003a1c:	68f9      	ldr	r1, [r7, #12]
 8003a1e:	6938      	ldr	r0, [r7, #16]
 8003a20:	f7ff f8bc 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f383 8811 	msr	BASEPRI, r3
}
 8003a2a:	bf00      	nop
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000874 	.word	0x20000874
 8003a38:	20000844 	.word	0x20000844

08003a3c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	089b      	lsrs	r3, r3, #2
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000844 	.word	0x20000844

08003a60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	; 0x30
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d06d      	beq.n	8003b4e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003a72:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7c:	e008      	b.n	8003a90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3f2      	bcc.n	8003a7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8003a98:	e000      	b.n	8003a9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003a9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d055      	beq.n	8003b4e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8003aa6:	f04f 0120 	mov.w	r1, #32
 8003aaa:	f381 8811 	msr	BASEPRI, r1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	482a      	ldr	r0, [pc, #168]	; (8003b5c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003ab2:	f7fe ff9a 	bl	80029ea <_PreparePacket>
 8003ab6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	e00b      	b.n	8003ade <SEGGER_SYSVIEW_SendModule+0x7e>
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	6279      	str	r1, [r7, #36]	; 0x24
 8003ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	09db      	lsrs	r3, r3, #7
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ae2:	d8f0      	bhi.n	8003ac6 <SEGGER_SYSVIEW_SendModule+0x66>
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aea:	6a3a      	ldr	r2, [r7, #32]
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e00b      	b.n	8003b18 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	61f9      	str	r1, [r7, #28]
 8003b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	09db      	lsrs	r3, r3, #7
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b1c:	d8f0      	bhi.n	8003b00 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	4619      	mov	r1, r3
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7fe ff0a 	bl	8002950 <_EncodeStr>
 8003b3c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003b3e:	2216      	movs	r2, #22
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	6938      	ldr	r0, [r7, #16]
 8003b44:	f7ff f82a 	bl	8002b9c <_SendPacket>
      RECORD_END();
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3730      	adds	r7, #48	; 0x30
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	2000086c 	.word	0x2000086c
 8003b5c:	20000874 	.word	0x20000874

08003b60 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00f      	beq.n	8003b8e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f2      	bne.n	8003b74 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	2000086c 	.word	0x2000086c

08003b9c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ba6:	f04f 0120 	mov.w	r1, #32
 8003baa:	f381 8811 	msr	BASEPRI, r1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	4817      	ldr	r0, [pc, #92]	; (8003c10 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003bb2:	f7fe ff1a 	bl	80029ea <_PreparePacket>
 8003bb6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	e00b      	b.n	8003be0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1c59      	adds	r1, r3, #1
 8003bd0:	6179      	str	r1, [r7, #20]
 8003bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	09db      	lsrs	r3, r3, #7
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b7f      	cmp	r3, #127	; 0x7f
 8003be4:	d8f0      	bhi.n	8003bc8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	617a      	str	r2, [r7, #20]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003bf6:	221b      	movs	r2, #27
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	68b8      	ldr	r0, [r7, #8]
 8003bfc:	f7fe ffce 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f383 8811 	msr	BASEPRI, r3
}
 8003c06:	bf00      	nop
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000874 	.word	0x20000874
 8003c14:	20000870 	.word	0x20000870

08003c18 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8003c18:	b40f      	push	{r0, r1, r2, r3}
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	6938      	ldr	r0, [r7, #16]
 8003c2e:	f7ff f889 	bl	8002d44 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c3c:	b004      	add	sp, #16
 8003c3e:	4770      	bx	lr

08003c40 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	; 0x28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c48:	f3ef 8311 	mrs	r3, BASEPRI
 8003c4c:	f04f 0120 	mov.w	r1, #32
 8003c50:	f381 8811 	msr	BASEPRI, r1
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	4827      	ldr	r0, [pc, #156]	; (8003cf4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003c58:	f7fe fec7 	bl	80029ea <_PreparePacket>
 8003c5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	6938      	ldr	r0, [r7, #16]
 8003c64:	f7fe fe74 	bl	8002950 <_EncodeStr>
 8003c68:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	2301      	movs	r3, #1
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	e00b      	b.n	8003c8c <SEGGER_SYSVIEW_Warn+0x4c>
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	1c59      	adds	r1, r3, #1
 8003c7c:	6279      	str	r1, [r7, #36]	; 0x24
 8003c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	09db      	lsrs	r3, r3, #7
 8003c8a:	623b      	str	r3, [r7, #32]
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c90:	d8f0      	bhi.n	8003c74 <SEGGER_SYSVIEW_Warn+0x34>
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	627a      	str	r2, [r7, #36]	; 0x24
 8003c98:	6a3a      	ldr	r2, [r7, #32]
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e00b      	b.n	8003cc4 <SEGGER_SYSVIEW_Warn+0x84>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	61f9      	str	r1, [r7, #28]
 8003cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	09db      	lsrs	r3, r3, #7
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc8:	d8f0      	bhi.n	8003cac <SEGGER_SYSVIEW_Warn+0x6c>
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	61fa      	str	r2, [r7, #28]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003cda:	221a      	movs	r2, #26
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	6938      	ldr	r0, [r7, #16]
 8003ce0:	f7fe ff5c 	bl	8002b9c <_SendPacket>
  RECORD_END();
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f383 8811 	msr	BASEPRI, r3
}
 8003cea:	bf00      	nop
 8003cec:	3728      	adds	r7, #40	; 0x28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000874 	.word	0x20000874

08003cf8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003cfc:	4803      	ldr	r0, [pc, #12]	; (8003d0c <_cbSendSystemDesc+0x14>)
 8003cfe:	f7ff fd61 	bl	80037c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003d02:	4803      	ldr	r0, [pc, #12]	; (8003d10 <_cbSendSystemDesc+0x18>)
 8003d04:	f7ff fd5e 	bl	80037c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08006f8c 	.word	0x08006f8c
 8003d10:	08006fc0 	.word	0x08006fc0

08003d14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <SEGGER_SYSVIEW_Conf+0x20>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <SEGGER_SYSVIEW_Conf+0x20>)
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <SEGGER_SYSVIEW_Conf+0x24>)
 8003d22:	4a06      	ldr	r2, [pc, #24]	; (8003d3c <SEGGER_SYSVIEW_Conf+0x28>)
 8003d24:	f7ff f8ce 	bl	8002ec4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003d28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003d2c:	f7ff f908 	bl	8002f40 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000000 	.word	0x20000000
 8003d38:	08003cf9 	.word	0x08003cf9
 8003d3c:	080070e8 	.word	0x080070e8

08003d40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	e048      	b.n	8003dde <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8003d4c:	4928      	ldr	r1, [pc, #160]	; (8003df0 <_cbSendTaskList+0xb0>)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 ff9d 	bl	8005c9c <uxTaskGetStackHighWaterMark>
 8003d62:	4923      	ldr	r1, [pc, #140]	; (8003df0 <_cbSendTaskList+0xb0>)
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3310      	adds	r3, #16
 8003d72:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003d74:	491e      	ldr	r1, [pc, #120]	; (8003df0 <_cbSendTaskList+0xb0>)
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	491a      	ldr	r1, [pc, #104]	; (8003df0 <_cbSendTaskList+0xb0>)
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	3304      	adds	r3, #4
 8003d94:	681c      	ldr	r4, [r3, #0]
 8003d96:	4916      	ldr	r1, [pc, #88]	; (8003df0 <_cbSendTaskList+0xb0>)
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3308      	adds	r3, #8
 8003da6:	681d      	ldr	r5, [r3, #0]
 8003da8:	4911      	ldr	r1, [pc, #68]	; (8003df0 <_cbSendTaskList+0xb0>)
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	330c      	adds	r3, #12
 8003db8:	681e      	ldr	r6, [r3, #0]
 8003dba:	490d      	ldr	r1, [pc, #52]	; (8003df0 <_cbSendTaskList+0xb0>)
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3310      	adds	r3, #16
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4633      	mov	r3, r6
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	f000 f8b4 	bl	8003f40 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <_cbSendTaskList+0xb4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d3b1      	bcc.n	8003d4c <_cbSendTaskList+0xc>
  }
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df0:	20000958 	.word	0x20000958
 8003df4:	200009f8 	.word	0x200009f8

08003df8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003dfe:	f001 fc35 	bl	800566c <xTaskGetTickCountFromISR>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f04f 0400 	mov.w	r4, #0
 8003e08:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003e0c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003e10:	462b      	mov	r3, r5
 8003e12:	4634      	mov	r4, r6
 8003e14:	f04f 0100 	mov.w	r1, #0
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	0162      	lsls	r2, r4, #5
 8003e1e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003e22:	0159      	lsls	r1, r3, #5
 8003e24:	460b      	mov	r3, r1
 8003e26:	4614      	mov	r4, r2
 8003e28:	1b5b      	subs	r3, r3, r5
 8003e2a:	eb64 0406 	sbc.w	r4, r4, r6
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	00a2      	lsls	r2, r4, #2
 8003e38:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003e3c:	0099      	lsls	r1, r3, #2
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4614      	mov	r4, r2
 8003e42:	195b      	adds	r3, r3, r5
 8003e44:	eb44 0406 	adc.w	r4, r4, r6
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	00e2      	lsls	r2, r4, #3
 8003e52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e56:	00d9      	lsls	r1, r3, #3
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4614      	mov	r4, r2
 8003e5c:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003e60:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	4621      	mov	r1, r4
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e70 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003e7e:	2205      	movs	r2, #5
 8003e80:	492b      	ldr	r1, [pc, #172]	; (8003f30 <SYSVIEW_AddTask+0xc0>)
 8003e82:	68b8      	ldr	r0, [r7, #8]
 8003e84:	f003 f824 	bl	8006ed0 <memcmp>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d04b      	beq.n	8003f26 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b07      	cmp	r3, #7
 8003e94:	d903      	bls.n	8003e9e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003e96:	4828      	ldr	r0, [pc, #160]	; (8003f38 <SYSVIEW_AddTask+0xc8>)
 8003e98:	f7ff fed2 	bl	8003c40 <SEGGER_SYSVIEW_Warn>
    return;
 8003e9c:	e044      	b.n	8003f28 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4926      	ldr	r1, [pc, #152]	; (8003f3c <SYSVIEW_AddTask+0xcc>)
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003eb2:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4921      	ldr	r1, [pc, #132]	; (8003f3c <SYSVIEW_AddTask+0xcc>)
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	491b      	ldr	r1, [pc, #108]	; (8003f3c <SYSVIEW_AddTask+0xcc>)
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3308      	adds	r3, #8
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4916      	ldr	r1, [pc, #88]	; (8003f3c <SYSVIEW_AddTask+0xcc>)
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	330c      	adds	r3, #12
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4910      	ldr	r1, [pc, #64]	; (8003f3c <SYSVIEW_AddTask+0xcc>)
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3310      	adds	r3, #16
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <SYSVIEW_AddTask+0xc4>)
 8003f12:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f80e 	bl	8003f40 <SYSVIEW_SendTaskInfo>
 8003f24:	e000      	b.n	8003f28 <SYSVIEW_AddTask+0xb8>
    return;
 8003f26:	bf00      	nop

}
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	08006fd0 	.word	0x08006fd0
 8003f34:	200009f8 	.word	0x200009f8
 8003f38:	08006fd8 	.word	0x08006fd8
 8003f3c:	20000958 	.word	0x20000958

08003f40 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	; 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003f4e:	f107 0314 	add.w	r3, r7, #20
 8003f52:	2214      	movs	r2, #20
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 ffd4 	bl	8006f04 <memset>
  TaskInfo.TaskID     = TaskID;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003f70:	f107 0314 	add.w	r3, r7, #20
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fb2b 	bl	80035d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003f7a:	bf00      	nop
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003f86:	bf00      	nop
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f96:	f3ef 8305 	mrs	r3, IPSR
 8003f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fae:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <osKernelInitialize+0x3a>
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <osKernelInitialize+0x64>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d103      	bne.n	8003fca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003fc2:	f06f 0305 	mvn.w	r3, #5
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e00c      	b.n	8003fe4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <osKernelInitialize+0x64>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <osKernelInitialize+0x64>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e002      	b.n	8003fe4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200009fc 	.word	0x200009fc

08003ff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ffe:	f3ef 8305 	mrs	r3, IPSR
 8004002:	60bb      	str	r3, [r7, #8]
  return(result);
 8004004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400a:	f3ef 8310 	mrs	r3, PRIMASK
 800400e:	607b      	str	r3, [r7, #4]
  return(result);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004016:	f3ef 8311 	mrs	r3, BASEPRI
 800401a:	603b      	str	r3, [r7, #0]
  return(result);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <osKernelStart+0x3a>
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <osKernelStart+0x68>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d103      	bne.n	8004032 <osKernelStart+0x3a>
    stat = osErrorISR;
 800402a:	f06f 0305 	mvn.w	r3, #5
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e010      	b.n	8004054 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <osKernelStart+0x68>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d109      	bne.n	800404e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800403a:	f7ff ffa2 	bl	8003f82 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <osKernelStart+0x68>)
 8004040:	2202      	movs	r2, #2
 8004042:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004044:	f001 f9da 	bl	80053fc <vTaskStartScheduler>
      stat = osOK;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e002      	b.n	8004054 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200009fc 	.word	0x200009fc

08004064 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b090      	sub	sp, #64	; 0x40
 8004068:	af04      	add	r7, sp, #16
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004074:	f3ef 8305 	mrs	r3, IPSR
 8004078:	61fb      	str	r3, [r7, #28]
  return(result);
 800407a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 808f 	bne.w	80041a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004082:	f3ef 8310 	mrs	r3, PRIMASK
 8004086:	61bb      	str	r3, [r7, #24]
  return(result);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800408e:	f3ef 8311 	mrs	r3, BASEPRI
 8004092:	617b      	str	r3, [r7, #20]
  return(result);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <osThreadNew+0x3e>
 800409a:	4b44      	ldr	r3, [pc, #272]	; (80041ac <osThreadNew+0x148>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d07e      	beq.n	80041a0 <osThreadNew+0x13c>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d07b      	beq.n	80041a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80040ac:	2318      	movs	r3, #24
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295
 80040b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d045      	beq.n	800414c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <osThreadNew+0x6a>
        name = attr->name;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <osThreadNew+0x90>
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2b38      	cmp	r3, #56	; 0x38
 80040e6:	d805      	bhi.n	80040f4 <osThreadNew+0x90>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <osThreadNew+0x94>
        return (NULL);
 80040f4:	2300      	movs	r3, #0
 80040f6:	e054      	b.n	80041a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00e      	beq.n	800412e <osThreadNew+0xca>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b5b      	cmp	r3, #91	; 0x5b
 8004116:	d90a      	bls.n	800412e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <osThreadNew+0xca>
        mem = 1;
 8004128:	2301      	movs	r3, #1
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	e010      	b.n	8004150 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10c      	bne.n	8004150 <osThreadNew+0xec>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <osThreadNew+0xec>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <osThreadNew+0xec>
          mem = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	e001      	b.n	8004150 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d110      	bne.n	8004178 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800415e:	9202      	str	r2, [sp, #8]
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 ff51 	bl	8005014 <xTaskCreateStatic>
 8004172:	4603      	mov	r3, r0
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e013      	b.n	80041a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d110      	bne.n	80041a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	b29a      	uxth	r2, r3
 8004182:	f107 0310 	add.w	r3, r7, #16
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 ff99 	bl	80050c8 <xTaskCreate>
 8004196:	4603      	mov	r3, r0
 8004198:	2b01      	cmp	r3, #1
 800419a:	d001      	beq.n	80041a0 <osThreadNew+0x13c>
          hTask = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041a0:	693b      	ldr	r3, [r7, #16]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3730      	adds	r7, #48	; 0x30
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200009fc 	.word	0x200009fc

080041b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b8:	f3ef 8305 	mrs	r3, IPSR
 80041bc:	613b      	str	r3, [r7, #16]
  return(result);
 80041be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10f      	bne.n	80041e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c4:	f3ef 8310 	mrs	r3, PRIMASK
 80041c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041d0:	f3ef 8311 	mrs	r3, BASEPRI
 80041d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <osDelay+0x3c>
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <osDelay+0x58>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d103      	bne.n	80041ec <osDelay+0x3c>
    stat = osErrorISR;
 80041e4:	f06f 0305 	mvn.w	r3, #5
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e007      	b.n	80041fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f001 f8c8 	bl	800538c <vTaskDelay>
    }
  }

  return (stat);
 80041fc:	697b      	ldr	r3, [r7, #20]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200009fc 	.word	0x200009fc

0800420c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800421c:	f3ef 8305 	mrs	r3, IPSR
 8004220:	61bb      	str	r3, [r7, #24]
  return(result);
 8004222:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004224:	2b00      	cmp	r3, #0
 8004226:	d170      	bne.n	800430a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004228:	f3ef 8310 	mrs	r3, PRIMASK
 800422c:	617b      	str	r3, [r7, #20]
  return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004234:	f3ef 8311 	mrs	r3, BASEPRI
 8004238:	613b      	str	r3, [r7, #16]
  return(result);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <osMessageQueueNew+0x3c>
 8004240:	4b34      	ldr	r3, [pc, #208]	; (8004314 <osMessageQueueNew+0x108>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d060      	beq.n	800430a <osMessageQueueNew+0xfe>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d05d      	beq.n	800430a <osMessageQueueNew+0xfe>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05a      	beq.n	800430a <osMessageQueueNew+0xfe>
    mem = -1;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d029      	beq.n	80042b4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <osMessageQueueNew+0x82>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b4f      	cmp	r3, #79	; 0x4f
 800426e:	d90e      	bls.n	800428e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <osMessageQueueNew+0x82>
        mem = 1;
 8004288:	2301      	movs	r3, #1
 800428a:	623b      	str	r3, [r7, #32]
 800428c:	e014      	b.n	80042b8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d110      	bne.n	80042b8 <osMessageQueueNew+0xac>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10c      	bne.n	80042b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <osMessageQueueNew+0xac>
          mem = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	e001      	b.n	80042b8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10c      	bne.n	80042d8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	2300      	movs	r3, #0
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	460b      	mov	r3, r1
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f972 	bl	80045b8 <xQueueGenericCreateStatic>
 80042d4:	6278      	str	r0, [r7, #36]	; 0x24
 80042d6:	e008      	b.n	80042ea <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80042de:	2200      	movs	r2, #0
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f9db 	bl	800469e <xQueueGenericCreate>
 80042e8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <osMessageQueueNew+0xf2>
        name = attr->name;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	e001      	b.n	8004302 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004302:	69f9      	ldr	r1, [r7, #28]
 8004304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004306:	f000 fe21 	bl	8004f4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800430c:	4618      	mov	r0, r3
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200009fc 	.word	0x200009fc

08004318 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a07      	ldr	r2, [pc, #28]	; (8004344 <vApplicationGetIdleTaskMemory+0x2c>)
 8004328:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a06      	ldr	r2, [pc, #24]	; (8004348 <vApplicationGetIdleTaskMemory+0x30>)
 800432e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	601a      	str	r2, [r3, #0]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000a00 	.word	0x20000a00
 8004348:	20000a5c 	.word	0x20000a5c

0800434c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a07      	ldr	r2, [pc, #28]	; (8004378 <vApplicationGetTimerTaskMemory+0x2c>)
 800435c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4a06      	ldr	r2, [pc, #24]	; (800437c <vApplicationGetTimerTaskMemory+0x30>)
 8004362:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800436a:	601a      	str	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	20000c5c 	.word	0x20000c5c
 800437c:	20000cb8 	.word	0x20000cb8

08004380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f103 0208 	add.w	r2, r3, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f04f 32ff 	mov.w	r2, #4294967295
 8004398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f103 0208 	add.w	r2, r3, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f103 0208 	add.w	r2, r3, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d103      	bne.n	8004442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e00c      	b.n	800445c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3308      	adds	r3, #8
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e002      	b.n	8004450 <vListInsert+0x2e>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d2f6      	bcs.n	800444a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6892      	ldr	r2, [r2, #8]
 80044aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6852      	ldr	r2, [r2, #4]
 80044b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d103      	bne.n	80044c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	e7fe      	b.n	800450e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004510:	f002 f984 	bl	800681c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	3b01      	subs	r3, #1
 8004542:	68f9      	ldr	r1, [r7, #12]
 8004544:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	441a      	add	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	22ff      	movs	r2, #255	; 0xff
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	22ff      	movs	r2, #255	; 0xff
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d114      	bne.n	8004590 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01a      	beq.n	80045a4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3310      	adds	r3, #16
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fa0a 	bl	800598c <xTaskRemoveFromEventList>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <xQueueGenericReset+0xcc>)
 8004580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	e009      	b.n	80045a4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3310      	adds	r3, #16
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fef3 	bl	8004380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3324      	adds	r3, #36	; 0x24
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff feee 	bl	8004380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045a4:	f002 f968 	bl	8006878 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045a8:	2301      	movs	r3, #1
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	e000ed04 	.word	0xe000ed04

080045b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	; 0x38
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <xQueueGenericCreateStatic+0x28>
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	e7fe      	b.n	80045de <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <xQueueGenericCreateStatic+0x42>
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
 80045f8:	e7fe      	b.n	80045f8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <xQueueGenericCreateStatic+0x4e>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <xQueueGenericCreateStatic+0x52>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <xQueueGenericCreateStatic+0x54>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <xQueueGenericCreateStatic+0x6c>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	e7fe      	b.n	8004622 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <xQueueGenericCreateStatic+0x78>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <xQueueGenericCreateStatic+0x7c>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <xQueueGenericCreateStatic+0x7e>
 8004634:	2300      	movs	r3, #0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <xQueueGenericCreateStatic+0x96>
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e7fe      	b.n	800464c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800464e:	2350      	movs	r3, #80	; 0x50
 8004650:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b50      	cmp	r3, #80	; 0x50
 8004656:	d009      	beq.n	800466c <xQueueGenericCreateStatic+0xb4>
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e7fe      	b.n	800466a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800466c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00d      	beq.n	8004694 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004680:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f844 	bl	800471c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004696:	4618      	mov	r0, r3
 8004698:	3730      	adds	r7, #48	; 0x30
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b08a      	sub	sp, #40	; 0x28
 80046a2:	af02      	add	r7, sp, #8
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <xQueueGenericCreate+0x28>
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e004      	b.n	80046dc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3350      	adds	r3, #80	; 0x50
 80046e0:	4618      	mov	r0, r3
 80046e2:	f002 f9fb 	bl	8006adc <pvPortMalloc>
 80046e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d011      	beq.n	8004712 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3350      	adds	r3, #80	; 0x50
 80046f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004700:	79fa      	ldrb	r2, [r7, #7]
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f805 	bl	800471c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004712:	69bb      	ldr	r3, [r7, #24]
	}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e002      	b.n	800473e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800474a:	2101      	movs	r1, #1
 800474c:	69b8      	ldr	r0, [r7, #24]
 800474e:	f7ff fecb 	bl	80044e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	2073      	movs	r0, #115	; 0x73
 8004762:	f7fe fcb1 	bl	80030c8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b090      	sub	sp, #64	; 0x40
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800477e:	2300      	movs	r3, #0
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <xQueueGenericSend+0x30>
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
 800479e:	e7fe      	b.n	800479e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <xQueueGenericSend+0x3e>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <xQueueGenericSend+0x42>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <xQueueGenericSend+0x44>
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <xQueueGenericSend+0x5c>
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ca:	e7fe      	b.n	80047ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d103      	bne.n	80047da <xQueueGenericSend+0x6a>
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <xQueueGenericSend+0x6e>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <xQueueGenericSend+0x70>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <xQueueGenericSend+0x88>
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	e7fe      	b.n	80047f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047f8:	f001 faba 	bl	8005d70 <xTaskGetSchedulerState>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <xQueueGenericSend+0x98>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <xQueueGenericSend+0x9c>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <xQueueGenericSend+0x9e>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <xQueueGenericSend+0xb6>
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	e7fe      	b.n	8004824 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004826:	f001 fff9 	bl	800681c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <xQueueGenericSend+0xcc>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d136      	bne.n	80048aa <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff f8fc 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	460b      	mov	r3, r1
 800484e:	4601      	mov	r1, r0
 8004850:	205a      	movs	r0, #90	; 0x5a
 8004852:	f7fe fcaf 	bl	80031b4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800485c:	f000 fa66 	bl	8004d2c <prvCopyDataToQueue>
 8004860:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	3324      	adds	r3, #36	; 0x24
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f88c 	bl	800598c <xTaskRemoveFromEventList>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d013      	beq.n	80048a2 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800487a:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <xQueueGenericSend+0x240>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	e00a      	b.n	80048a2 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <xQueueGenericSend+0x240>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048a2:	f001 ffe9 	bl	8006878 <vPortExitCritical>
				return pdPASS;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07d      	b.n	80049a6 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d110      	bne.n	80048d2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048b0:	f001 ffe2 	bl	8006878 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f8c0 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	460b      	mov	r3, r1
 80048c6:	4601      	mov	r1, r0
 80048c8:	205a      	movs	r0, #90	; 0x5a
 80048ca:	f7fe fc73 	bl	80031b4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e069      	b.n	80049a6 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	4618      	mov	r0, r3
 80048de:	f001 f8bb 	bl	8005a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048e6:	f001 ffc7 	bl	8006878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ea:	f000 fe01 	bl	80054f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ee:	f001 ff95 	bl	800681c <vPortEnterCritical>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d103      	bne.n	8004908 <xQueueGenericSend+0x198>
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800490e:	b25b      	sxtb	r3, r3
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d103      	bne.n	800491e <xQueueGenericSend+0x1ae>
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800491e:	f001 ffab 	bl	8006878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004922:	1d3a      	adds	r2, r7, #4
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f001 f8aa 	bl	8005a84 <xTaskCheckForTimeOut>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d124      	bne.n	8004980 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004938:	f000 faf0 	bl	8004f1c <prvIsQueueFull>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d018      	beq.n	8004974 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	3310      	adds	r3, #16
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 ffcc 	bl	80058e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004952:	f000 fa7b 	bl	8004e4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004956:	f000 fdd9 	bl	800550c <xTaskResumeAll>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f af62 	bne.w	8004826 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <xQueueGenericSend+0x240>)
 8004964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	e758      	b.n	8004826 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004976:	f000 fa69 	bl	8004e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800497a:	f000 fdc7 	bl	800550c <xTaskResumeAll>
 800497e:	e752      	b.n	8004826 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004982:	f000 fa63 	bl	8004e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004986:	f000 fdc1 	bl	800550c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f855 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	460b      	mov	r3, r1
 800499c:	4601      	mov	r1, r0
 800499e:	205a      	movs	r0, #90	; 0x5a
 80049a0:	f7fe fc08 	bl	80031b4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80049a4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3738      	adds	r7, #56	; 0x38
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	; 0x38
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <xQueueGenericSendFromISR+0x2c>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
 80049de:	e7fe      	b.n	80049de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <xQueueGenericSendFromISR+0x3a>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <xQueueGenericSendFromISR+0x3e>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueGenericSendFromISR+0x40>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <xQueueGenericSendFromISR+0x58>
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	e7fe      	b.n	8004a0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d103      	bne.n	8004a1a <xQueueGenericSendFromISR+0x66>
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <xQueueGenericSendFromISR+0x6a>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGenericSendFromISR+0x6c>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <xQueueGenericSendFromISR+0x84>
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e7fe      	b.n	8004a36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a38:	f002 f812 	bl	8006a60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a3c:	f3ef 8211 	mrs	r2, BASEPRI
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61ba      	str	r2, [r7, #24]
 8004a52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d302      	bcc.n	8004a6a <xQueueGenericSendFromISR+0xb6>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d136      	bne.n	8004ad8 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe ffe0 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004a7c:	4601      	mov	r1, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	461a      	mov	r2, r3
 8004a82:	2060      	movs	r0, #96	; 0x60
 8004a84:	f7fe fac6 	bl	8003014 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8e:	f000 f94d 	bl	8004d2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a92:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d112      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d016      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	3324      	adds	r3, #36	; 0x24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ff6f 	bl	800598c <xTaskRemoveFromEventList>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	b25a      	sxtb	r2, r3
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ad6:	e00b      	b.n	8004af0 <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe ffae 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2060      	movs	r0, #96	; 0x60
 8004ae8:	f7fe fa94 	bl	8003014 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3738      	adds	r7, #56	; 0x38
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b08f      	sub	sp, #60	; 0x3c
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <xQueueReceive+0x2e>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	e7fe      	b.n	8004b30 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <xQueueReceive+0x3c>
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <xQueueReceive+0x40>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <xQueueReceive+0x42>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <xQueueReceive+0x5a>
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e7fe      	b.n	8004b5c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b5e:	f001 f907 	bl	8005d70 <xTaskGetSchedulerState>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <xQueueReceive+0x6a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueReceive+0x6e>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueReceive+0x70>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <xQueueReceive+0x88>
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e7fe      	b.n	8004b8a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b8c:	f001 fe46 	bl	800681c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d031      	beq.n	8004c00 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba0:	f000 f92e 	bl	8004e00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe ff48 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004bac:	4604      	mov	r4, r0
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f7fe ff44 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	205c      	movs	r0, #92	; 0x5c
 8004bc4:	f7fe faf6 	bl	80031b4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	1e5a      	subs	r2, r3, #1
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00f      	beq.n	8004bf8 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	3310      	adds	r3, #16
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fed5 	bl	800598c <xTaskRemoveFromEventList>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004be8:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <xQueueReceive+0x224>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bf8:	f001 fe3e 	bl	8006878 <vPortExitCritical>
				return pdPASS;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e08e      	b.n	8004d1e <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d115      	bne.n	8004c32 <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c06:	f001 fe37 	bl	8006878 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe ff15 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004c12:	4604      	mov	r4, r0
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7fe ff11 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	460a      	mov	r2, r1
 8004c26:	4621      	mov	r1, r4
 8004c28:	205c      	movs	r0, #92	; 0x5c
 8004c2a:	f7fe fac3 	bl	80031b4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e075      	b.n	8004d1e <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 ff0b 	bl	8005a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c42:	2301      	movs	r3, #1
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c46:	f001 fe17 	bl	8006878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c4a:	f000 fc51 	bl	80054f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c4e:	f001 fde5 	bl	800681c <vPortEnterCritical>
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d103      	bne.n	8004c68 <xQueueReceive+0x164>
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d103      	bne.n	8004c7e <xQueueReceive+0x17a>
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c7e:	f001 fdfb 	bl	8006878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c82:	1d3a      	adds	r2, r7, #4
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fefa 	bl	8005a84 <xTaskCheckForTimeOut>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d124      	bne.n	8004ce0 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c98:	f000 f92a 	bl	8004ef0 <prvIsQueueEmpty>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d018      	beq.n	8004cd4 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	3324      	adds	r3, #36	; 0x24
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fe1c 	bl	80058e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb2:	f000 f8cb 	bl	8004e4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cb6:	f000 fc29 	bl	800550c <xTaskResumeAll>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f47f af65 	bne.w	8004b8c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004cc2:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <xQueueReceive+0x224>)
 8004cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	e75b      	b.n	8004b8c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd6:	f000 f8b9 	bl	8004e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cda:	f000 fc17 	bl	800550c <xTaskResumeAll>
 8004cde:	e755      	b.n	8004b8c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce2:	f000 f8b3 	bl	8004e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ce6:	f000 fc11 	bl	800550c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cec:	f000 f900 	bl	8004ef0 <prvIsQueueEmpty>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f43f af4a 	beq.w	8004b8c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fe9e 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004d00:	4604      	mov	r4, r0
 8004d02:	2000      	movs	r0, #0
 8004d04:	f7fe fe9a 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004d08:	4601      	mov	r1, r0
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	460a      	mov	r2, r1
 8004d14:	4621      	mov	r1, r4
 8004d16:	205c      	movs	r0, #92	; 0x5c
 8004d18:	f7fe fa4c 	bl	80031b4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3734      	adds	r7, #52	; 0x34
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd90      	pop	{r4, r7, pc}
 8004d26:	bf00      	nop
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d14d      	bne.n	8004dee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 f828 	bl	8005dac <xTaskPriorityDisinherit>
 8004d5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	e043      	b.n	8004dee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d119      	bne.n	8004da0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6858      	ldr	r0, [r3, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	461a      	mov	r2, r3
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	f002 f8b9 	bl	8006eee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d32b      	bcc.n	8004dee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	e026      	b.n	8004dee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68d8      	ldr	r0, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	461a      	mov	r2, r3
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	f002 f89f 	bl	8006eee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	425b      	negs	r3, r3
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d207      	bcs.n	8004ddc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	425b      	negs	r3, r3
 8004dd6:	441a      	add	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d105      	bne.n	8004dee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004df6:	697b      	ldr	r3, [r7, #20]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d018      	beq.n	8004e44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	441a      	add	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d303      	bcc.n	8004e34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68d9      	ldr	r1, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6838      	ldr	r0, [r7, #0]
 8004e40:	f002 f855 	bl	8006eee <memcpy>
	}
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e54:	f001 fce2 	bl	800681c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e60:	e011      	b.n	8004e86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d012      	beq.n	8004e90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3324      	adds	r3, #36	; 0x24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fd8c 	bl	800598c <xTaskRemoveFromEventList>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e7a:	f000 fe63 	bl	8005b44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	dce9      	bgt.n	8004e62 <prvUnlockQueue+0x16>
 8004e8e:	e000      	b.n	8004e92 <prvUnlockQueue+0x46>
					break;
 8004e90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e9a:	f001 fced 	bl	8006878 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e9e:	f001 fcbd 	bl	800681c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eaa:	e011      	b.n	8004ed0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3310      	adds	r3, #16
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fd67 	bl	800598c <xTaskRemoveFromEventList>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ec4:	f000 fe3e 	bl	8005b44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ec8:	7bbb      	ldrb	r3, [r7, #14]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	dce9      	bgt.n	8004eac <prvUnlockQueue+0x60>
 8004ed8:	e000      	b.n	8004edc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004eda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	22ff      	movs	r2, #255	; 0xff
 8004ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ee4:	f001 fcc8 	bl	8006878 <vPortExitCritical>
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ef8:	f001 fc90 	bl	800681c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e001      	b.n	8004f0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f0e:	f001 fcb3 	bl	8006878 <vPortExitCritical>

	return xReturn;
 8004f12:	68fb      	ldr	r3, [r7, #12]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f24:	f001 fc7a 	bl	800681c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d102      	bne.n	8004f3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e001      	b.n	8004f3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f3e:	f001 fc9b 	bl	8006878 <vPortExitCritical>

	return xReturn;
 8004f42:	68fb      	ldr	r3, [r7, #12]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e01e      	b.n	8004f9a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f5c:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <vQueueAddToRegistry+0x5c>)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d115      	bne.n	8004f94 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f68:	490f      	ldr	r1, [pc, #60]	; (8004fa8 <vQueueAddToRegistry+0x5c>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f72:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <vQueueAddToRegistry+0x5c>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe fd5b 	bl	8003a3c <SEGGER_SYSVIEW_ShrinkId>
 8004f86:	4601      	mov	r1, r0
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2071      	movs	r0, #113	; 0x71
 8004f8e:	f7fe f841 	bl	8003014 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8004f92:	e005      	b.n	8004fa0 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b07      	cmp	r3, #7
 8004f9e:	d9dd      	bls.n	8004f5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20005998 	.word	0x20005998

08004fac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fbc:	f001 fc2e 	bl	800681c <vPortEnterCritical>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc6:	b25b      	sxtb	r3, r3
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d103      	bne.n	8004fd6 <vQueueWaitForMessageRestricted+0x2a>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d103      	bne.n	8004fec <vQueueWaitForMessageRestricted+0x40>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fec:	f001 fc44 	bl	8006878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3324      	adds	r3, #36	; 0x24
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fc95 	bl	8005930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f7ff ff20 	bl	8004e4c <prvUnlockQueue>
	}
 800500c:	bf00      	nop
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08e      	sub	sp, #56	; 0x38
 8005018:	af04      	add	r7, sp, #16
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <xTaskCreateStatic+0x28>
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	e7fe      	b.n	800503a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <xTaskCreateStatic+0x42>
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	e7fe      	b.n	8005054 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005056:	235c      	movs	r3, #92	; 0x5c
 8005058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b5c      	cmp	r3, #92	; 0x5c
 800505e:	d009      	beq.n	8005074 <xTaskCreateStatic+0x60>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e7fe      	b.n	8005072 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005074:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01e      	beq.n	80050ba <xTaskCreateStatic+0xa6>
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01b      	beq.n	80050ba <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800508a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005094:	2300      	movs	r3, #0
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f850 	bl	8005152 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050b4:	f000 f8dc 	bl	8005270 <prvAddNewTaskToReadyList>
 80050b8:	e001      	b.n	80050be <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050be:	697b      	ldr	r3, [r7, #20]
	}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3728      	adds	r7, #40	; 0x28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af04      	add	r7, sp, #16
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 fcfd 	bl	8006adc <pvPortMalloc>
 80050e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050ea:	205c      	movs	r0, #92	; 0x5c
 80050ec:	f001 fcf6 	bl	8006adc <pvPortMalloc>
 80050f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
 80050fe:	e005      	b.n	800510c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005100:	6978      	ldr	r0, [r7, #20]
 8005102:	f001 fdad 	bl	8006c60 <vPortFree>
 8005106:	e001      	b.n	800510c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d017      	beq.n	8005142 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	2300      	movs	r3, #0
 800511e:	9303      	str	r3, [sp, #12]
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	9302      	str	r3, [sp, #8]
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f80e 	bl	8005152 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005136:	69f8      	ldr	r0, [r7, #28]
 8005138:	f000 f89a 	bl	8005270 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800513c:	2301      	movs	r3, #1
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e002      	b.n	8005148 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005148:	69bb      	ldr	r3, [r7, #24]
	}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b088      	sub	sp, #32
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	461a      	mov	r2, r3
 800516a:	21a5      	movs	r1, #165	; 0xa5
 800516c:	f001 feca 	bl	8006f04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800517a:	3b01      	subs	r3, #1
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f023 0307 	bic.w	r3, r3, #7
 8005188:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <prvInitialiseNewTask+0x56>
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e7fe      	b.n	80051a6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01f      	beq.n	80051ee <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e012      	b.n	80051da <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4413      	add	r3, r2
 80051ba:	7819      	ldrb	r1, [r3, #0]
 80051bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	3334      	adds	r3, #52	; 0x34
 80051c4:	460a      	mov	r2, r1
 80051c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d006      	beq.n	80051e2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	3301      	adds	r3, #1
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b0f      	cmp	r3, #15
 80051de:	d9e9      	bls.n	80051b4 <prvInitialiseNewTask+0x62>
 80051e0:	e000      	b.n	80051e4 <prvInitialiseNewTask+0x92>
			{
				break;
 80051e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051ec:	e003      	b.n	80051f6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	2b37      	cmp	r3, #55	; 0x37
 80051fa:	d901      	bls.n	8005200 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051fc:	2337      	movs	r3, #55	; 0x37
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005204:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	2200      	movs	r2, #0
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	3304      	adds	r3, #4
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff f8d2 	bl	80043c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	3318      	adds	r3, #24
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff f8cd 	bl	80043c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	2200      	movs	r2, #0
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	68f9      	ldr	r1, [r7, #12]
 800524e:	69b8      	ldr	r0, [r7, #24]
 8005250:	f001 f9ba 	bl	80065c8 <pxPortInitialiseStack>
 8005254:	4602      	mov	r2, r0
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005266:	bf00      	nop
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005278:	f001 fad0 	bl	800681c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <prvAddNewTaskToReadyList+0x100>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	4a3b      	ldr	r2, [pc, #236]	; (8005370 <prvAddNewTaskToReadyList+0x100>)
 8005284:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005286:	4b3b      	ldr	r3, [pc, #236]	; (8005374 <prvAddNewTaskToReadyList+0x104>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800528e:	4a39      	ldr	r2, [pc, #228]	; (8005374 <prvAddNewTaskToReadyList+0x104>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005294:	4b36      	ldr	r3, [pc, #216]	; (8005370 <prvAddNewTaskToReadyList+0x100>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d110      	bne.n	80052be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800529c:	f000 fc76 	bl	8005b8c <prvInitialiseTaskLists>
 80052a0:	e00d      	b.n	80052be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052a2:	4b35      	ldr	r3, [pc, #212]	; (8005378 <prvAddNewTaskToReadyList+0x108>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052aa:	4b32      	ldr	r3, [pc, #200]	; (8005374 <prvAddNewTaskToReadyList+0x104>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d802      	bhi.n	80052be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052b8:	4a2e      	ldr	r2, [pc, #184]	; (8005374 <prvAddNewTaskToReadyList+0x104>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <prvAddNewTaskToReadyList+0x10c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a2d      	ldr	r2, [pc, #180]	; (800537c <prvAddNewTaskToReadyList+0x10c>)
 80052c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052c8:	4b2c      	ldr	r3, [pc, #176]	; (800537c <prvAddNewTaskToReadyList+0x10c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <prvAddNewTaskToReadyList+0x94>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe fae3 	bl	80038a4 <SEGGER_SYSVIEW_OnTaskCreate>
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	461d      	mov	r5, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461c      	mov	r4, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	1ae3      	subs	r3, r4, r3
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	462b      	mov	r3, r5
 8005300:	f7fe fdb6 	bl	8003e70 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fb54 	bl	80039b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <prvAddNewTaskToReadyList+0x110>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d903      	bls.n	8005320 <prvAddNewTaskToReadyList+0xb0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	4a18      	ldr	r2, [pc, #96]	; (8005380 <prvAddNewTaskToReadyList+0x110>)
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4a15      	ldr	r2, [pc, #84]	; (8005384 <prvAddNewTaskToReadyList+0x114>)
 800532e:	441a      	add	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f7ff f84f 	bl	80043da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800533c:	f001 fa9c 	bl	8006878 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005340:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <prvAddNewTaskToReadyList+0x108>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <prvAddNewTaskToReadyList+0x104>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	429a      	cmp	r2, r3
 8005354:	d207      	bcs.n	8005366 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <prvAddNewTaskToReadyList+0x118>)
 8005358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bdb0      	pop	{r4, r5, r7, pc}
 800536e:	bf00      	nop
 8005370:	2000158c 	.word	0x2000158c
 8005374:	200010b8 	.word	0x200010b8
 8005378:	20001598 	.word	0x20001598
 800537c:	200015a8 	.word	0x200015a8
 8005380:	20001594 	.word	0x20001594
 8005384:	200010bc 	.word	0x200010bc
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01a      	beq.n	80053d4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <vTaskDelay+0x68>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <vTaskDelay+0x2e>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	e7fe      	b.n	80053b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80053ba:	f000 f899 	bl	80054f0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	2023      	movs	r0, #35	; 0x23
 80053c2:	f7fd fdeb 	bl	8002f9c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053c6:	2100      	movs	r1, #0
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fd63 	bl	8005e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053ce:	f000 f89d 	bl	800550c <xTaskResumeAll>
 80053d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <vTaskDelay+0x6c>)
 80053dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	200015b4 	.word	0x200015b4
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800540a:	463a      	mov	r2, r7
 800540c:	1d39      	adds	r1, r7, #4
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe ff80 	bl	8004318 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	9202      	str	r2, [sp, #8]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	460a      	mov	r2, r1
 800542a:	492a      	ldr	r1, [pc, #168]	; (80054d4 <vTaskStartScheduler+0xd8>)
 800542c:	482a      	ldr	r0, [pc, #168]	; (80054d8 <vTaskStartScheduler+0xdc>)
 800542e:	f7ff fdf1 	bl	8005014 <xTaskCreateStatic>
 8005432:	4602      	mov	r2, r0
 8005434:	4b29      	ldr	r3, [pc, #164]	; (80054dc <vTaskStartScheduler+0xe0>)
 8005436:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005438:	4b28      	ldr	r3, [pc, #160]	; (80054dc <vTaskStartScheduler+0xe0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e001      	b.n	800544a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d102      	bne.n	8005456 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005450:	f000 fd74 	bl	8005f3c <xTimerCreateTimerTask>
 8005454:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d128      	bne.n	80054ae <vTaskStartScheduler+0xb2>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <vTaskStartScheduler+0xe4>)
 8005470:	f04f 32ff 	mov.w	r2, #4294967295
 8005474:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <vTaskStartScheduler+0xe8>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800547c:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <vTaskStartScheduler+0xec>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8005482:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <vTaskStartScheduler+0xf0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3334      	adds	r3, #52	; 0x34
 8005488:	2205      	movs	r2, #5
 800548a:	4912      	ldr	r1, [pc, #72]	; (80054d4 <vTaskStartScheduler+0xd8>)
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fd1f 	bl	8006ed0 <memcmp>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <vTaskStartScheduler+0xa8>
 8005498:	4b14      	ldr	r3, [pc, #80]	; (80054ec <vTaskStartScheduler+0xf0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7fe fa45 	bl	800392c <SEGGER_SYSVIEW_OnTaskStartExec>
 80054a2:	e001      	b.n	80054a8 <vTaskStartScheduler+0xac>
 80054a4:	f7fe f9e2 	bl	800386c <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054a8:	f001 f91a 	bl	80066e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054ac:	e00d      	b.n	80054ca <vTaskStartScheduler+0xce>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d109      	bne.n	80054ca <vTaskStartScheduler+0xce>
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e7fe      	b.n	80054c8 <vTaskStartScheduler+0xcc>
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	08007028 	.word	0x08007028
 80054d8:	08005b5d 	.word	0x08005b5d
 80054dc:	200015b0 	.word	0x200015b0
 80054e0:	200015ac 	.word	0x200015ac
 80054e4:	20001598 	.word	0x20001598
 80054e8:	20001590 	.word	0x20001590
 80054ec:	200010b8 	.word	0x200010b8

080054f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <vTaskSuspendAll+0x18>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a03      	ldr	r2, [pc, #12]	; (8005508 <vTaskSuspendAll+0x18>)
 80054fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	200015b4 	.word	0x200015b4

0800550c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800551a:	4b43      	ldr	r3, [pc, #268]	; (8005628 <xTaskResumeAll+0x11c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <xTaskResumeAll+0x2a>
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	e7fe      	b.n	8005534 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005536:	f001 f971 	bl	800681c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800553a:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <xTaskResumeAll+0x11c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a39      	ldr	r2, [pc, #228]	; (8005628 <xTaskResumeAll+0x11c>)
 8005542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005544:	4b38      	ldr	r3, [pc, #224]	; (8005628 <xTaskResumeAll+0x11c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d166      	bne.n	800561a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800554c:	4b37      	ldr	r3, [pc, #220]	; (800562c <xTaskResumeAll+0x120>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d062      	beq.n	800561a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005554:	e033      	b.n	80055be <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005556:	4b36      	ldr	r3, [pc, #216]	; (8005630 <xTaskResumeAll+0x124>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3318      	adds	r3, #24
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe ff96 	bl	8004494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe ff91 	bl	8004494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fa1d 	bl	80039b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <xTaskResumeAll+0x128>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d903      	bls.n	800558e <xTaskResumeAll+0x82>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <xTaskResumeAll+0x128>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <xTaskResumeAll+0x12c>)
 800559c:	441a      	add	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7fe ff18 	bl	80043da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4b23      	ldr	r3, [pc, #140]	; (800563c <xTaskResumeAll+0x130>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d302      	bcc.n	80055be <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <xTaskResumeAll+0x134>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055be:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <xTaskResumeAll+0x124>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1c7      	bne.n	8005556 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055cc:	f000 fbb0 	bl	8005d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055d0:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <xTaskResumeAll+0x138>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055dc:	f000 f858 	bl	8005690 <xTaskIncrementTick>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80055e6:	4b16      	ldr	r3, [pc, #88]	; (8005640 <xTaskResumeAll+0x134>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f1      	bne.n	80055dc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80055f8:	4b12      	ldr	r3, [pc, #72]	; (8005644 <xTaskResumeAll+0x138>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <xTaskResumeAll+0x134>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800560a:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <xTaskResumeAll+0x13c>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800561a:	f001 f92d 	bl	8006878 <vPortExitCritical>

	return xAlreadyYielded;
 800561e:	68bb      	ldr	r3, [r7, #8]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200015b4 	.word	0x200015b4
 800562c:	2000158c 	.word	0x2000158c
 8005630:	2000154c 	.word	0x2000154c
 8005634:	20001594 	.word	0x20001594
 8005638:	200010bc 	.word	0x200010bc
 800563c:	200010b8 	.word	0x200010b8
 8005640:	200015a0 	.word	0x200015a0
 8005644:	2000159c 	.word	0x2000159c
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <xTaskGetTickCount+0x1c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005658:	687b      	ldr	r3, [r7, #4]
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20001590 	.word	0x20001590

0800566c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005672:	f001 f9f5 	bl	8006a60 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005676:	2300      	movs	r3, #0
 8005678:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800567a:	4b04      	ldr	r3, [pc, #16]	; (800568c <xTaskGetTickCountFromISR+0x20>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005680:	683b      	ldr	r3, [r7, #0]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20001590 	.word	0x20001590

08005690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800569a:	4b50      	ldr	r3, [pc, #320]	; (80057dc <xTaskIncrementTick+0x14c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 808c 	bne.w	80057bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056a4:	4b4e      	ldr	r3, [pc, #312]	; (80057e0 <xTaskIncrementTick+0x150>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056ac:	4a4c      	ldr	r2, [pc, #304]	; (80057e0 <xTaskIncrementTick+0x150>)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11f      	bne.n	80056f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80056b8:	4b4a      	ldr	r3, [pc, #296]	; (80057e4 <xTaskIncrementTick+0x154>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <xTaskIncrementTick+0x46>
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	e7fe      	b.n	80056d4 <xTaskIncrementTick+0x44>
 80056d6:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <xTaskIncrementTick+0x154>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	4b42      	ldr	r3, [pc, #264]	; (80057e8 <xTaskIncrementTick+0x158>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a40      	ldr	r2, [pc, #256]	; (80057e4 <xTaskIncrementTick+0x154>)
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <xTaskIncrementTick+0x158>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b40      	ldr	r3, [pc, #256]	; (80057ec <xTaskIncrementTick+0x15c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3301      	adds	r3, #1
 80056f0:	4a3e      	ldr	r2, [pc, #248]	; (80057ec <xTaskIncrementTick+0x15c>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	f000 fb1c 	bl	8005d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056f8:	4b3d      	ldr	r3, [pc, #244]	; (80057f0 <xTaskIncrementTick+0x160>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d34d      	bcc.n	800579e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005702:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <xTaskIncrementTick+0x154>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570c:	4b38      	ldr	r3, [pc, #224]	; (80057f0 <xTaskIncrementTick+0x160>)
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	601a      	str	r2, [r3, #0]
					break;
 8005714:	e043      	b.n	800579e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005716:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <xTaskIncrementTick+0x154>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	429a      	cmp	r2, r3
 800572c:	d203      	bcs.n	8005736 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800572e:	4a30      	ldr	r2, [pc, #192]	; (80057f0 <xTaskIncrementTick+0x160>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005734:	e033      	b.n	800579e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3304      	adds	r3, #4
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe feaa 	bl	8004494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	3318      	adds	r3, #24
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe fea1 	bl	8004494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe f92d 	bl	80039b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	4b25      	ldr	r3, [pc, #148]	; (80057f4 <xTaskIncrementTick+0x164>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d903      	bls.n	800576e <xTaskIncrementTick+0xde>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <xTaskIncrementTick+0x164>)
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <xTaskIncrementTick+0x168>)
 800577c:	441a      	add	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f7fe fe28 	bl	80043da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <xTaskIncrementTick+0x16c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	429a      	cmp	r2, r3
 8005796:	d3b4      	bcc.n	8005702 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800579c:	e7b1      	b.n	8005702 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800579e:	4b17      	ldr	r3, [pc, #92]	; (80057fc <xTaskIncrementTick+0x16c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4914      	ldr	r1, [pc, #80]	; (80057f8 <xTaskIncrementTick+0x168>)
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d907      	bls.n	80057c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	e004      	b.n	80057c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <xTaskIncrementTick+0x170>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	4a0f      	ldr	r2, [pc, #60]	; (8005800 <xTaskIncrementTick+0x170>)
 80057c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <xTaskIncrementTick+0x174>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057d2:	697b      	ldr	r3, [r7, #20]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200015b4 	.word	0x200015b4
 80057e0:	20001590 	.word	0x20001590
 80057e4:	20001544 	.word	0x20001544
 80057e8:	20001548 	.word	0x20001548
 80057ec:	200015a4 	.word	0x200015a4
 80057f0:	200015ac 	.word	0x200015ac
 80057f4:	20001594 	.word	0x20001594
 80057f8:	200010bc 	.word	0x200010bc
 80057fc:	200010b8 	.word	0x200010b8
 8005800:	2000159c 	.word	0x2000159c
 8005804:	200015a0 	.word	0x200015a0

08005808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800580e:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <vTaskSwitchContext+0xc8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <vTaskSwitchContext+0xcc>)
 8005818:	2201      	movs	r2, #1
 800581a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800581c:	e053      	b.n	80058c6 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 800581e:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <vTaskSwitchContext+0xcc>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005824:	4b2c      	ldr	r3, [pc, #176]	; (80058d8 <vTaskSwitchContext+0xd0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e00f      	b.n	800584c <vTaskSwitchContext+0x44>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <vTaskSwitchContext+0x3e>
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	e7fe      	b.n	8005844 <vTaskSwitchContext+0x3c>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b01      	subs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	4923      	ldr	r1, [pc, #140]	; (80058dc <vTaskSwitchContext+0xd4>)
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0e5      	beq.n	800582c <vTaskSwitchContext+0x24>
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <vTaskSwitchContext+0xd4>)
 800586c:	4413      	add	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3308      	adds	r3, #8
 8005882:	429a      	cmp	r2, r3
 8005884:	d104      	bne.n	8005890 <vTaskSwitchContext+0x88>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <vTaskSwitchContext+0xd8>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <vTaskSwitchContext+0xd0>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80058a0:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <vTaskSwitchContext+0xd8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3334      	adds	r3, #52	; 0x34
 80058a6:	2205      	movs	r2, #5
 80058a8:	490e      	ldr	r1, [pc, #56]	; (80058e4 <vTaskSwitchContext+0xdc>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 fb10 	bl	8006ed0 <memcmp>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <vTaskSwitchContext+0xba>
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <vTaskSwitchContext+0xd8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe f836 	bl	800392c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80058c0:	e001      	b.n	80058c6 <vTaskSwitchContext+0xbe>
		traceTASK_SWITCHED_IN();
 80058c2:	f7fd ffd3 	bl	800386c <SEGGER_SYSVIEW_OnIdle>
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200015b4 	.word	0x200015b4
 80058d4:	200015a0 	.word	0x200015a0
 80058d8:	20001594 	.word	0x20001594
 80058dc:	200010bc 	.word	0x200010bc
 80058e0:	200010b8 	.word	0x200010b8
 80058e4:	08007028 	.word	0x08007028

080058e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <vTaskPlaceOnEventList+0x24>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e7fe      	b.n	800590a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <vTaskPlaceOnEventList+0x44>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3318      	adds	r3, #24
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fe fd84 	bl	8004422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800591a:	2101      	movs	r1, #1
 800591c:	6838      	ldr	r0, [r7, #0]
 800591e:	f000 fab9 	bl	8005e94 <prvAddCurrentTaskToDelayedList>
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200010b8 	.word	0x200010b8

08005930 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <vTaskPlaceOnEventListRestricted+0x26>
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e7fe      	b.n	8005954 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005956:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <vTaskPlaceOnEventListRestricted+0x58>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3318      	adds	r3, #24
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7fe fd3b 	bl	80043da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295
 800596e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005970:	2024      	movs	r0, #36	; 0x24
 8005972:	f7fd faf5 	bl	8002f60 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	68b8      	ldr	r0, [r7, #8]
 800597a:	f000 fa8b 	bl	8005e94 <prvAddCurrentTaskToDelayedList>
	}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	200010b8 	.word	0x200010b8

0800598c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <xTaskRemoveFromEventList+0x2a>
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e7fe      	b.n	80059b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	3318      	adds	r3, #24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fd6a 	bl	8004494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c0:	4b1f      	ldr	r3, [pc, #124]	; (8005a40 <xTaskRemoveFromEventList+0xb4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d121      	bne.n	8005a0c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fd61 	bl	8004494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd ffed 	bl	80039b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <xTaskRemoveFromEventList+0xb8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d903      	bls.n	80059ee <xTaskRemoveFromEventList+0x62>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <xTaskRemoveFromEventList+0xb8>)
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <xTaskRemoveFromEventList+0xbc>)
 80059fc:	441a      	add	r2, r3
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f7fe fce8 	bl	80043da <vListInsertEnd>
 8005a0a:	e005      	b.n	8005a18 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3318      	adds	r3, #24
 8005a10:	4619      	mov	r1, r3
 8005a12:	480e      	ldr	r0, [pc, #56]	; (8005a4c <xTaskRemoveFromEventList+0xc0>)
 8005a14:	f7fe fce1 	bl	80043da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <xTaskRemoveFromEventList+0xc4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d905      	bls.n	8005a32 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <xTaskRemoveFromEventList+0xc8>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e001      	b.n	8005a36 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a36:	697b      	ldr	r3, [r7, #20]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	200015b4 	.word	0x200015b4
 8005a44:	20001594 	.word	0x20001594
 8005a48:	200010bc 	.word	0x200010bc
 8005a4c:	2000154c 	.word	0x2000154c
 8005a50:	200010b8 	.word	0x200010b8
 8005a54:	200015a0 	.word	0x200015a0

08005a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <vTaskInternalSetTimeOutState+0x24>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <vTaskInternalSetTimeOutState+0x28>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	605a      	str	r2, [r3, #4]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	200015a4 	.word	0x200015a4
 8005a80:	20001590 	.word	0x20001590

08005a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <xTaskCheckForTimeOut+0x24>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <xTaskCheckForTimeOut+0x3e>
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	e7fe      	b.n	8005ac0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005ac2:	f000 feab 	bl	800681c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ac6:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <xTaskCheckForTimeOut+0xb8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d102      	bne.n	8005ae6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e023      	b.n	8005b2e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <xTaskCheckForTimeOut+0xbc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d007      	beq.n	8005b02 <xTaskCheckForTimeOut+0x7e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d302      	bcc.n	8005b02 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e015      	b.n	8005b2e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d20b      	bcs.n	8005b24 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad2      	subs	r2, r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff9d 	bl	8005a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e004      	b.n	8005b2e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b2e:	f000 fea3 	bl	8006878 <vPortExitCritical>

	return xReturn;
 8005b32:	69fb      	ldr	r3, [r7, #28]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20001590 	.word	0x20001590
 8005b40:	200015a4 	.word	0x200015a4

08005b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <vTaskMissedYield+0x14>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	200015a0 	.word	0x200015a0

08005b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b64:	f000 f852 	bl	8005c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <prvIdleTask+0x28>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d9f9      	bls.n	8005b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <prvIdleTask+0x2c>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b80:	e7f0      	b.n	8005b64 <prvIdleTask+0x8>
 8005b82:	bf00      	nop
 8005b84:	200010bc 	.word	0x200010bc
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b92:	2300      	movs	r3, #0
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e00c      	b.n	8005bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <prvInitialiseTaskLists+0x60>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fbea 	bl	8004380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b37      	cmp	r3, #55	; 0x37
 8005bb6:	d9ef      	bls.n	8005b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb8:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <prvInitialiseTaskLists+0x64>)
 8005bba:	f7fe fbe1 	bl	8004380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bbe:	480d      	ldr	r0, [pc, #52]	; (8005bf4 <prvInitialiseTaskLists+0x68>)
 8005bc0:	f7fe fbde 	bl	8004380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc4:	480c      	ldr	r0, [pc, #48]	; (8005bf8 <prvInitialiseTaskLists+0x6c>)
 8005bc6:	f7fe fbdb 	bl	8004380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bca:	480c      	ldr	r0, [pc, #48]	; (8005bfc <prvInitialiseTaskLists+0x70>)
 8005bcc:	f7fe fbd8 	bl	8004380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bd0:	480b      	ldr	r0, [pc, #44]	; (8005c00 <prvInitialiseTaskLists+0x74>)
 8005bd2:	f7fe fbd5 	bl	8004380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <prvInitialiseTaskLists+0x78>)
 8005bd8:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <prvInitialiseTaskLists+0x64>)
 8005bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <prvInitialiseTaskLists+0x7c>)
 8005bde:	4a05      	ldr	r2, [pc, #20]	; (8005bf4 <prvInitialiseTaskLists+0x68>)
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	200010bc 	.word	0x200010bc
 8005bf0:	2000151c 	.word	0x2000151c
 8005bf4:	20001530 	.word	0x20001530
 8005bf8:	2000154c 	.word	0x2000154c
 8005bfc:	20001560 	.word	0x20001560
 8005c00:	20001578 	.word	0x20001578
 8005c04:	20001544 	.word	0x20001544
 8005c08:	20001548 	.word	0x20001548

08005c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c12:	e019      	b.n	8005c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c14:	f000 fe02 	bl	800681c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c18:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <prvCheckTasksWaitingTermination+0x4c>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fc35 	bl	8004494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <prvCheckTasksWaitingTermination+0x50>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <prvCheckTasksWaitingTermination+0x50>)
 8005c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c3e:	f000 fe1b 	bl	8006878 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f846 	bl	8005cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <prvCheckTasksWaitingTermination+0x54>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e1      	bne.n	8005c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20001560 	.word	0x20001560
 8005c5c:	2000158c 	.word	0x2000158c
 8005c60:	20001574 	.word	0x20001574

08005c64 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c70:	e005      	b.n	8005c7e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3301      	adds	r3, #1
 8005c76:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2ba5      	cmp	r3, #165	; 0xa5
 8005c84:	d0f5      	beq.n	8005c72 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	089b      	lsrs	r3, r3, #2
 8005c8a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	b29b      	uxth	r3, r3
	}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <uxTaskGetStackHighWaterMark+0x14>
 8005caa:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <uxTaskGetStackHighWaterMark+0x34>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	e000      	b.n	8005cb2 <uxTaskGetStackHighWaterMark+0x16>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005cba:	6938      	ldr	r0, [r7, #16]
 8005cbc:	f7ff ffd2 	bl	8005c64 <prvTaskCheckFreeStackSpace>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
	}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200010b8 	.word	0x200010b8

08005cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d108      	bne.n	8005cf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 ffb8 	bl	8006c60 <vPortFree>
				vPortFree( pxTCB );
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 ffb5 	bl	8006c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cf6:	e017      	b.n	8005d28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d103      	bne.n	8005d0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 ffac 	bl	8006c60 <vPortFree>
	}
 8005d08:	e00e      	b.n	8005d28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d009      	beq.n	8005d28 <prvDeleteTCB+0x54>
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e7fe      	b.n	8005d26 <prvDeleteTCB+0x52>
	}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <prvResetNextTaskUnblockTime+0x38>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d40:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <prvResetNextTaskUnblockTime+0x3c>)
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d48:	e008      	b.n	8005d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <prvResetNextTaskUnblockTime+0x38>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <prvResetNextTaskUnblockTime+0x3c>)
 8005d5a:	6013      	str	r3, [r2, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20001544 	.word	0x20001544
 8005d6c:	200015ac 	.word	0x200015ac

08005d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <xTaskGetSchedulerState+0x34>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	e008      	b.n	8005d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <xTaskGetSchedulerState+0x38>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	e001      	b.n	8005d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d92:	2300      	movs	r3, #0
 8005d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d96:	687b      	ldr	r3, [r7, #4]
	}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	20001598 	.word	0x20001598
 8005da8:	200015b4 	.word	0x200015b4

08005dac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d05d      	beq.n	8005e7e <xTaskPriorityDisinherit+0xd2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <xTaskPriorityDisinherit+0xdc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d009      	beq.n	8005de0 <xTaskPriorityDisinherit+0x34>
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e7fe      	b.n	8005dde <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <xTaskPriorityDisinherit+0x50>
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	e7fe      	b.n	8005dfa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e00:	1e5a      	subs	r2, r3, #1
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d035      	beq.n	8005e7e <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d131      	bne.n	8005e7e <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fb38 	bl	8004494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4619      	mov	r1, r3
 8005e28:	204a      	movs	r0, #74	; 0x4a
 8005e2a:	f7fd f8b7 	bl	8002f9c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fd fdb5 	bl	80039b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <xTaskPriorityDisinherit+0xe0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <xTaskPriorityDisinherit+0xb2>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <xTaskPriorityDisinherit+0xe0>)
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <xTaskPriorityDisinherit+0xe4>)
 8005e6c:	441a      	add	r2, r3
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fe fab0 	bl	80043da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e7e:	697b      	ldr	r3, [r7, #20]
	}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	200010b8 	.word	0x200010b8
 8005e8c:	20001594 	.word	0x20001594
 8005e90:	200010bc 	.word	0x200010bc

08005e94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e9e:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea4:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe faf2 	bl	8004494 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d10a      	bne.n	8005ece <prvAddCurrentTaskToDelayedList+0x3a>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4819      	ldr	r0, [pc, #100]	; (8005f2c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ec8:	f7fe fa87 	bl	80043da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ecc:	e026      	b.n	8005f1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d209      	bcs.n	8005efa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee6:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7fe fa95 	bl	8004422 <vListInsert>
}
 8005ef8:	e010      	b.n	8005f1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005efa:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f7fe fa8b 	bl	8004422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d202      	bcs.n	8005f1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f16:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	6013      	str	r3, [r2, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20001590 	.word	0x20001590
 8005f28:	200010b8 	.word	0x200010b8
 8005f2c:	20001578 	.word	0x20001578
 8005f30:	20001548 	.word	0x20001548
 8005f34:	20001544 	.word	0x20001544
 8005f38:	200015ac 	.word	0x200015ac

08005f3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08a      	sub	sp, #40	; 0x28
 8005f40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f46:	f000 faff 	bl	8006548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	; (8005fbc <xTimerCreateTimerTask+0x80>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d021      	beq.n	8005f96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f5a:	1d3a      	adds	r2, r7, #4
 8005f5c:	f107 0108 	add.w	r1, r7, #8
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe f9f1 	bl	800434c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	9202      	str	r2, [sp, #8]
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	2302      	movs	r3, #2
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	4910      	ldr	r1, [pc, #64]	; (8005fc0 <xTimerCreateTimerTask+0x84>)
 8005f7e:	4811      	ldr	r0, [pc, #68]	; (8005fc4 <xTimerCreateTimerTask+0x88>)
 8005f80:	f7ff f848 	bl	8005014 <xTaskCreateStatic>
 8005f84:	4602      	mov	r2, r0
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <xTimerCreateTimerTask+0x8c>)
 8005f88:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f8a:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <xTimerCreateTimerTask+0x8c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f92:	2301      	movs	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <xTimerCreateTimerTask+0x74>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e7fe      	b.n	8005fae <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005fb0:	697b      	ldr	r3, [r7, #20]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200015e8 	.word	0x200015e8
 8005fc0:	08007030 	.word	0x08007030
 8005fc4:	080060fd 	.word	0x080060fd
 8005fc8:	200015ec 	.word	0x200015ec

08005fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d109      	bne.n	8005ff8 <xTimerGenericCommand+0x2c>
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	623b      	str	r3, [r7, #32]
 8005ff6:	e7fe      	b.n	8005ff6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ff8:	4b19      	ldr	r3, [pc, #100]	; (8006060 <xTimerGenericCommand+0x94>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d02a      	beq.n	8006056 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b05      	cmp	r3, #5
 8006010:	dc18      	bgt.n	8006044 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006012:	f7ff fead 	bl	8005d70 <xTaskGetSchedulerState>
 8006016:	4603      	mov	r3, r0
 8006018:	2b02      	cmp	r3, #2
 800601a:	d109      	bne.n	8006030 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800601c:	4b10      	ldr	r3, [pc, #64]	; (8006060 <xTimerGenericCommand+0x94>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	f107 0110 	add.w	r1, r7, #16
 8006024:	2300      	movs	r3, #0
 8006026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006028:	f7fe fba2 	bl	8004770 <xQueueGenericSend>
 800602c:	6278      	str	r0, [r7, #36]	; 0x24
 800602e:	e012      	b.n	8006056 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <xTimerGenericCommand+0x94>)
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	f107 0110 	add.w	r1, r7, #16
 8006038:	2300      	movs	r3, #0
 800603a:	2200      	movs	r2, #0
 800603c:	f7fe fb98 	bl	8004770 <xQueueGenericSend>
 8006040:	6278      	str	r0, [r7, #36]	; 0x24
 8006042:	e008      	b.n	8006056 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <xTimerGenericCommand+0x94>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	f107 0110 	add.w	r1, r7, #16
 800604c:	2300      	movs	r3, #0
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	f7fe fcb0 	bl	80049b4 <xQueueGenericSendFromISR>
 8006054:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006058:	4618      	mov	r0, r3
 800605a:	3728      	adds	r7, #40	; 0x28
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200015e8 	.word	0x200015e8

08006064 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af02      	add	r7, sp, #8
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606e:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <prvProcessExpiredTimer+0x94>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3304      	adds	r3, #4
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe fa09 	bl	8004494 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d021      	beq.n	80060d4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	18d1      	adds	r1, r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	6978      	ldr	r0, [r7, #20]
 800609e:	f000 f8d1 	bl	8006244 <prvInsertTimerInActiveList>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01e      	beq.n	80060e6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060a8:	2300      	movs	r3, #0
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2300      	movs	r3, #0
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	2100      	movs	r1, #0
 80060b2:	6978      	ldr	r0, [r7, #20]
 80060b4:	f7ff ff8a 	bl	8005fcc <xTimerGenericCommand>
 80060b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d112      	bne.n	80060e6 <prvProcessExpiredTimer+0x82>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	e7fe      	b.n	80060d2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	4798      	blx	r3
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	200015e0 	.word	0x200015e0

080060fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006104:	f107 0308 	add.w	r3, r7, #8
 8006108:	4618      	mov	r0, r3
 800610a:	f000 f857 	bl	80061bc <prvGetNextExpireTime>
 800610e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4619      	mov	r1, r3
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f803 	bl	8006120 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800611a:	f000 f8d5 	bl	80062c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800611e:	e7f1      	b.n	8006104 <prvTimerTask+0x8>

08006120 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800612a:	f7ff f9e1 	bl	80054f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800612e:	f107 0308 	add.w	r3, r7, #8
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f866 	bl	8006204 <prvSampleTimeNow>
 8006138:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d130      	bne.n	80061a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <prvProcessTimerOrBlockTask+0x3c>
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	429a      	cmp	r2, r3
 800614c:	d806      	bhi.n	800615c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800614e:	f7ff f9dd 	bl	800550c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff85 	bl	8006064 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800615a:	e024      	b.n	80061a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d008      	beq.n	8006174 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006162:	4b13      	ldr	r3, [pc, #76]	; (80061b0 <prvProcessTimerOrBlockTask+0x90>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <prvProcessTimerOrBlockTask+0x50>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <prvProcessTimerOrBlockTask+0x52>
 8006170:	2300      	movs	r3, #0
 8006172:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006174:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <prvProcessTimerOrBlockTask+0x94>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	4619      	mov	r1, r3
 8006182:	f7fe ff13 	bl	8004fac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006186:	f7ff f9c1 	bl	800550c <xTaskResumeAll>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <prvProcessTimerOrBlockTask+0x98>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
}
 80061a0:	e001      	b.n	80061a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061a2:	f7ff f9b3 	bl	800550c <xTaskResumeAll>
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200015e4 	.word	0x200015e4
 80061b4:	200015e8 	.word	0x200015e8
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <prvGetNextExpireTime+0x44>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <prvGetNextExpireTime+0x16>
 80061ce:	2201      	movs	r2, #1
 80061d0:	e000      	b.n	80061d4 <prvGetNextExpireTime+0x18>
 80061d2:	2200      	movs	r2, #0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <prvGetNextExpireTime+0x44>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e001      	b.n	80061f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	200015e0 	.word	0x200015e0

08006204 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800620c:	f7ff fa1e 	bl	800564c <xTaskGetTickCount>
 8006210:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <prvSampleTimeNow+0x3c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	429a      	cmp	r2, r3
 800621a:	d205      	bcs.n	8006228 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800621c:	f000 f930 	bl	8006480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e002      	b.n	800622e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800622e:	4a04      	ldr	r2, [pc, #16]	; (8006240 <prvSampleTimeNow+0x3c>)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006234:	68fb      	ldr	r3, [r7, #12]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	200015f0 	.word	0x200015f0

08006244 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d812      	bhi.n	8006290 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	429a      	cmp	r2, r3
 8006276:	d302      	bcc.n	800627e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006278:	2301      	movs	r3, #1
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e01b      	b.n	80062b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800627e:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <prvInsertTimerInActiveList+0x7c>)
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3304      	adds	r3, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f7fe f8ca 	bl	8004422 <vListInsert>
 800628e:	e012      	b.n	80062b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d206      	bcs.n	80062a6 <prvInsertTimerInActiveList+0x62>
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d302      	bcc.n	80062a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e007      	b.n	80062b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062a6:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <prvInsertTimerInActiveList+0x80>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7fe f8b6 	bl	8004422 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062b6:	697b      	ldr	r3, [r7, #20]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	200015e4 	.word	0x200015e4
 80062c4:	200015e0 	.word	0x200015e0

080062c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08e      	sub	sp, #56	; 0x38
 80062cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ce:	e0c6      	b.n	800645e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da17      	bge.n	8006306 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062d6:	1d3b      	adds	r3, r7, #4
 80062d8:	3304      	adds	r3, #4
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <prvProcessReceivedCommands+0x2e>
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e7fe      	b.n	80062f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062fc:	6850      	ldr	r0, [r2, #4]
 80062fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006300:	6892      	ldr	r2, [r2, #8]
 8006302:	4611      	mov	r1, r2
 8006304:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f2c0 80a7 	blt.w	800645c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	3304      	adds	r3, #4
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe f8b8 	bl	8004494 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006324:	463b      	mov	r3, r7
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff ff6c 	bl	8006204 <prvSampleTimeNow>
 800632c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b09      	cmp	r3, #9
 8006332:	f200 8094 	bhi.w	800645e <prvProcessReceivedCommands+0x196>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <prvProcessReceivedCommands+0x74>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	08006365 	.word	0x08006365
 8006340:	08006365 	.word	0x08006365
 8006344:	08006365 	.word	0x08006365
 8006348:	080063d7 	.word	0x080063d7
 800634c:	080063eb 	.word	0x080063eb
 8006350:	08006433 	.word	0x08006433
 8006354:	08006365 	.word	0x08006365
 8006358:	08006365 	.word	0x08006365
 800635c:	080063d7 	.word	0x080063d7
 8006360:	080063eb 	.word	0x080063eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	b2da      	uxtb	r2, r3
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	18d1      	adds	r1, r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006384:	f7ff ff5e 	bl	8006244 <prvInsertTimerInActiveList>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d067      	beq.n	800645e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006394:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05c      	beq.n	800645e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	441a      	add	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b6:	f7ff fe09 	bl	8005fcc <xTimerGenericCommand>
 80063ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d14d      	bne.n	800645e <prvProcessReceivedCommands+0x196>
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	e7fe      	b.n	80063d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063dc:	f023 0301 	bic.w	r3, r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063e8:	e039      	b.n	800645e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <prvProcessReceivedCommands+0x156>
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e7fe      	b.n	800641c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	18d1      	adds	r1, r2, r3
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642c:	f7ff ff0a 	bl	8006244 <prvInsertTimerInActiveList>
					break;
 8006430:	e015      	b.n	800645e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006442:	f000 fc0d 	bl	8006c60 <vPortFree>
 8006446:	e00a      	b.n	800645e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800645a:	e000      	b.n	800645e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800645c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800645e:	4b07      	ldr	r3, [pc, #28]	; (800647c <prvProcessReceivedCommands+0x1b4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1d39      	adds	r1, r7, #4
 8006464:	2200      	movs	r2, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fb4c 	bl	8004b04 <xQueueReceive>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	f47f af2e 	bne.w	80062d0 <prvProcessReceivedCommands+0x8>
	}
}
 8006474:	bf00      	nop
 8006476:	3730      	adds	r7, #48	; 0x30
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	200015e8 	.word	0x200015e8

08006480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006486:	e047      	b.n	8006518 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006488:	4b2d      	ldr	r3, [pc, #180]	; (8006540 <prvSwitchTimerLists+0xc0>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006492:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <prvSwitchTimerLists+0xc0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3304      	adds	r3, #4
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fd fff7 	bl	8004494 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02d      	beq.n	8006518 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d90e      	bls.n	80064ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064da:	4b19      	ldr	r3, [pc, #100]	; (8006540 <prvSwitchTimerLists+0xc0>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7fd ff9c 	bl	8004422 <vListInsert>
 80064ea:	e015      	b.n	8006518 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064ec:	2300      	movs	r3, #0
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	2100      	movs	r1, #0
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff fd68 	bl	8005fcc <xTimerGenericCommand>
 80064fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d109      	bne.n	8006518 <prvSwitchTimerLists+0x98>
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	603b      	str	r3, [r7, #0]
 8006516:	e7fe      	b.n	8006516 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <prvSwitchTimerLists+0xc0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1b2      	bne.n	8006488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006522:	4b07      	ldr	r3, [pc, #28]	; (8006540 <prvSwitchTimerLists+0xc0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006528:	4b06      	ldr	r3, [pc, #24]	; (8006544 <prvSwitchTimerLists+0xc4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a04      	ldr	r2, [pc, #16]	; (8006540 <prvSwitchTimerLists+0xc0>)
 800652e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006530:	4a04      	ldr	r2, [pc, #16]	; (8006544 <prvSwitchTimerLists+0xc4>)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6013      	str	r3, [r2, #0]
}
 8006536:	bf00      	nop
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200015e0 	.word	0x200015e0
 8006544:	200015e4 	.word	0x200015e4

08006548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800654e:	f000 f965 	bl	800681c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d120      	bne.n	800659c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800655a:	4814      	ldr	r0, [pc, #80]	; (80065ac <prvCheckForValidListAndQueue+0x64>)
 800655c:	f7fd ff10 	bl	8004380 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006560:	4813      	ldr	r0, [pc, #76]	; (80065b0 <prvCheckForValidListAndQueue+0x68>)
 8006562:	f7fd ff0d 	bl	8004380 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006566:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <prvCheckForValidListAndQueue+0x6c>)
 8006568:	4a10      	ldr	r2, [pc, #64]	; (80065ac <prvCheckForValidListAndQueue+0x64>)
 800656a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <prvCheckForValidListAndQueue+0x70>)
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <prvCheckForValidListAndQueue+0x68>)
 8006570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006572:	2300      	movs	r3, #0
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <prvCheckForValidListAndQueue+0x74>)
 8006578:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <prvCheckForValidListAndQueue+0x78>)
 800657a:	2110      	movs	r1, #16
 800657c:	200a      	movs	r0, #10
 800657e:	f7fe f81b 	bl	80045b8 <xQueueGenericCreateStatic>
 8006582:	4602      	mov	r2, r0
 8006584:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 8006586:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006588:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <prvCheckForValidListAndQueue+0x60>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	490b      	ldr	r1, [pc, #44]	; (80065c4 <prvCheckForValidListAndQueue+0x7c>)
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fcd8 	bl	8004f4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800659c:	f000 f96c 	bl	8006878 <vPortExitCritical>
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200015e8 	.word	0x200015e8
 80065ac:	200015b8 	.word	0x200015b8
 80065b0:	200015cc 	.word	0x200015cc
 80065b4:	200015e0 	.word	0x200015e0
 80065b8:	200015e4 	.word	0x200015e4
 80065bc:	20001694 	.word	0x20001694
 80065c0:	200015f4 	.word	0x200015f4
 80065c4:	08007038 	.word	0x08007038

080065c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3b04      	subs	r3, #4
 80065d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3b04      	subs	r3, #4
 80065e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f023 0201 	bic.w	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b04      	subs	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065f8:	4a0c      	ldr	r2, [pc, #48]	; (800662c <pxPortInitialiseStack+0x64>)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b14      	subs	r3, #20
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3b04      	subs	r3, #4
 800660e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f06f 0202 	mvn.w	r2, #2
 8006616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b20      	subs	r3, #32
 800661c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800661e:	68fb      	ldr	r3, [r7, #12]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	08006631 	.word	0x08006631

08006630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <prvTaskExitError+0x50>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006642:	d009      	beq.n	8006658 <prvTaskExitError+0x28>
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e7fe      	b.n	8006656 <prvTaskExitError+0x26>
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800666a:	bf00      	nop
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0fc      	beq.n	800666c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	2000000c 	.word	0x2000000c
	...

08006690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006690:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <pxCurrentTCBConst2>)
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	6808      	ldr	r0, [r1, #0]
 8006696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	f380 8809 	msr	PSP, r0
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	4770      	bx	lr
 80066ac:	f3af 8000 	nop.w

080066b0 <pxCurrentTCBConst2>:
 80066b0:	200010b8 	.word	0x200010b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066b8:	4808      	ldr	r0, [pc, #32]	; (80066dc <prvPortStartFirstTask+0x24>)
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	6800      	ldr	r0, [r0, #0]
 80066be:	f380 8808 	msr	MSP, r0
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8814 	msr	CONTROL, r0
 80066ca:	b662      	cpsie	i
 80066cc:	b661      	cpsie	f
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	df00      	svc	0
 80066d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066da:	bf00      	nop
 80066dc:	e000ed08 	.word	0xe000ed08

080066e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066e6:	4b44      	ldr	r3, [pc, #272]	; (80067f8 <xPortStartScheduler+0x118>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a44      	ldr	r2, [pc, #272]	; (80067fc <xPortStartScheduler+0x11c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d109      	bne.n	8006704 <xPortStartScheduler+0x24>
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	e7fe      	b.n	8006702 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006704:	4b3c      	ldr	r3, [pc, #240]	; (80067f8 <xPortStartScheduler+0x118>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3d      	ldr	r2, [pc, #244]	; (8006800 <xPortStartScheduler+0x120>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d109      	bne.n	8006722 <xPortStartScheduler+0x42>
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e7fe      	b.n	8006720 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006722:	4b38      	ldr	r3, [pc, #224]	; (8006804 <xPortStartScheduler+0x124>)
 8006724:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006744:	b2da      	uxtb	r2, r3
 8006746:	4b30      	ldr	r3, [pc, #192]	; (8006808 <xPortStartScheduler+0x128>)
 8006748:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800674a:	4b30      	ldr	r3, [pc, #192]	; (800680c <xPortStartScheduler+0x12c>)
 800674c:	2207      	movs	r2, #7
 800674e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006750:	e009      	b.n	8006766 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006752:	4b2e      	ldr	r3, [pc, #184]	; (800680c <xPortStartScheduler+0x12c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3b01      	subs	r3, #1
 8006758:	4a2c      	ldr	r2, [pc, #176]	; (800680c <xPortStartScheduler+0x12c>)
 800675a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	b2db      	uxtb	r3, r3
 8006764:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676e:	2b80      	cmp	r3, #128	; 0x80
 8006770:	d0ef      	beq.n	8006752 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006772:	4b26      	ldr	r3, [pc, #152]	; (800680c <xPortStartScheduler+0x12c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f1c3 0307 	rsb	r3, r3, #7
 800677a:	2b04      	cmp	r3, #4
 800677c:	d009      	beq.n	8006792 <xPortStartScheduler+0xb2>
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	e7fe      	b.n	8006790 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <xPortStartScheduler+0x12c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	4a1c      	ldr	r2, [pc, #112]	; (800680c <xPortStartScheduler+0x12c>)
 800679a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <xPortStartScheduler+0x12c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067a4:	4a19      	ldr	r2, [pc, #100]	; (800680c <xPortStartScheduler+0x12c>)
 80067a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <xPortStartScheduler+0x130>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <xPortStartScheduler+0x130>)
 80067b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067bc:	4b14      	ldr	r3, [pc, #80]	; (8006810 <xPortStartScheduler+0x130>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a13      	ldr	r2, [pc, #76]	; (8006810 <xPortStartScheduler+0x130>)
 80067c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067c8:	f000 f8d6 	bl	8006978 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067cc:	4b11      	ldr	r3, [pc, #68]	; (8006814 <xPortStartScheduler+0x134>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067d2:	f000 f8f5 	bl	80069c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067d6:	4b10      	ldr	r3, [pc, #64]	; (8006818 <xPortStartScheduler+0x138>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a0f      	ldr	r2, [pc, #60]	; (8006818 <xPortStartScheduler+0x138>)
 80067dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067e2:	f7ff ff69 	bl	80066b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067e6:	f7ff f80f 	bl	8005808 <vTaskSwitchContext>
	prvTaskExitError();
 80067ea:	f7ff ff21 	bl	8006630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	e000ed00 	.word	0xe000ed00
 80067fc:	410fc271 	.word	0x410fc271
 8006800:	410fc270 	.word	0x410fc270
 8006804:	e000e400 	.word	0xe000e400
 8006808:	200016e4 	.word	0x200016e4
 800680c:	200016e8 	.word	0x200016e8
 8006810:	e000ed20 	.word	0xe000ed20
 8006814:	2000000c 	.word	0x2000000c
 8006818:	e000ef34 	.word	0xe000ef34

0800681c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <vPortEnterCritical+0x54>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	4a0d      	ldr	r2, [pc, #52]	; (8006870 <vPortEnterCritical+0x54>)
 800683c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800683e:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <vPortEnterCritical+0x54>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d10e      	bne.n	8006864 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <vPortEnterCritical+0x58>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <vPortEnterCritical+0x48>
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	e7fe      	b.n	8006862 <vPortEnterCritical+0x46>
	}
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	2000000c 	.word	0x2000000c
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <vPortExitCritical+0x4c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d109      	bne.n	800689a <vPortExitCritical+0x22>
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	607b      	str	r3, [r7, #4]
 8006898:	e7fe      	b.n	8006898 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <vPortExitCritical+0x4c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3b01      	subs	r3, #1
 80068a0:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <vPortExitCritical+0x4c>)
 80068a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <vPortExitCritical+0x4c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <vPortExitCritical+0x3e>
 80068ac:	2300      	movs	r3, #0
 80068ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	2000000c 	.word	0x2000000c
	...

080068d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068d0:	f3ef 8009 	mrs	r0, PSP
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <pxCurrentTCBConst>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f01e 0f10 	tst.w	lr, #16
 80068e0:	bf08      	it	eq
 80068e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	6010      	str	r0, [r2, #0]
 80068ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068f4:	f380 8811 	msr	BASEPRI, r0
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f7fe ff82 	bl	8005808 <vTaskSwitchContext>
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f380 8811 	msr	BASEPRI, r0
 800690c:	bc09      	pop	{r0, r3}
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	6808      	ldr	r0, [r1, #0]
 8006912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	f01e 0f10 	tst.w	lr, #16
 800691a:	bf08      	it	eq
 800691c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006920:	f380 8809 	msr	PSP, r0
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst>:
 8006930:	200010b8 	.word	0x200010b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006950:	f7fe fe9e 	bl	8005690 <xTaskIncrementTick>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <SysTick_Handler+0x3c>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <vPortSetupTimerInterrupt+0x34>)
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006982:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vPortSetupTimerInterrupt+0x38>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <vPortSetupTimerInterrupt+0x3c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <vPortSetupTimerInterrupt+0x40>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	099b      	lsrs	r3, r3, #6
 8006994:	4a09      	ldr	r2, [pc, #36]	; (80069bc <vPortSetupTimerInterrupt+0x44>)
 8006996:	3b01      	subs	r3, #1
 8006998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800699a:	4b04      	ldr	r3, [pc, #16]	; (80069ac <vPortSetupTimerInterrupt+0x34>)
 800699c:	2207      	movs	r2, #7
 800699e:	601a      	str	r2, [r3, #0]
}
 80069a0:	bf00      	nop
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	e000e010 	.word	0xe000e010
 80069b0:	e000e018 	.word	0xe000e018
 80069b4:	20000000 	.word	0x20000000
 80069b8:	10624dd3 	.word	0x10624dd3
 80069bc:	e000e014 	.word	0xe000e014

080069c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069d0 <vPortEnableVFP+0x10>
 80069c4:	6801      	ldr	r1, [r0, #0]
 80069c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069ca:	6001      	str	r1, [r0, #0]
 80069cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069ce:	bf00      	nop
 80069d0:	e000ed88 	.word	0xe000ed88

080069d4 <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
//###########################################################
// Add function below in file port.c
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069da:	4b1f      	ldr	r3, [pc, #124]	; (8006a58 <vSetVarulMaxPRIGROUPValue+0x84>)
 80069dc:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	22ff      	movs	r2, #255	; 0xff
 80069e2:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069ec:	4b1b      	ldr	r3, [pc, #108]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 80069ee:	2207      	movs	r2, #7
 80069f0:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069f2:	e009      	b.n	8006a08 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80069f4:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 80069fc:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d0ef      	beq.n	80069f4 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a14:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f1c3 0307 	rsb	r3, r3, #7
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d009      	beq.n	8006a34 <vSetVarulMaxPRIGROUPValue+0x60>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	e7fe      	b.n	8006a32 <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 8006a3c:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a3e:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a46:	4a05      	ldr	r2, [pc, #20]	; (8006a5c <vSetVarulMaxPRIGROUPValue+0x88>)
 8006a48:	6013      	str	r3, [r2, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	e000e400 	.word	0xe000e400
 8006a5c:	200016e8 	.word	0x200016e8

08006a60 <vPortValidateInterruptPriority>:
#endif /* conifgASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	     vSetVarulMaxPRIGROUPValue();
 8006a66:	f7ff ffb5 	bl	80069d4 <vSetVarulMaxPRIGROUPValue>
		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a6a:	f3ef 8305 	mrs	r3, IPSR
 8006a6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b0f      	cmp	r3, #15
 8006a74:	d913      	bls.n	8006a9e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a76:	4a15      	ldr	r2, [pc, #84]	; (8006acc <vPortValidateInterruptPriority+0x6c>)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a80:	4b13      	ldr	r3, [pc, #76]	; (8006ad0 <vPortValidateInterruptPriority+0x70>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	7afa      	ldrb	r2, [r7, #11]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d209      	bcs.n	8006a9e <vPortValidateInterruptPriority+0x3e>
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	e7fe      	b.n	8006a9c <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ad4 <vPortValidateInterruptPriority+0x74>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <vPortValidateInterruptPriority+0x78>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d909      	bls.n	8006ac2 <vPortValidateInterruptPriority+0x62>
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	e7fe      	b.n	8006ac0 <vPortValidateInterruptPriority+0x60>
	}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	e000e3f0 	.word	0xe000e3f0
 8006ad0:	200016e4 	.word	0x200016e4
 8006ad4:	e000ed0c 	.word	0xe000ed0c
 8006ad8:	200016e8 	.word	0x200016e8

08006adc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ae8:	f7fe fd02 	bl	80054f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aec:	4b57      	ldr	r3, [pc, #348]	; (8006c4c <pvPortMalloc+0x170>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006af4:	f000 f90c 	bl	8006d10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006af8:	4b55      	ldr	r3, [pc, #340]	; (8006c50 <pvPortMalloc+0x174>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f040 808c 	bne.w	8006c1e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01c      	beq.n	8006b46 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4413      	add	r3, r2
 8006b12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d013      	beq.n	8006b46 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f023 0307 	bic.w	r3, r3, #7
 8006b24:	3308      	adds	r3, #8
 8006b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <pvPortMalloc+0x6a>
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e7fe      	b.n	8006b44 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d068      	beq.n	8006c1e <pvPortMalloc+0x142>
 8006b4c:	4b41      	ldr	r3, [pc, #260]	; (8006c54 <pvPortMalloc+0x178>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d863      	bhi.n	8006c1e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b56:	4b40      	ldr	r3, [pc, #256]	; (8006c58 <pvPortMalloc+0x17c>)
 8006b58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b5a:	4b3f      	ldr	r3, [pc, #252]	; (8006c58 <pvPortMalloc+0x17c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b60:	e004      	b.n	8006b6c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d903      	bls.n	8006b7e <pvPortMalloc+0xa2>
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f1      	bne.n	8006b62 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b7e:	4b33      	ldr	r3, [pc, #204]	; (8006c4c <pvPortMalloc+0x170>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d04a      	beq.n	8006c1e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	4413      	add	r3, r2
 8006b90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	1ad2      	subs	r2, r2, r3
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d91e      	bls.n	8006be8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4413      	add	r3, r2
 8006bb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <pvPortMalloc+0xf4>
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	e7fe      	b.n	8006bce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006be2:	69b8      	ldr	r0, [r7, #24]
 8006be4:	f000 f8f6 	bl	8006dd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <pvPortMalloc+0x178>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <pvPortMalloc+0x178>)
 8006bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bf6:	4b17      	ldr	r3, [pc, #92]	; (8006c54 <pvPortMalloc+0x178>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <pvPortMalloc+0x180>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d203      	bcs.n	8006c0a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c02:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <pvPortMalloc+0x178>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <pvPortMalloc+0x180>)
 8006c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <pvPortMalloc+0x174>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c1e:	f7fe fc75 	bl	800550c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <pvPortMalloc+0x164>
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	e7fe      	b.n	8006c3e <pvPortMalloc+0x162>
	return pvReturn;
 8006c40:	69fb      	ldr	r3, [r7, #28]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3728      	adds	r7, #40	; 0x28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200052f4 	.word	0x200052f4
 8006c50:	20005300 	.word	0x20005300
 8006c54:	200052f8 	.word	0x200052f8
 8006c58:	200052ec 	.word	0x200052ec
 8006c5c:	200052fc 	.word	0x200052fc

08006c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d046      	beq.n	8006d00 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c72:	2308      	movs	r3, #8
 8006c74:	425b      	negs	r3, r3
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4413      	add	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <vPortFree+0xa8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <vPortFree+0x42>
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e7fe      	b.n	8006ca0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <vPortFree+0x5e>
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	e7fe      	b.n	8006cbc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <vPortFree+0xa8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d019      	beq.n	8006d00 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d115      	bne.n	8006d00 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <vPortFree+0xa8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	401a      	ands	r2, r3
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ce4:	f7fe fc04 	bl	80054f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <vPortFree+0xac>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	4a06      	ldr	r2, [pc, #24]	; (8006d0c <vPortFree+0xac>)
 8006cf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cf6:	6938      	ldr	r0, [r7, #16]
 8006cf8:	f000 f86c 	bl	8006dd4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006cfc:	f7fe fc06 	bl	800550c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d00:	bf00      	nop
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20005300 	.word	0x20005300
 8006d0c:	200052f8 	.word	0x200052f8

08006d10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d16:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d1c:	4b27      	ldr	r3, [pc, #156]	; (8006dbc <prvHeapInit+0xac>)
 8006d1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3307      	adds	r3, #7
 8006d2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0307 	bic.w	r3, r3, #7
 8006d36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	4a1f      	ldr	r2, [pc, #124]	; (8006dbc <prvHeapInit+0xac>)
 8006d40:	4413      	add	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d48:	4a1d      	ldr	r2, [pc, #116]	; (8006dc0 <prvHeapInit+0xb0>)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <prvHeapInit+0xb0>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <prvHeapInit+0xb4>)
 8006d70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <prvHeapInit+0xb4>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2200      	movs	r2, #0
 8006d78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d7a:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <prvHeapInit+0xb4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d90:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <prvHeapInit+0xb4>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <prvHeapInit+0xb8>)
 8006d9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <prvHeapInit+0xbc>)
 8006da6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <prvHeapInit+0xc0>)
 8006daa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006dae:	601a      	str	r2, [r3, #0]
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	200016ec 	.word	0x200016ec
 8006dc0:	200052ec 	.word	0x200052ec
 8006dc4:	200052f4 	.word	0x200052f4
 8006dc8:	200052fc 	.word	0x200052fc
 8006dcc:	200052f8 	.word	0x200052f8
 8006dd0:	20005300 	.word	0x20005300

08006dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ddc:	4b28      	ldr	r3, [pc, #160]	; (8006e80 <prvInsertBlockIntoFreeList+0xac>)
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e002      	b.n	8006de8 <prvInsertBlockIntoFreeList+0x14>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d8f7      	bhi.n	8006de2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d108      	bne.n	8006e16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	441a      	add	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d118      	bne.n	8006e5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <prvInsertBlockIntoFreeList+0xb0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d00d      	beq.n	8006e52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	441a      	add	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e008      	b.n	8006e64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <prvInsertBlockIntoFreeList+0xb0>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e003      	b.n	8006e64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d002      	beq.n	8006e72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	200052ec 	.word	0x200052ec
 8006e84:	200052f4 	.word	0x200052f4

08006e88 <__libc_init_array>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	4e0d      	ldr	r6, [pc, #52]	; (8006ec0 <__libc_init_array+0x38>)
 8006e8c:	4c0d      	ldr	r4, [pc, #52]	; (8006ec4 <__libc_init_array+0x3c>)
 8006e8e:	1ba4      	subs	r4, r4, r6
 8006e90:	10a4      	asrs	r4, r4, #2
 8006e92:	2500      	movs	r5, #0
 8006e94:	42a5      	cmp	r5, r4
 8006e96:	d109      	bne.n	8006eac <__libc_init_array+0x24>
 8006e98:	4e0b      	ldr	r6, [pc, #44]	; (8006ec8 <__libc_init_array+0x40>)
 8006e9a:	4c0c      	ldr	r4, [pc, #48]	; (8006ecc <__libc_init_array+0x44>)
 8006e9c:	f000 f83a 	bl	8006f14 <_init>
 8006ea0:	1ba4      	subs	r4, r4, r6
 8006ea2:	10a4      	asrs	r4, r4, #2
 8006ea4:	2500      	movs	r5, #0
 8006ea6:	42a5      	cmp	r5, r4
 8006ea8:	d105      	bne.n	8006eb6 <__libc_init_array+0x2e>
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eb0:	4798      	blx	r3
 8006eb2:	3501      	adds	r5, #1
 8006eb4:	e7ee      	b.n	8006e94 <__libc_init_array+0xc>
 8006eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eba:	4798      	blx	r3
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	e7f2      	b.n	8006ea6 <__libc_init_array+0x1e>
 8006ec0:	080070f8 	.word	0x080070f8
 8006ec4:	080070f8 	.word	0x080070f8
 8006ec8:	080070f8 	.word	0x080070f8
 8006ecc:	080070fc 	.word	0x080070fc

08006ed0 <memcmp>:
 8006ed0:	b530      	push	{r4, r5, lr}
 8006ed2:	2400      	movs	r4, #0
 8006ed4:	42a2      	cmp	r2, r4
 8006ed6:	d101      	bne.n	8006edc <memcmp+0xc>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e007      	b.n	8006eec <memcmp+0x1c>
 8006edc:	5d03      	ldrb	r3, [r0, r4]
 8006ede:	3401      	adds	r4, #1
 8006ee0:	190d      	adds	r5, r1, r4
 8006ee2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006ee6:	42ab      	cmp	r3, r5
 8006ee8:	d0f4      	beq.n	8006ed4 <memcmp+0x4>
 8006eea:	1b58      	subs	r0, r3, r5
 8006eec:	bd30      	pop	{r4, r5, pc}

08006eee <memcpy>:
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	1e43      	subs	r3, r0, #1
 8006ef2:	440a      	add	r2, r1
 8006ef4:	4291      	cmp	r1, r2
 8006ef6:	d100      	bne.n	8006efa <memcpy+0xc>
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f02:	e7f7      	b.n	8006ef4 <memcpy+0x6>

08006f04 <memset>:
 8006f04:	4402      	add	r2, r0
 8006f06:	4603      	mov	r3, r0
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d100      	bne.n	8006f0e <memset+0xa>
 8006f0c:	4770      	bx	lr
 8006f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f12:	e7f9      	b.n	8006f08 <memset+0x4>

08006f14 <_init>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr

08006f20 <_fini>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	bf00      	nop
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr
